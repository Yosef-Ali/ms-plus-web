{"_id":"gatsby-plugin-image","_rev":"322-26b0c8d4f5bb6c6b915021f61b51ab92","name":"gatsby-plugin-image","dist-tags":{"static-image":"0.0.5-static-image.17139","latest":"2.20.0","dev-ssr-2":"0.0.4-dev-ssr-2.17009","next":"2.21.0-next.1","image-helpers":"0.2.0-image-helpers.59","telemetry-test":"0.2.0-telemetry-test.360","avif":"0.5.0-avif.11","query-chunk-stats-base":"0.6.0-query-chunk-stats-base.68","cbp3":"1.0.0-cpb3.33","reach-router":"1.0.0-reach-router.17","v3rc":"1.0.0-v3rc.1","alpha-sharp-upgrade":"1.3.0-alpha-sharp-upgrade.15","functions-next":"1.4.0-functions-next.18","alpha-remote-file":"1.10.0-alpha-remote-file.48","alpha-qe-sm":"1.14.0-alpha-qe-sm.33","alpha-remote-fetch":"1.14.0-alpha-remote-fetch.79","alpha-9689ff":"2.0.0-alpha-9689ff.13","coreutils":"1.12.0-coreutils.29","drupal-next":"1.14.0-drupal-next.81","latest-v3":"1.14.2","alpha-trailing-slash":"2.5.0-alpha-trailing-slash.71","alpha-ts-jit":"2.6.0-alpha-ts-jit.27","image-service":"2.8.0-alpha-image-service.35","image-cdn":"2.9.0-alpha-image-service2.14","luda":"2.16.0-alpha-luda.34","wp-image-cdn-auth":"2.15.0-alpha-wp-image-cdn-auth.46","image-cdn-caching":"2.16.0-alpha-image-cdn-caching.9","drupal-image-404":"2.17.0-alpha-drupal-image-404.12","alpha-mdx-v2":"2.18.0-alpha-mdx-v2.68","image-cdn-jobs-resolve":"2.18.0-alpha-image-cdn-jobs-resolve.32","mdxv4-rc":"2.20.0-mdxv4-rc.65","alpha-gatsby-metadata":"2.17.0-alpha-gatsby-metadata.81","drupal-self-reference":"2.18.0-alpha-drupal-self-reference.18"},"versions":{"1.0.1-static-image.16885":{"name":"gatsby-plugin-image","version":"1.0.1-static-image.16885","scripts":{"build":"npm-run-all -s clean build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/gatsby-image.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.6","@types/babel__traverse":"^7.0.9","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.50","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.3","npm-run-all":"^4.1.5","postcss":"^8.1.1","terser":"^5.3.3","typescript":"^3.9.5"},"peerDependencies":{"babel-plugin-remove-graphql-queries":"*","gatsby":">=2","gatsby-cli":"*","gatsby-core-utils":"*","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","chokidar":"^3.4.2","fs-extra":"^8.1.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"51553749c70811034c4e9e191780e0e4c93ea43a","description":"This plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.1-static-image.16885","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-5hensejoXU/kn2eGvLevyYRbEJtDFgp5Q05t3x4vBLzUQkm2oY+mZgcCJwfBTWcaRtDLZ8aMxiMh5WNQHdUYmA==","shasum":"6e40de554e9e117fa8335b60e88bac8a2c9ca482","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.1-static-image.16885.tgz","fileCount":96,"unpackedSize":615875,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJffFPcCRA9TVsSAnZWagAAgHYP/1TSe41mFm4iYlDoP9ao\nQfd52EJMX/AFsAbaMXwbO2Ji52IlzTNIxQlOrh30wYBEUUoEaX0SvVEbFsgl\nWMgrIrD/Sre960BT9vwlpjEQaorWsIBDV/IiLYWBzFNcFBvQQJ1yJMmhCvfN\nqab8uuXuD0d+DDsoaNxl+iV7PRgGEnlJHYbgDCER1QiqNhRrbBx7D+ynSu65\ngeghaXlwfrGuf6rhmuCXjSDVEnR+LtrpfEp53pMXnQeQ90rdWwNzxlp3o13Z\nXeWt/cYbGpU+DWa2/jUfi7rsLfpSYrw7hM9vAszBFB3XogCKakZHTjcwjbKW\nv3OP7Z7s3JczdV5s30BRrHWddNJA2eMSqhSsL+fYSOHRcLZCQ14yk0xbFhy8\n1GAMVRIVy0pVb50GzrrNm52sJ4BMGzf+2MSrtDg6UejnSKXgyUVaYLxwtQUM\n8tDQI2SZXJ/NE+XfmOrWCtVb101O0US4+S5boIVMe6TUWwaZzqph/+b3XBVB\nyGsFIcrFWd7JbaUCSi7FsmBJXKVTC40vrpfKopcxa6TnPspxc56tjJoI6AIi\npJgs/U6nlKaSsBmUUE2hWJvs7VxYGJJDQk2CS2/Fib+l0vm5n6hLTKZmUTZJ\nTbk9IbQ7aLlfQltVb4qNiqCzWOlVhhlMSStTXeqP6gFUwfzZuYJ2bm9re0HO\nhabu\r\n=9q1D\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBCc1EOw7c97Km6m/qT+wqzppYJ6qy6/c5JiGE0+8tZxAiEAv2k4PzSyzLYnHPOHqS9LbKoo9HN+1aG0M1aEoNv0IT4="}]},"maintainers":[{"name":"ascorbic","email":"m@mk.gg"}],"_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.1-static-image.16885_1601983452393_0.9250227566031293"},"_hasShrinkwrap":false},"1.0.1-static-image.16886":{"name":"gatsby-plugin-image","version":"1.0.1-static-image.16886","scripts":{"build":"npm-run-all -s clean build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/gatsby-image.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.6","@types/babel__traverse":"^7.0.9","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.50","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.3","npm-run-all":"^4.1.5","postcss":"^8.1.1","terser":"^5.3.3","typescript":"^3.9.5"},"peerDependencies":{"babel-plugin-remove-graphql-queries":"*","gatsby":">=2","gatsby-cli":"*","gatsby-core-utils":"*","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","chokidar":"^3.4.2","fs-extra":"^8.1.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"e93480fcc77872b5e5b33a85fd34e5ffba67191a","readme":"# Experimental image plugin\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).\n\n## Usage\n\nInstall `gatsby-plugin-image`, then add it to your `gatsby-config.js`.\n\n# Static images\n\nThe [gatsby-image](https://www.gatsbyjs.org/packages/gatsby-image/), component combined with the sharp plugin, as an awesome way to automatically resize and optimise your images and serve them on the most performant way. This plugin is a proof of concept for a simpler way to use Gatsby's image processing tools without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\nThe normal way to do this now is with `useStaticQuery`:\n\n```js\nimport React from \"react\"\nimport Img from \"gatsby-image\"\n\nexport const Dino = () => {\n  const data = useStaticQuery(graphql`\n    query LogoQuery {\n      file(relativePath: { eq: \"trex.png\" }) {\n        childImageSharp {\n          fixed(height: 100) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fixed={data?.file?.childImageSharp?.fixed} alt=\"T-Rex\" />\n}\n```\n\nThis component lets you write this instead:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML\n\nYou can pass in options that match ones passed to the `ImageSharp` query:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    base64={false}\n    fluid\n    webP\n    grayscale\n    maxWidth={200}\n    alt=\"T-Rex\"\n  />\n)\n```\n\n...is equivalent to:\n\n```js\nimport React from \"react\"\nimport Img from \"gatsby-image\"\n\nexport const Dino = () => {\n  const data = useStaticQuery(graphql`\n    query LogoQuery {\n      file(relativePath: { eq: \"trex.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 200, grayscale: true) {\n            ...GatsbyImageSharpFixed_withWebp_noBase64\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fixed={data?.file?.childImageSharp?.fixed} alt=\"T-Rex\" />\n}\n```\n\n## How does it work?\n\nWhen your site is compiled, any references to StaticImage components are extracted, the images are resized by Sharp in a similar way to `gatsby-transformer-sharp`, and then the resulting sharp object is written to `.cache/caches/gatsby-plugin-image/`, with the filename generated as a hash of the normalized image props. Next, a Babel plugin finds any references to StaticImage, calculates the same hash, then adds a `require()` to that JSON file it as a new `parsedValues` prop. It then returns a GatsbyImage, passing the parsedValues as the fixed or fluid prop. Errors don't cause the build to fail, but instead are written to the component as an `__error` prop, which is then logged in develop.\n\n### Are there restrictions to how this is used?\n\nThe props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\n```js\n//Doesn't work\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n//Doesn't work\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex-png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex-png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex-png\" width={width} height={height}>\n}\n```\n\n## Installation\n\n```bash\nnpm install gatsby@static-image gatsby-plugin-image@static-image\n```\n\n...then add it to your `gatsby-config.js`:\n\n```js\nmodule.exports = {\n  //...\n  plugins: [\n    \"gatsby-plugin-sharp\",\n    \"gatsby-plugin-image\",\n    //...\n  ],\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`.\n\nFor now:\n\n```typescript\nexport interface ImageOptions {\n  fixed?: boolean //Default true\n  fluid?: boolean\n  webP?: boolean\n  base64?: boolean // Default true\n  tracedSVG?: boolean\n}\n\nexport interface SomeGatsbyImageProps {\n  fadeIn?: boolean\n  durationFadeIn?: number\n  title?: string\n  alt?: string\n  className?: string | object\n  critical?: boolean\n  crossOrigin?: string | boolean\n  style?: object\n  imgStyle?: object\n  placeholderStyle?: object\n  placeholderClassName?: string\n  backgroundColor?: string | boolean\n  onLoad?: () => void\n  onError?: (event: Event) => void\n  onStartLoad?: (param: { wasCached: boolean }) => void\n  Tag?: string\n  itemProp?: string\n  loading?: `auto` | `lazy` | `eager`\n  draggable?: boolean\n}\n\nexport interface CommonImageProps {\n  quality?: number\n  jpegQuality?: number\n  pngQuality?: number\n  webpQuality?: number\n  grayscale?: boolean\n  duotone?: false | { highlight: string; shadow: string }\n  toFormat?: \"NO_CHANGE\" | \"JPG\" | \"PNG\" | \"WEBP\"\n  cropFocus?:\n    | \"CENTER\"\n    | \"NORTH\"\n    | \"NORTHEAST\"\n    | \"EAST\"\n    | \"SOUTHEAST\"\n    | \"SOUTH\"\n    | \"SOUTHWEST\"\n    | \"WEST\"\n    | \"NORTHWEST\"\n    | \"ENTROPY\"\n    | \"ATTENTION\"\n  pngCompressionSpeed?: number\n  rotate?: number\n}\n\nexport interface FluidImageProps extends CommonImageProps {\n  fluid?: true\n  fixed?: false\n  maxWidth?: number\n  maxHeight?: number\n  srcSetBreakpoints?: number[]\n  fit?: number\n  background?: number\n}\n\nexport interface FixedImageProps extends CommonImageProps {\n  fixed?: true\n  fluid?: false\n  width?: number\n  height?: number\n}\n\nexport type AllProps = ImageOptions &\n  FluidImageProps &\n  FixedImageProps &\n  SomeGatsbyImageProps & { src: string }\n```\n\n## gatsby-image next generation\n\nSpeedy, optimized images without the work.\n\ngatsby-image is a React component specially designed to give your users a great image experience. It combines speed and best practices. You can use any image processing library that you want. We suggest using gatsby-plugin-sharp as your image processor. Saving images locally improves [the important health metrics](https://web.dev/vitals/) for your site.\n\nNote: gatsby-image is not a drop-in replacement for <img />. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can build your own Gatsby-Image with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [Install](#install)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#two-types-of-responsive-images)\n- [Fixed Queries](#fixed-queries)\n- [Fluid Queries](#fluid-queries)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"` and use it in place of the built-in `img`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\n## Install\n\n`npm install gatsby-plugin-image`\n\nDepending on the gatsby starter you used, you may need to include [gatsby-transformer-sharp](/packages/gatsby-transformer-sharp/) and [gatsby-plugin-sharp](/packages/gatsby-plugin-sharp/) as well, and make sure they are installed and included in your gatsby-config.\n\n```shell\nnpm install gatsby-transformer-sharp gatsby-plugin-sharp\n```\n\nThen in your `gatsby-config.js`:\n\n```js\nplugins: [\n  `gatsby-transformer-sharp`,\n  `gatsby-plugin-sharp`,\n  `gatsby-plugin-image`,\n]\n```\n\nAlso, make sure you have set up a source plugin, so your images are available in `graphql` queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\n// TODO We don't have proper Fragments yet so this isn't user friendly yet\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage\n      placeholder={{ fallback: data.file.childImageSharp.fixed.fallback }}\n      images={{\n        fallback: {\n          src: data.file.childImageSharp.fixed.src,\n          srcSet: data.file.childImageSharp.fixed.srcSet,\n        },\n        sources: [\n          {\n            src: data.file.childImageSharp.fixed.srcWebp,\n            srcSet: data.file.childImageSharp.fixed.srcSetWebp,\n            type: \"image/webp\",\n          },\n        ],\n      }}\n      width={data.file.childImageSharp.fixed.width}\n      height={data.file.childImageSharp.fixed.height}\n      layout=\"fixed\"\n      alt=\"my gatsby image\"\n    />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          fallback: base64\n          width\n          height\n          src\n          srcSet\n          srcWebp\n          srcSetWebp\n        }\n      }\n    }\n  }\n`\n```\n\n### Upgrading from the gatsby-image@2\n\nYou can use the compat layer to make the transformation easier.\n\n```jsx\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image/compat\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage fixed={data.file.childImageSharp.fixed} />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n## Two types of responsive images\n\nThere are two types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know the exact size this image\nwill be?\" If yes, it's the first type. If no and its width and/or height need to\nvary depending on the size of the screen, then it's the second type.\n\nIn Gatsby's GraphQL implementation, you query for the first type by querying a\nchild object of an image called `fixed` — which you can see in the sample\ncomponent above. For the second type, you do a similar query but for a child\nobject called `fluid`.\n\n## `gatsby-plugin-image` props\n\n| Name                    | Type            | Description                                                 |\n| ----------------------- | --------------- | ----------------------------------------------------------- |\n| placeholder             | object          | Object holding the placeholder image                        |\n| placeholder.fallback    | string          | Source for the image                                        |\n| images                  | array           | List of different image sources (WebP, ...)                 |\n| images.fallback         | object          |                                                             |\n| images.fallback.src     | string          | The image src if srcset is not supported                    |\n| images.fallback.srcSet  | string          |                                                             |\n| images.fallback.sizes   | string          |                                                             |\n| images.sources          | array           | List of different image sources (WebP, ...)                 |\n| images.sources[].srcSet | string          |                                                             |\n| images.sources[].sizes  | string          |                                                             |\n| images.sources[].type   | string          |                                                             |\n| images.sources[].media  | string          |                                                             |\n| layout                  | string          | \"fixed\", \"responsive\" or \"intrinsic\" are values for layout. |\n| alt                     | string          | Passed to the `img` element. Defaults to an empty string    |\n| width                   | number          | Width of the image                                          |\n| height                  | number          | Height of the image                                         |\n| as                      | React Component | The component that wraps the Gatsby Image.                  |\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.1-static-image.16886","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-/ca4WPuErEZYUq4c0fgKARI/8KIUHu0D3ZdwaUuIe2Sju/55opD3rehriJaBkiPLkxyWMxr35QW5+OaeRUevig==","shasum":"79f203933510033968bd0c60afadd066fe6f1378","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.1-static-image.16886.tgz","fileCount":117,"unpackedSize":449196,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJffFopCRA9TVsSAnZWagAAMO4P/3TdMkUx1Z3/4QN4bjO/\niIY+Yl0qOAB2dfekXx+QGpPUyBSE3kYNhQ4Pl+yxsPea7tJcAVr+t6PPecnK\nPgH7Nkhc93zRjaVkYZtNIy3fc66tLdG3JqzJevKdwXlvEiHUQWDl0yN98ypy\njy/IYB5vs5O+abRHlGX8hWNpC0UFDbBCOt7FYyEHVphWIzIuWS6SthQzdJ3S\ng5XEbQ2jZMb7KfWi9GtxMKhLRhmry9vjiEFzkMAhn5eOX8DUMDall7Mpnfnc\nkVwh7P9T7QtAq+wfuRP9JZHKpsVIT568ypF7Eo00RUfZ75jhwkTR0x/waIwi\ne3SEun6T8V4FdIV7UUi4M+86nc8i9KMwg7FOOblOdbNGozCJd4ERx0tdfUG7\n24MaPqhA1qu0xlYay3BVrEtwf+sl2saSl99tlXO8Y6NVqxRYUaCVUPAPXLWu\n3I2pIkRx8YBjG/ZH96qkZEffKfbeeIQrriE7MtGaS/Cb70Lgb+s0vjA0lLqn\nZeOCMJaG1GjC9mkrK4lPIpLyYDeg8tUwbvbDsXQBQ3yC27vwIo0J9VbZ+qKT\nxICB8/Ocl8Ua4a++6Rqk0lHAlAyXzHJ4MmvfTumm6tIYduFHXXGm/e4f3yo9\nBcv3j/3zUKbV11eo/rcILQTaispPv+0JkmSM5lkmbTUdBtAiHXtObh+uPAKg\nl+HL\r\n=4Bp1\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCbEJGkOBYc8OMxpO6uTkkrpSdhnQ6S87CIvGfP/sqJCAIgCWz2WPk8Wn5NwA9Gs+M2eQTtGreiG9zIS8tPpXO9ETs="}]},"maintainers":[{"name":"ascorbic","email":"m@mk.gg"}],"_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.1-static-image.16886_1601985065055_0.8307781378209127"},"_hasShrinkwrap":false},"1.0.1-static-image.16888":{"name":"gatsby-plugin-image","version":"1.0.1-static-image.16888","scripts":{"build":"npm-run-all -s clean build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/gatsby-image.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.6","@types/babel__traverse":"^7.0.9","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.50","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.3","npm-run-all":"^4.1.5","postcss":"^8.1.1","terser":"^5.3.3","typescript":"^3.9.5"},"peerDependencies":{"babel-plugin-remove-graphql-queries":"*","gatsby":">=2","gatsby-cli":"*","gatsby-core-utils":"*","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","chokidar":"^3.4.2","fs-extra":"^8.1.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"f6e1156d137bfee2a1aa9e790299abc9c1052e66","readme":"# Experimental image plugin\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).\n\n## Usage\n\nInstall `gatsby-plugin-image`, then add it to your `gatsby-config.js`.\n\n# Static images\n\nThe [gatsby-image](https://www.gatsbyjs.org/packages/gatsby-image/), component combined with the sharp plugin, as an awesome way to automatically resize and optimise your images and serve them on the most performant way. This plugin is a proof of concept for a simpler way to use Gatsby's image processing tools without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\nThe normal way to do this now is with `useStaticQuery`:\n\n```js\nimport React from \"react\"\nimport Img from \"gatsby-image\"\n\nexport const Dino = () => {\n  const data = useStaticQuery(graphql`\n    query LogoQuery {\n      file(relativePath: { eq: \"trex.png\" }) {\n        childImageSharp {\n          fixed(height: 100) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fixed={data?.file?.childImageSharp?.fixed} alt=\"T-Rex\" />\n}\n```\n\nThis component lets you write this instead:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML\n\nYou can pass in options that match ones passed to the `ImageSharp` query:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    base64={false}\n    fluid\n    webP\n    grayscale\n    maxWidth={200}\n    alt=\"T-Rex\"\n  />\n)\n```\n\n...is equivalent to:\n\n```js\nimport React from \"react\"\nimport Img from \"gatsby-image\"\n\nexport const Dino = () => {\n  const data = useStaticQuery(graphql`\n    query LogoQuery {\n      file(relativePath: { eq: \"trex.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 200, grayscale: true) {\n            ...GatsbyImageSharpFixed_withWebp_noBase64\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fixed={data?.file?.childImageSharp?.fixed} alt=\"T-Rex\" />\n}\n```\n\n## How does it work?\n\nWhen your site is compiled, any references to StaticImage components are extracted, the images are resized by Sharp in a similar way to `gatsby-transformer-sharp`, and then the resulting sharp object is written to `.cache/caches/gatsby-plugin-image/`, with the filename generated as a hash of the normalized image props. Next, a Babel plugin finds any references to StaticImage, calculates the same hash, then adds a `require()` to that JSON file it as a new `parsedValues` prop. It then returns a GatsbyImage, passing the parsedValues as the fixed or fluid prop. Errors don't cause the build to fail, but instead are written to the component as an `__error` prop, which is then logged in develop.\n\n### Are there restrictions to how this is used?\n\nThe props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\n```js\n//Doesn't work\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n//Doesn't work\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex-png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex-png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex-png\" width={width} height={height}>\n}\n```\n\n## Installation\n\n```bash\nnpm install gatsby@static-image gatsby-plugin-image@static-image\n```\n\n...then add it to your `gatsby-config.js`:\n\n```js\nmodule.exports = {\n  //...\n  plugins: [\n    \"gatsby-plugin-sharp\",\n    \"gatsby-plugin-image\",\n    //...\n  ],\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`.\n\nFor now:\n\n```typescript\nexport interface ImageOptions {\n  fixed?: boolean //Default true\n  fluid?: boolean\n  webP?: boolean\n  base64?: boolean // Default true\n  tracedSVG?: boolean\n}\n\nexport interface SomeGatsbyImageProps {\n  fadeIn?: boolean\n  durationFadeIn?: number\n  title?: string\n  alt?: string\n  className?: string | object\n  critical?: boolean\n  crossOrigin?: string | boolean\n  style?: object\n  imgStyle?: object\n  placeholderStyle?: object\n  placeholderClassName?: string\n  backgroundColor?: string | boolean\n  onLoad?: () => void\n  onError?: (event: Event) => void\n  onStartLoad?: (param: { wasCached: boolean }) => void\n  Tag?: string\n  itemProp?: string\n  loading?: `auto` | `lazy` | `eager`\n  draggable?: boolean\n}\n\nexport interface CommonImageProps {\n  quality?: number\n  jpegQuality?: number\n  pngQuality?: number\n  webpQuality?: number\n  grayscale?: boolean\n  duotone?: false | { highlight: string; shadow: string }\n  toFormat?: \"NO_CHANGE\" | \"JPG\" | \"PNG\" | \"WEBP\"\n  cropFocus?:\n    | \"CENTER\"\n    | \"NORTH\"\n    | \"NORTHEAST\"\n    | \"EAST\"\n    | \"SOUTHEAST\"\n    | \"SOUTH\"\n    | \"SOUTHWEST\"\n    | \"WEST\"\n    | \"NORTHWEST\"\n    | \"ENTROPY\"\n    | \"ATTENTION\"\n  pngCompressionSpeed?: number\n  rotate?: number\n}\n\nexport interface FluidImageProps extends CommonImageProps {\n  fluid?: true\n  fixed?: false\n  maxWidth?: number\n  maxHeight?: number\n  srcSetBreakpoints?: number[]\n  fit?: number\n  background?: number\n}\n\nexport interface FixedImageProps extends CommonImageProps {\n  fixed?: true\n  fluid?: false\n  width?: number\n  height?: number\n}\n\nexport type AllProps = ImageOptions &\n  FluidImageProps &\n  FixedImageProps &\n  SomeGatsbyImageProps & { src: string }\n```\n\n## gatsby-image next generation\n\nSpeedy, optimized images without the work.\n\ngatsby-image is a React component specially designed to give your users a great image experience. It combines speed and best practices. You can use any image processing library that you want. We suggest using gatsby-plugin-sharp as your image processor. Saving images locally improves [the important health metrics](https://web.dev/vitals/) for your site.\n\nNote: gatsby-image is not a drop-in replacement for <img />. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can build your own Gatsby-Image with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [Install](#install)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#two-types-of-responsive-images)\n- [Fixed Queries](#fixed-queries)\n- [Fluid Queries](#fluid-queries)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"` and use it in place of the built-in `img`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\n## Install\n\n`npm install gatsby-plugin-image`\n\nDepending on the gatsby starter you used, you may need to include [gatsby-transformer-sharp](/packages/gatsby-transformer-sharp/) and [gatsby-plugin-sharp](/packages/gatsby-plugin-sharp/) as well, and make sure they are installed and included in your gatsby-config.\n\n```shell\nnpm install gatsby-transformer-sharp gatsby-plugin-sharp\n```\n\nThen in your `gatsby-config.js`:\n\n```js\nplugins: [\n  `gatsby-transformer-sharp`,\n  `gatsby-plugin-sharp`,\n  `gatsby-plugin-image`,\n]\n```\n\nAlso, make sure you have set up a source plugin, so your images are available in `graphql` queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\n// TODO We don't have proper Fragments yet so this isn't user friendly yet\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage\n      placeholder={{ fallback: data.file.childImageSharp.fixed.fallback }}\n      images={{\n        fallback: {\n          src: data.file.childImageSharp.fixed.src,\n          srcSet: data.file.childImageSharp.fixed.srcSet,\n        },\n        sources: [\n          {\n            src: data.file.childImageSharp.fixed.srcWebp,\n            srcSet: data.file.childImageSharp.fixed.srcSetWebp,\n            type: \"image/webp\",\n          },\n        ],\n      }}\n      width={data.file.childImageSharp.fixed.width}\n      height={data.file.childImageSharp.fixed.height}\n      layout=\"fixed\"\n      alt=\"my gatsby image\"\n    />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          fallback: base64\n          width\n          height\n          src\n          srcSet\n          srcWebp\n          srcSetWebp\n        }\n      }\n    }\n  }\n`\n```\n\n### Upgrading from the gatsby-image@2\n\nYou can use the compat layer to make the transformation easier.\n\n```jsx\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image/compat\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage fixed={data.file.childImageSharp.fixed} />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n## Two types of responsive images\n\nThere are two types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know the exact size this image\nwill be?\" If yes, it's the first type. If no and its width and/or height need to\nvary depending on the size of the screen, then it's the second type.\n\nIn Gatsby's GraphQL implementation, you query for the first type by querying a\nchild object of an image called `fixed` — which you can see in the sample\ncomponent above. For the second type, you do a similar query but for a child\nobject called `fluid`.\n\n## `gatsby-plugin-image` props\n\n| Name                    | Type            | Description                                                 |\n| ----------------------- | --------------- | ----------------------------------------------------------- |\n| placeholder             | object          | Object holding the placeholder image                        |\n| placeholder.fallback    | string          | Source for the image                                        |\n| images                  | array           | List of different image sources (WebP, ...)                 |\n| images.fallback         | object          |                                                             |\n| images.fallback.src     | string          | The image src if srcset is not supported                    |\n| images.fallback.srcSet  | string          |                                                             |\n| images.fallback.sizes   | string          |                                                             |\n| images.sources          | array           | List of different image sources (WebP, ...)                 |\n| images.sources[].srcSet | string          |                                                             |\n| images.sources[].sizes  | string          |                                                             |\n| images.sources[].type   | string          |                                                             |\n| images.sources[].media  | string          |                                                             |\n| layout                  | string          | \"fixed\", \"responsive\" or \"intrinsic\" are values for layout. |\n| alt                     | string          | Passed to the `img` element. Defaults to an empty string    |\n| width                   | number          | Width of the image                                          |\n| height                  | number          | Height of the image                                         |\n| as                      | React Component | The component that wraps the Gatsby Image.                  |\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.1-static-image.16888","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-jAEjmz08qEIbJZdGg1n6/8KWpm73ZgFRUKWuUSs910quY4C8osR+5qwaAgQW5g+P2g4M+sal952LUhuEWYHPcA==","shasum":"900217d94d6aff380e541634fbaf190da384f696","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.1-static-image.16888.tgz","fileCount":121,"unpackedSize":494815,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJffHOzCRA9TVsSAnZWagAAKYEP/1dRvEJVZyYPVA9qalMF\nXmakh1BL2HnYYhGEqPQmY2NuzoFWhnwp0gBXCwZ7v6HlYx5Py6MjbEIK/1kR\ncbw/TKPoDzDvU/bV1BKCWF9izzrGxtHf+FkygjibluVsYyKIBqded2aACQrc\npoH/943xXHDRa4iajeb3sNIIM7Edezu2qc6075c7tF6RE/6yi1dI4gqt0BL6\n+MWwHRKI9yESKz5hg/fV/v40AFRigKbeCmJiRKVgLc/2OEGeZq+3VQ2m/nWe\nAmYjwprqnRQmcjRXKK45obgNmjExChUwFMgwzXQ6au/+JTbbwOxLXFW0xc2q\nBwxB23zbwXJrd9rljfEpXcdm7Qt3bE97SmBl7X1ytp3oG0Qq7ARyLcE8iUys\nV5ppfxZSUjpUr2srb8GTxuM58i1bceuYvUEXvS6k7fv5vRodYWvWz7FKCqmt\nMJSq+GUbWXXdmeWeLuAoduFTMG2hFG2CkBFCpcItRcTWincyEroUbQaEeI2i\nLW2KMODuuk/Wf300hFnNkwdApi1I+LPdd6n8Tom4gIKUnjJ0FWwDAUI3Qa5A\nKfDoXoccSZuFpmEVhbJtB5qzYLtw8M0t6iK72SMdqHFsZz+T4Bs3eMGNOKtD\nRsDMKY+Aswmdbj0uPEn2rLGRpXbTxP34FnEPsh+8us7RDjWa17J8rXP7pKVZ\nF4Mf\r\n=q9ZR\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCxvIm6g78jqoja9w22nfJAH8bceR/TyIP9keKz5xsfvwIhANLhUKs4zNJOBzcHEbIq0Tv/Nw2DoOh7WIWsUXVUA7Kd"}]},"maintainers":[{"name":"ascorbic","email":"m@mk.gg"}],"_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.1-static-image.16888_1601991603336_0.22098302504221357"},"_hasShrinkwrap":false},"0.0.2":{"name":"gatsby-plugin-image","version":"0.0.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.6","@types/babel__traverse":"^7.0.9","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.50","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.3","npm-run-all":"^4.1.5","postcss":"^8.1.1","terser":"^5.3.3","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.9.19","chokidar":"^3.4.2","fs-extra":"^8.1.0","gatsby-core-utils":"^1.3.20","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"2494ae111f56e412071b103f202124c71c309e9b","description":"This plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.0.2","_nodeVersion":"11.6.0","_npmVersion":"lerna/3.22.1/node@v11.6.0+x64 (darwin)","dist":{"integrity":"sha512-AwD8cFELIAxrARpihMnoQrVy/lqpknIKxGmQZTq6E0dHw/YvlPK6L+zUbPP0zvUBqgP6MLV8YbAwFtcjc1YOTA==","shasum":"d3ee62f24a3578f501f16d05df94fe527cd6d992","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.0.2.tgz","fileCount":104,"unpackedSize":456516,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfiDPECRA9TVsSAnZWagAAyZkP/AtcDvihT2lbVqzoqBXF\n8dtAT5jlTvqjiMsrdE+gMt6glXbapEwTVUDV3B3tAr8whMEtooY1q3WTAx4q\nkIGkdJHNYpR2+9Ow+xq5CtD4K2zlC5cyIsktC7IgOF9jVWL2slQrURYYOCMm\ndXXbXP45esxxpUfkSG3XfPaD3P1g+7ui2Rtme6l4wWOwrQc6Bo3sgB8LTFn7\nSgI1ToFdS4pBD0j8Rbmm5vseeZNIZw+99WClHLQNVTwoyqISplU+OqUgOghW\nytHKQSdXOTg85dLyIFJB0VeUPU3/gJMKEUF8n36hBSwOMRKYwJL2/5Ss63gI\nK/YJtXCOkHmb81X51QjsWvVetNKWRYNoF+SXEaDenqeSQKkXL0FTcNR/v5Os\nA/IFyd4+Z29gwoxRayoaLZ84AxhA61t9UaGJxLge2TtMgJiwZpm4g2F5cwpU\n+29Xl7eG6KAIa8ALH0SEXiAaaOh/ZGRTjiwRs6U1nZhhWqBEnfRAMQAK3tKW\nOn9lNN/+hdKZs922T39lJL/b6Cw7cOqku1BZ+fHhqy1pealpYGxLR3QafsSn\nhWjA9Pv6if5xecwbx3EnzRNul5R1O/3CzKZFJO8AgjXtVEf5D7z8Xwapn5R5\nSpEOBx1TOJvx/5GVg8Hemrknc+YWhbAlLVhFfmgGV19azjJ8/u4dFClbUhD5\nGkjV\r\n=BKZV\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAi+OkjGPLX4C5uaXSSJLRCX7rfj2lwvFRK6Nexco7J/AiEA62e8XObnOjFFu1siq01m+RTo9Z8sBBdOCYh5SwqZgNY="}]},"maintainers":[{"name":"ascorbic","email":"m@mk.gg"}],"_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.0.2_1602761668247_0.023562141900699274"},"_hasShrinkwrap":false},"0.0.3":{"name":"gatsby-plugin-image","version":"0.0.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.6","@types/babel__traverse":"^7.0.9","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.50","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.3","npm-run-all":"^4.1.5","postcss":"^8.1.1","terser":"^5.3.3","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.9.19","chokidar":"^3.4.2","fs-extra":"^8.1.0","gatsby-core-utils":"^1.3.20","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"396fb6d10d74753ad375f387a64843d0f4ec0528","description":"This plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.0.3","_nodeVersion":"12.16.2","_npmVersion":"lerna/3.22.1/node@v12.16.2+x64 (linux)","dist":{"integrity":"sha512-awwSz5SPgdWEEc/N1Ln4Nttbx2Ox4GU/8Lh7iH0OgDDuDe8NCc/yYqIKIOFCuO1Ci5Y464sEfzjAuZo4gZi4CQ==","shasum":"1e086f0e4c33302bd26c8c2a986e28b0504e1773","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.0.3.tgz","fileCount":104,"unpackedSize":457740,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfiWAlCRA9TVsSAnZWagAAsmQP/AqUaaaLSaQ9kP26U7Bm\nlkr05akRUez/QASqC/uXN56t1pXx6mhlI/QXpRgIaMSmGv3uo63TQAvq3LIN\nhJp9QxwsWwXxKfB6sRiBPKVpCcRMzpJXcrV47v41a2pPBIuT9ngxM1cWgyZL\nWM3Jd8H2UKGI+ALvgqZillXBBekTHEtO55R+Ix227JiTPHKZM1untHY4vfZg\n3e/aKvI1hdvK6a4dLkF0UvGTF703cRPwHqp/rtGrt1oPmQymTMcq9xAxU/GL\nFuafuPlVpAwVzhBclSaf0v4Quo4kIuy+KrxUbZTZUmfDtvQH7QS7tMLIAqMc\nCf3yGwvUCx0XGcZFgBvJk/RD6W3Gb2HsHGOhA98NdnpSj906eRgQ9vMEsYNP\nT4e7IAhDjiP99xqj4F+aZyC4+FescRpsznnGYky1uhFT8Gv0SaN3TwNm9uJl\nm0NduiqFxajDU/RQAd1gl4Mn8TnaAsSVeIQiEfBTJF7tefENsfN3KjhTviwc\nICgvwwZjGwyj3WO0dpf6L1D92WjLTfK9vzbvHwSKz1XJZ3N2GkcAXDgC9zJA\nuyPs/iWPi4a+MaP0iSWO9possmZ5N4OX9sobMp5eTCEDrKQxCgn4DuHFkmhc\n9znUx+HEBjAJFwGhwXjTW13qnLG/nJ5gjSJsBCPLiwphSufxspqw0sUnvq9q\nCYCf\r\n=WM2z\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDaM5HDGv64krIUFgs6rJTQzhon2aNY8neOq6uHYnInCAiEA2ewLrAq1F6V2wyebuh/rdlfkB2w3H+734FlEZ5uHLrM="}]},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.0.3_1602838564879_0.8720873844861443"},"_hasShrinkwrap":false},"0.0.4-dev-ssr-2.17009":{"name":"gatsby-plugin-image","version":"0.0.4-dev-ssr-2.17009","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.6","@types/babel__traverse":"^7.0.9","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.50","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.3","npm-run-all":"^4.1.5","postcss":"^8.1.1","terser":"^5.3.3","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"2.9.20","chokidar":"^3.4.2","fs-extra":"^8.1.0","gatsby-core-utils":"1.3.23","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"1cd80bf860870698296c30f4f05a20f0930b222f","readme":"# Experimental image plugin\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).\n\nThis package is in alpha, and the API will change. It is not ready for production use yet, but feedback would be great.\n\n## Usage\n\nInstall `gatsby-plugin-image` and `gatsby-plugin-sharp`, then add them to your `gatsby-config.js`. Upgrade `gatsby` to at least `2.24.78`.\n\n# Static images\n\nThis plugin is a proof of concept for a simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\nThe current way to do this is with `useStaticQuery`:\n\n```js\nimport React from \"react\"\nimport Img from \"gatsby-image\"\n\nexport const Dino = () => {\n  const data = useStaticQuery(graphql`\n    query LogoQuery {\n      file(relativePath: { eq: \"trex.png\" }) {\n        childImageSharp {\n          fixed(height: 100) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fixed={data?.file?.childImageSharp?.fixed} alt=\"T-Rex\" />\n}\n```\n\nUsing this plugin, the code above can be written as follows:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via `ImageSharp` queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    base64={false}\n    grayscale\n    maxWidth={200}\n    alt=\"T-Rex\"\n  />\n)\n```\n\n...is equivalent to:\n\n```js\nimport React from \"react\"\nimport Img from \"gatsby-image\"\n\nexport const Dino = () => {\n  const data = useStaticQuery(graphql`\n    query LogoQuery {\n      file(relativePath: { eq: \"trex.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 200, grayscale: true) {\n            ...GatsbyImageSharpFixed_withWebp_noBase64\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fixed={data?.file?.childImageSharp?.fixed} alt=\"T-Rex\" />\n}\n```\n\n## How does it work?\n\nWhen your site is compiled, any references to StaticImage components are extracted, the images are resized by Sharp in a similar way to `gatsby-transformer-sharp`, and then the resulting sharp object is written to `.cache/caches/gatsby-plugin-image/`, with the filename generated as a hash of the normalized image props. Next, a Babel plugin finds any references to StaticImage, calculates the same hash, then adds a `require()` to that JSON file as a new `__imageData` prop. It then returns a GatsbyImage using that **imageData. Errors don't cause the build to fail, but instead are written to the component as an `**error` prop, which is then logged in develop.\n\n### Are there restrictions to how this is used?\n\nThe props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\n```js\n//Doesn't work\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n//Doesn't work\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n## Installation\n\n```bash\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\n...then add it to your `gatsby-config.js`:\n\n```js\nmodule.exports = {\n  //...\n  plugins: [\n    \"gatsby-plugin-sharp\",\n    \"gatsby-plugin-image\",\n    //...\n  ],\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsby-image-next-generation)\n\n## gatsby-image next generation\n\nSpeedy, optimized images without the work.\n\ngatsby-image is a React component specially designed to give your users a great image experience. It combines speed and best practices. You can use any image processing library that you want. We suggest using gatsby-plugin-sharp as your image processor. Saving images locally improves [the important health metrics](https://web.dev/vitals/) for your site.\n\nNote: gatsby-image is not a drop-in replacement for <img />. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can build your own Gatsby-Image with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [Install](#install)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#two-types-of-responsive-images)\n- [Fixed Queries](#fixed-queries)\n- [Fluid Queries](#fluid-queries)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"` and use it in place of the built-in `img`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\n## Install\n\n`npm install gatsby-plugin-image`\n\nDepending on the gatsby starter you used, you may need to include [gatsby-transformer-sharp](/packages/gatsby-transformer-sharp/) and [gatsby-plugin-sharp](/packages/gatsby-plugin-sharp/) as well, and make sure they are installed and included in your gatsby-config.\n\n```shell\nnpm install gatsby-transformer-sharp gatsby-plugin-sharp\n```\n\nThen in your `gatsby-config.js`:\n\n```js\nplugins: [\n  `gatsby-transformer-sharp`,\n  `gatsby-plugin-sharp`,\n  `gatsby-plugin-image`,\n]\n```\n\nAlso, make sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\n// TODO We don't have proper Fragments yet so this isn't user friendly yet\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage\n      placeholder={{ fallback: data.file.childImageSharp.fixed.fallback }}\n      images={{\n        fallback: {\n          src: data.file.childImageSharp.fixed.src,\n          srcSet: data.file.childImageSharp.fixed.srcSet,\n        },\n        sources: [\n          {\n            src: data.file.childImageSharp.fixed.srcWebp,\n            srcSet: data.file.childImageSharp.fixed.srcSetWebp,\n            type: \"image/webp\",\n          },\n        ],\n      }}\n      width={data.file.childImageSharp.fixed.width}\n      height={data.file.childImageSharp.fixed.height}\n      layout=\"fixed\"\n      alt=\"my gatsby image\"\n    />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          fallback: base64\n          width\n          height\n          src\n          srcSet\n          srcWebp\n          srcSetWebp\n        }\n      }\n    }\n  }\n`\n```\n\n### Upgrading from the gatsby-image@2\n\nYou can use the compat layer to make the transformation easier.\n\n```jsx\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image/compat\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage fixed={data.file.childImageSharp.fixed} />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n## Two types of responsive images\n\nThere are two types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's the first type. If no and its width and/or height need to\nvary depending on the size of the screen, then it's the second type.\n\nIn Gatsby's GraphQL implementation, you query for the first type by querying a\nchild object of an image called `fixed` — which you can see in the sample\ncomponent above. For the second type, you do a similar query but for a child\nobject called `fluid`.\n\n## `gatsby-plugin-image` props\n\n| Name                    | Type            | Description                                                 |\n| ----------------------- | --------------- | ----------------------------------------------------------- |\n| placeholder             | object          | Object holding the placeholder image                        |\n| placeholder.fallback    | string          | Source for the image                                        |\n| images                  | array           | List of different image sources (WebP, ...)                 |\n| images.fallback         | object          |                                                             |\n| images.fallback.src     | string          | The image src if srcset is not supported                    |\n| images.fallback.srcSet  | string          |                                                             |\n| images.fallback.sizes   | string          |                                                             |\n| images.sources          | array           | List of different image sources (WebP, ...)                 |\n| images.sources[].srcSet | string          |                                                             |\n| images.sources[].sizes  | string          |                                                             |\n| images.sources[].type   | string          |                                                             |\n| images.sources[].media  | string          |                                                             |\n| layout                  | string          | \"fixed\", \"responsive\" or \"intrinsic\" are values for layout. |\n| alt                     | string          | Passed to the `img` element. Defaults to an empty string    |\n| width                   | number          | Width of the image                                          |\n| height                  | number          | Height of the image                                         |\n| as                      | React Component | The component that wraps the Gatsby Image.                  |\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.0.4-dev-ssr-2.17009","_nodeVersion":"12.16.3","_npmVersion":"lerna/3.22.1/node@v12.16.3+x64 (darwin)","dist":{"integrity":"sha512-JBMWnLS8yzJEiB/NeWwyf8U/dQkaniCdJ6KczhOoEpq0m0aTsb+H4jhqyGXlckkyhWdhak/KABHBq675PyXdqA==","shasum":"5a48b36834aaf3143d0b624990628ae6b9c90a83","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.0.4-dev-ssr-2.17009.tgz","fileCount":104,"unpackedSize":457765,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfjdBiCRA9TVsSAnZWagAARMwP/0NNDHy9dt3ZzHN+C3WM\nVrgm/4NVRp5CfV0qDUErYN1TqS5tnz9R8QZ85JbJl2avzjEoPmLW6PNfJM5a\nJSjuhmWB5r3+kC5TlWLIBZMRuL4scHuvBmO7FjPmVIZxIci0u7FouB2ZSxXm\nfhzahcmZl7bx4vbyy06K97tAGLj4GxBzcxy/o86WtUKmtf8ERdQIamYXUsPN\npqGRQQ0z3s7Z+LXTvIUB6FwUTWJvT190y/SkXHDuanogfJ/mIofLNyk8GHKY\nMlvB4MucJcFM5XhExpuSo9IVmwnsFtBN6XAAwjifoi/s7nRF1OUwF8ZbjAuE\nfmniBo/kskQSZ06RIs8TP73asFcsRr0OrpxA/dzLd13KQEoxetIUxsjdQLss\nqL97B6fFyHNVamQzKpO9GtJw6cT1FMXhClwzogVg6zFRM2mqxGpPaoG1dx/o\npn7yk9xTtU/XHslcHv2vuXY7TCoCpjqWakECx87KzF/XDwrs6IiEYxbW3QeY\nz2PvakSbW871lJ1atICfIYs95OoIxHcIz2IKAAaY5XtqTLHHWk8sclxOis74\nEWAGkW7diUEpYM6tfSwoLnJ1jQ8Q2Q9zcX1Re2PdAFw4uu3uvOI3izz+IV1y\nVJAa5fMXIwJ9bPKiR6dGuurkszHL9hX8QrssyHOX0J/vacJyvWSpUihFt00A\ngYBr\r\n=mpc8\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDQGS+FICkYlRp9syBML32AThj/L742CYgMi7Wz5iVESAIgIEYbd4ZfGN0a1HsuIbf4nK+Bsi3QeHdGXEpo232bxYo="}]},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmUser":{"name":"kylemathews","email":"mathews.kyle@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.0.4-dev-ssr-2.17009_1603129435150_0.06255769145501411"},"_hasShrinkwrap":false},"0.0.4":{"name":"gatsby-plugin-image","version":"0.0.4","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.6","@types/babel__traverse":"^7.0.9","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.53","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.3","npm-run-all":"^4.1.5","postcss":"^8.1.1","terser":"^5.3.3","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.9.19","chokidar":"^3.4.2","fs-extra":"^8.1.0","gatsby-core-utils":"^1.3.20","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"c0668d4ef25dab4ac43bc3bf1064c95132c5a059","description":"This plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.0.4","_nodeVersion":"10.13.0","_npmVersion":"lerna/3.22.1/node@v10.13.0+x64 (linux)","dist":{"integrity":"sha512-QDf3TZtKgOQA4VJvRDKKyqSXY3nX4bzgJWRgFbTIFfbnuugW2QYNHoXvFF+WT0KwfuQrT+foquU2kcvJaN7cTg==","shasum":"4be0e8044a64dc88c07dec021667dd870079b55a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.0.4.tgz","fileCount":104,"unpackedSize":457924,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfjtqKCRA9TVsSAnZWagAAOWwQAJ8MDE/6kpu+d8b9YorF\nWx40n8O+YPuANww+ANS0kQopFCrYGa1CmNfSUHgwiC58nnkcttjLVnQCHBuM\neH85Cey94QBRAV44z0khwW5vZFNG5UqUd/hOQoGt9VGToMqeWobWjvzxrT5P\n42QAT+hRiktMHJj1Lx2h37UGqmEhOSulnHgiqKubi3psitXjO7XhZ+geoCfq\nUjSdTp7A2RFnIaQceev8kcrQdYzcD8j9ckIAXxyI/GSEm+jro22MpF32Ev9u\nSYy7LQPhJPAekBwWqCGkQalehSPsslrpnCEu7YN3knkcZkV+i4q/h/y3cd4d\n7zupHxudAQCxRoX7/0uPDVzN96lTmJXHE8gJoS3NpIYqK8B4qEasFPEtzQeG\n2RyaNpcSb2CaeI9g5PP/4goNgg52WplFvXPUk6W+Q6NNk9ARHj+fL3YCKcXs\nQ/5hI7d6aofyReyh9grII9BY2nmyR+l7lNDN1jtKn4cGiTmuy33f0FBpBoHa\n633NozDD2IoBwUDA7OJJ68zBVDMK6tiEtNSX/mRlgzU2KVSyASTocMg9SuIe\nckIOSJmsS3whWb3Kyni7UmMH2LDpT8stNJop3BaCFg0GUVcCWiT19wES0LEG\nC3a94a4ISSTXzCAoZyOaG6CRPjMVKnFvrWRWKCuSpgHNoViILps0m+ATLJ6p\n1rqO\r\n=mYf9\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGaYDi7z2AHKVVTpSyFGXKg+mpHYdTx3eEpRRgX7b45bAiEA+/FQsuxXQINxQba5VuQ8JBV2T5KD/iBa5qfAN4JXws8="}]},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmUser":{"name":"kuvos","email":"npm-public@qfox.nl"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.0.4_1603197577868_0.9536646681404011"},"_hasShrinkwrap":false},"0.0.4-static-image.17092":{"name":"gatsby-plugin-image","version":"0.0.4-static-image.17092","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.6","@types/babel__traverse":"^7.0.9","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.50","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.3","npm-run-all":"^4.1.5","postcss":"^8.1.1","terser":"^5.3.3","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"2.9.20","chokidar":"^3.4.2","fs-extra":"^8.1.0","gatsby-core-utils":"1.3.23","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"f65ed0515ae1b0615c2b0be983af3377b1f9ec4c","readme":"# Experimental image plugin\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).\n\nThis package is in alpha, and the API will change. It is not ready for production use yet, but feedback would be great.\n\n## Usage\n\nInstall `gatsby-plugin-image` and `gatsby-plugin-sharp`, then add them to your `gatsby-config.js`. Upgrade `gatsby` to at least `2.24.78`.\n\n# Static images\n\nThis plugin is a proof of concept for a simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\nThe old way to do this is with `useStaticQuery`:\n\n```js\nimport React from \"react\"\nimport Img from \"gatsby-image\"\n\nexport const Dino = () => {\n  const data = useStaticQuery(graphql`\n    query LogoQuery {\n      file(relativePath: { eq: \"trex.png\" }) {\n        childImageSharp {\n          fixed(height: 100) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fixed={data?.file?.childImageSharp?.fixed} alt=\"T-Rex\" />\n}\n```\n\nUsing this plugin, the code above can be written as follows:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via `ImageSharp` queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    grayscale\n    maxWidth={200}\n    alt=\"T-Rex\"\n  />\n)\n```\n\n...is equivalent to:\n\n```js\nimport React from \"react\"\nimport Img from \"gatsby-image\"\n\nexport const Dino = () => {\n  const data = useStaticQuery(graphql`\n    query LogoQuery {\n      file(relativePath: { eq: \"trex.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 200, grayscale: true) {\n            ...GatsbyImageSharpFixed_withWebp_noBase64\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fixed={data?.file?.childImageSharp?.fixed} alt=\"T-Rex\" />\n}\n```\n\n## How does it work?\n\nWhen your site is compiled, any references to StaticImage components are extracted, the images are resized by Sharp in a similar way to `gatsby-transformer-sharp`, and then the resulting sharp object is written to `.cache/caches/gatsby-plugin-image/`, with the filename generated as a hash of the normalized image props. Next, a Babel plugin finds any references to StaticImage, calculates the same hash, then adds a `require()` to that JSON file as a new `__imageData` prop. It then returns a GatsbyImage using that **imageData. Errors don't cause the build to fail, but instead are written to the component as an `**error` prop, which is then logged in develop.\n\n### Are there restrictions to how this is used?\n\nThe props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\n```js\n//Doesn't work\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n//Doesn't work\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n## Installation\n\n```bash\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\n...then add it to your `gatsby-config.js`:\n\n```js\nmodule.exports = {\n  //...\n  plugins: [\n    \"gatsby-plugin-sharp\",\n    \"gatsby-plugin-image\",\n    //...\n  ],\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsby-image-next-generation)\n\n## gatsby-image next generation\n\nSpeedy, optimized images without the work.\n\ngatsby-image is a React component specially designed to give your users a great image experience. It combines speed and best practices. You can use any image processing library that you want. We suggest using gatsby-plugin-sharp as your image processor. Saving images locally improves [the important health metrics](https://web.dev/vitals/) for your site.\n\nNote: gatsby-image is not a drop-in replacement for <img />. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can build your own Gatsby-Image with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [Install](#install)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#two-types-of-responsive-images)\n- [Fixed Queries](#fixed-queries)\n- [Fluid Queries](#fluid-queries)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"` and use it in place of the built-in `img`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\n## Install\n\n`npm install gatsby-plugin-image`\n\nDepending on the gatsby starter you used, you may need to include [gatsby-transformer-sharp](/packages/gatsby-transformer-sharp/) and [gatsby-plugin-sharp](/packages/gatsby-plugin-sharp/) as well, and make sure they are installed and included in your gatsby-config.\n\n```shell\nnpm install gatsby-transformer-sharp gatsby-plugin-sharp\n```\n\nThen in your `gatsby-config.js`:\n\n```js\nplugins: [\n  `gatsby-transformer-sharp`,\n  `gatsby-plugin-sharp`,\n  `gatsby-plugin-image`,\n]\n```\n\nAlso, make sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImage.imageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello gatsby-image</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        gatsbyImage(layout: FIXED, width: 125, height: 125) {\n          imageData\n        }\n      }\n    }\n  }\n`\n```\n\n### Upgrading from the gatsby-image@2\n\nYou can use the compat layer to make the transformation easier.\n\n```jsx\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image/compat\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage fixed={data.file.childImageSharp.fixed} />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.0.4-static-image.17092","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-WnPzyNmAxjzJ0ndMRgXXxiX+p/6vNZnRSEDwLl7kk/0jcSlEVfQLqr+//QdA8ycDKZ2HxaBySo6XX0mPueBdxg==","shasum":"74e9ecc0877146ef9a8a6e16b44d583e2386c7ad","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.0.4-static-image.17092.tgz","fileCount":167,"unpackedSize":1243113,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfj/7nCRA9TVsSAnZWagAAlEoP/ivZafnVDpP1kT/3TD4z\nei5irpquH+zv82Verko5ycEdimTxlfyYGPvz8DDf98IY6hlSjTQznuaYDLvR\nRK3MdaKX2c93RLVRRvMoLN7HhACslSHI/3DTPJhJqeN0JQzf0ab3FLPphmOg\ntYyctw4ZU700xBTR0iAJrh0VrWp+eMLsQ3nLpRUxb9LjLx6iEtqsUD8mFD0Q\nel9k4bLjnHb7tKkug4XP08SRmYT4cL1IuTp+S1Ej4MlQU7y84k3JXY6ONbjz\nQMOUvJ99W+EII1b2+QNb9/u+gc6qywdxhFNd5kcwBjpHnDUHRM1r6BwarkWM\n1WhgaGO9CTzRG0actq3eKozp5ZP1ZV0mlQU1vW7w8GaVnVa7o6NVcwzM+T21\neZXUl+NaBT3dfYVQKthBR3dgCUD1WKtq3C9RAdlS32l0jPHrvXyAiJ0GDmgc\nT6Hdn9kXZ1rRm0gWIZKD5j2fL6fgAWEf7H26ezgtoDg3eMud/qzZe8LMM1u0\nm86BjQHLBVJFi5LQv4sIp/qxUlcqOE5YsK0Qi+le64FAAN+gVGApBOP2EoUY\nbb64FgN5f1T4387JYq1xdf0Iv6J3PpCAxq4hftCtcXGPdhopLUOS4Hkow2Dz\n3JrxFWd8CUcu8NFWKmkBuyIZ3aixZV3eFCJfprb3+lxysrI+4H5VweLjeQk1\nzdE6\r\n=gryF\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAd7TCKSQxwnuUVvoirgAx7y3UaOoYRDRCuErCknJY+ZAiAw8RCAi8by5lgz74MgI7mylcQxwwO0/A9s/tGjZyArKw=="}]},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.0.4-static-image.17092_1603272422805_0.8673598860412441"},"_hasShrinkwrap":false},"0.0.5-static-image.17119":{"name":"gatsby-plugin-image","version":"0.0.5-static-image.17119","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.6","@types/babel__traverse":"^7.0.9","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.53","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.3","npm-run-all":"^4.1.5","postcss":"^8.1.1","terser":"^5.3.3","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"2.9.20","chokidar":"^3.4.2","fs-extra":"^8.1.0","gatsby-core-utils":"1.3.23","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"22f4e8a4afac558e4f49fe49e15cb81d1493e9c9","readme":"# Experimental image plugin\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).\n\nThis package is in alpha, and the API will change. It is not ready for production use yet, but feedback would be great.\n\n## Usage\n\nInstall `gatsby-plugin-image` and `gatsby-plugin-sharp`, then add them to your `gatsby-config.js`. Upgrade `gatsby` to at least `2.24.78`.\n\n# Static images\n\nThis plugin is a proof of concept for a simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\nThe old way to do this is with `useStaticQuery`:\n\n```js\nimport React from \"react\"\nimport Img from \"gatsby-image\"\n\nexport const Dino = () => {\n  const data = useStaticQuery(graphql`\n    query LogoQuery {\n      file(relativePath: { eq: \"trex.png\" }) {\n        childImageSharp {\n          fixed(height: 100) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fixed={data?.file?.childImageSharp?.fixed} alt=\"T-Rex\" />\n}\n```\n\nUsing this plugin, the code above can be written as follows:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via `ImageSharp` queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    grayscale\n    maxWidth={200}\n    alt=\"T-Rex\"\n  />\n)\n```\n\n...is equivalent to:\n\n```js\nimport React from \"react\"\nimport Img from \"gatsby-image\"\n\nexport const Dino = () => {\n  const data = useStaticQuery(graphql`\n    query LogoQuery {\n      file(relativePath: { eq: \"trex.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 200, grayscale: true) {\n            ...GatsbyImageSharpFixed_withWebp_noBase64\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fixed={data?.file?.childImageSharp?.fixed} alt=\"T-Rex\" />\n}\n```\n\n## How does it work?\n\nWhen your site is compiled, any references to StaticImage components are extracted, the images are resized by Sharp in a similar way to `gatsby-transformer-sharp`, and then the resulting sharp object is written to `.cache/caches/gatsby-plugin-image/`, with the filename generated as a hash of the normalized image props. Next, a Babel plugin finds any references to StaticImage, calculates the same hash, then adds a `require()` to that JSON file as a new `__imageData` prop. It then returns a GatsbyImage using that **imageData. Errors don't cause the build to fail, but instead are written to the component as an `**error` prop, which is then logged in develop.\n\n### Are there restrictions to how this is used?\n\nThe props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\n```js\n//Doesn't work\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n//Doesn't work\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n## Installation\n\n```bash\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\n...then add it to your `gatsby-config.js`:\n\n```js\nmodule.exports = {\n  //...\n  plugins: [\n    \"gatsby-plugin-sharp\",\n    \"gatsby-plugin-image\",\n    //...\n  ],\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsby-image-next-generation)\n\n## gatsby-image next generation\n\nSpeedy, optimized images without the work.\n\ngatsby-image is a React component specially designed to give your users a great image experience. It combines speed and best practices. You can use any image processing library that you want. We suggest using gatsby-plugin-sharp as your image processor. Saving images locally improves [the important health metrics](https://web.dev/vitals/) for your site.\n\nNote: gatsby-image is not a drop-in replacement for <img />. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can build your own Gatsby-Image with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [Install](#install)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#two-types-of-responsive-images)\n- [Fixed Queries](#fixed-queries)\n- [Fluid Queries](#fluid-queries)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"` and use it in place of the built-in `img`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\n## Install\n\n`npm install gatsby-plugin-image`\n\nDepending on the gatsby starter you used, you may need to include [gatsby-transformer-sharp](/packages/gatsby-transformer-sharp/) and [gatsby-plugin-sharp](/packages/gatsby-plugin-sharp/) as well, and make sure they are installed and included in your gatsby-config.\n\n```shell\nnpm install gatsby-transformer-sharp gatsby-plugin-sharp\n```\n\nThen in your `gatsby-config.js`:\n\n```js\nplugins: [\n  `gatsby-transformer-sharp`,\n  `gatsby-plugin-sharp`,\n  `gatsby-plugin-image`,\n]\n```\n\nAlso, make sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImage.imageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello gatsby-image</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        gatsbyImage(layout: FIXED, width: 125, height: 125) {\n          imageData\n        }\n      }\n    }\n  }\n`\n```\n\n### Upgrading from the gatsby-image@2\n\nYou can use the compat layer to make the transformation easier.\n\n```jsx\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image/compat\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage fixed={data.file.childImageSharp.fixed} />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.0.5-static-image.17119","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-5yfXZwDtqc5Sa/tsEBE+J4rnXzntTLGHp9uv3cZj8EZ5PllIu99vZpqXtI74D4VlOqFjhOF3y4pgXfvCzGIIkw==","shasum":"e1d260cda5d83e3cd4f4e23197c4cc9b5b33f748","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.0.5-static-image.17119.tgz","fileCount":101,"unpackedSize":419095,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfkAJVCRA9TVsSAnZWagAAUa4P/iChGU5sH7xJajA0JODa\nNLIv98xQpYfh3BUEUulrFvQa63yzX80ks9QfyPfvvuImx2OUyhrpCAzUIIvb\nOpOWHeXxyMk5oLtFzhcHyvXtxbcXZU+G4vXilkY7PP9SpQUvEECOa96pHNbo\nt4LC0yhjP27ODxSDvhE23VYMpn1vcKanT1Ag11t0YFbKJOkHZK0xA4h6qejK\nyaeAsDUmuiqdQ2mJqikLfM1VY4gMrQ2sCj8ps1At9qUbEiJ+YPfmsFZEjzBm\nDPujm7+tmQt4RQRn6HtDiWIpakinbCywp/jKOVaQxg9s4AAbKaaCuM8z/XCB\nSiLGb74ZsliIAW65c9sjGln+tI9z2/GUAEH+C/uAMGnE5VblixZiEL4Vb3GG\nm0Qy4+cIoG75dpkbyaVETEmuZ8G3lVfNCXzaJaBJEg2Rjk2DIWHcdoRWHroz\n3tZfh3I5uvEhOOv5xphNHqXpkp2FH8ezG2a5aJLH0zu2A+Iknsa+HivaNz8w\nqqgslHwL66wXnlaHOHvh86fV2NgRh/8uwc1Vbk6ZXxEWErF+T0sHqVMW83/Q\nhCDEn6GeOEP/lrADhy3jFux3ZwpLLosCRs0p0xpMP3hqel5KJ2nCGiTkwT0t\n2X77Gl0gE0Qe/0C99o8J2VsGudaWeOapdivUq9FwnNGNvXMvhiEWDGZju2i8\nGyKz\r\n=5tre\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICU3MkkCHluA/MEl9NbF8IiOHwwKNRJMHXuCYL7AHZ7oAiEAhF6fStJWup3xk66N8DuRvKIEp53jrD2d5ysvjSIoDBY="}]},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.0.5-static-image.17119_1603273300633_0.05388509821498233"},"_hasShrinkwrap":false},"0.0.5-static-image.17120":{"name":"gatsby-plugin-image","version":"0.0.5-static-image.17120","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.6","@types/babel__traverse":"^7.0.9","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.53","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.3","npm-run-all":"^4.1.5","postcss":"^8.1.1","terser":"^5.3.3","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"2.9.20","chokidar":"^3.4.2","fs-extra":"^8.1.0","gatsby-core-utils":"1.3.23","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"9523fc3a14bf98aa63369467b5b27a05936c26b2","readme":"# Experimental image plugin\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).\n\nThis package is in alpha, and the API will change. It is not ready for production use yet, but feedback would be great.\n\n## Usage\n\nInstall `gatsby-plugin-image` and `gatsby-plugin-sharp`, then add them to your `gatsby-config.js`. Upgrade `gatsby` to at least `2.24.78`.\n\n# Static images\n\nThis plugin is a proof of concept for a simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\nThe old way to do this is with `useStaticQuery`:\n\n```js\nimport React from \"react\"\nimport Img from \"gatsby-image\"\n\nexport const Dino = () => {\n  const data = useStaticQuery(graphql`\n    query LogoQuery {\n      file(relativePath: { eq: \"trex.png\" }) {\n        childImageSharp {\n          fixed(height: 100) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fixed={data?.file?.childImageSharp?.fixed} alt=\"T-Rex\" />\n}\n```\n\nUsing this plugin, the code above can be written as follows:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via `ImageSharp` queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    grayscale\n    maxWidth={200}\n    alt=\"T-Rex\"\n  />\n)\n```\n\n...is equivalent to:\n\n```js\nimport React from \"react\"\nimport Img from \"gatsby-image\"\n\nexport const Dino = () => {\n  const data = useStaticQuery(graphql`\n    query LogoQuery {\n      file(relativePath: { eq: \"trex.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 200, grayscale: true) {\n            ...GatsbyImageSharpFixed_withWebp_noBase64\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fixed={data?.file?.childImageSharp?.fixed} alt=\"T-Rex\" />\n}\n```\n\n## How does it work?\n\nWhen your site is compiled, any references to StaticImage components are extracted, the images are resized by Sharp in a similar way to `gatsby-transformer-sharp`, and then the resulting sharp object is written to `.cache/caches/gatsby-plugin-image/`, with the filename generated as a hash of the normalized image props. Next, a Babel plugin finds any references to StaticImage, calculates the same hash, then adds a `require()` to that JSON file as a new `__imageData` prop. It then returns a GatsbyImage using that **imageData. Errors don't cause the build to fail, but instead are written to the component as an `**error` prop, which is then logged in develop.\n\n### Are there restrictions to how this is used?\n\nThe props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\n```js\n//Doesn't work\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n//Doesn't work\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n## Installation\n\n```bash\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\n...then add it to your `gatsby-config.js`:\n\n```js\nmodule.exports = {\n  //...\n  plugins: [\n    \"gatsby-plugin-sharp\",\n    \"gatsby-plugin-image\",\n    //...\n  ],\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsby-image-next-generation)\n\n## gatsby-image next generation\n\nSpeedy, optimized images without the work.\n\ngatsby-image is a React component specially designed to give your users a great image experience. It combines speed and best practices. You can use any image processing library that you want. We suggest using gatsby-plugin-sharp as your image processor. Saving images locally improves [the important health metrics](https://web.dev/vitals/) for your site.\n\nNote: gatsby-image is not a drop-in replacement for <img />. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can build your own Gatsby-Image with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [Install](#install)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#two-types-of-responsive-images)\n- [Fixed Queries](#fixed-queries)\n- [Fluid Queries](#fluid-queries)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"` and use it in place of the built-in `img`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\n## Install\n\n`npm install gatsby-plugin-image`\n\nDepending on the gatsby starter you used, you may need to include [gatsby-transformer-sharp](/packages/gatsby-transformer-sharp/) and [gatsby-plugin-sharp](/packages/gatsby-plugin-sharp/) as well, and make sure they are installed and included in your gatsby-config.\n\n```shell\nnpm install gatsby-transformer-sharp gatsby-plugin-sharp\n```\n\nThen in your `gatsby-config.js`:\n\n```js\nplugins: [\n  `gatsby-transformer-sharp`,\n  `gatsby-plugin-sharp`,\n  `gatsby-plugin-image`,\n]\n```\n\nAlso, make sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImage.imageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello gatsby-image</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        gatsbyImage(layout: FIXED, width: 125, height: 125) {\n          imageData\n        }\n      }\n    }\n  }\n`\n```\n\n### Upgrading from the gatsby-image@2\n\nYou can use the compat layer to make the transformation easier.\n\n```jsx\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image/compat\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage fixed={data.file.childImageSharp.fixed} />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.0.5-static-image.17120","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-E0Q6dVmMo1vQan95gECShRAeuXNJBSlTQTt/MObxzbsgtAeNl3jj9dxHryE1obRlILMskL1AdxAWA15UINcK5A==","shasum":"1920e7af7265c7ef49227f2feb3583e3493f688e","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.0.5-static-image.17120.tgz","fileCount":131,"unpackedSize":790655,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfkAb9CRA9TVsSAnZWagAATdYQAI8Slniob65zEC7Wa+cG\nxDC/gOllBE9hT6XulruJ9TDo7rFjSRF6KNDjBBvHxSqZLHlE4zPcU4JfD9oq\nrDomVUq37+X6ZdVsSk305tAR6vU8hUhgT1HdNmEQ8hHdf4or4gAy/X3BsWQE\nMe8tUKfC71TE64MVITn7Qj7GnCKXzc8BzgGgyiRmBvum8Dt5yJjWZzdo2mfV\n4V+gXkmZklMoljlwK+nSTIXMIPq/ky4oixm92RrCbOVNUuuZ6p2nf7432yVT\nHLygamXheb/kPNoeON4wG6y4GnOh3M66AL9frv5OaiW3sAg5ijhc+O1UIjve\n2GJdo4ARgyFuB1gtp4DtE2zsui6AdPLduxlvItDOpNLKCqNIrtfWUJMF8TNP\nmojHQWBfdAKcCqiQas905HkP1tqVRDYaTQdK+oeuPvrfOJFux406t+e+vY07\nAtatf0sE5Zw52KsWkc1FH1pQRllpwpTutFvWnhj12WlPjgnTpq4tg1dqf3GR\nDtWYLZfuqaAwcdP6IPIGydj3LGpaWSbIuUeSVM3AuAwRogveiTjPe9prCXSA\npl/FQRHjBABohSmTzJrE3b+DtT6SjIC9HKvbUr25IKz0pvCsnVTFndzxGo0C\nL9cShYLZP3KaBVEVXnP4fZ5fcQJT2IihqfkbhK3eksXFzPuNKlBRmMhwWl20\n1Nx2\r\n=vsts\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHSKyT+/SLibS/JPeTscffXNQAMngomjcbVnfOXjh57aAiEA10htVX08v5lKbe07vMkBfsVSx9hztfXMnt3VDxJX6qQ="}]},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.0.5-static-image.17120_1603274493253_0.255685090314107"},"_hasShrinkwrap":false},"0.0.5-static-image.17139":{"name":"gatsby-plugin-image","version":"0.0.5-static-image.17139","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.10","@types/babel__traverse":"^7.0.9","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.53","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.3","npm-run-all":"^4.1.5","postcss":"^8.1.1","terser":"^5.3.3","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"2.9.20","chokidar":"^3.4.2","fs-extra":"^8.1.0","gatsby-core-utils":"1.3.23","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"92768e1c9c048476f09186049bb34c12fcbec910","readme":"# Experimental image plugin\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).\n\nThis package is in alpha, and the API will change. It is not ready for production use yet, but feedback would be great.\n\n## Usage\n\nInstall `gatsby-plugin-image` and `gatsby-plugin-sharp`, then add them to your `gatsby-config.js`. Upgrade `gatsby` to at least `2.24.78`.\n\n# Static images\n\nThis plugin is a proof of concept for a simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\nThe old way to do this is with `useStaticQuery`:\n\n```js\nimport React from \"react\"\nimport Img from \"gatsby-image\"\n\nexport const Dino = () => {\n  const data = useStaticQuery(graphql`\n    query LogoQuery {\n      file(relativePath: { eq: \"trex.png\" }) {\n        childImageSharp {\n          fixed(height: 100) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fixed={data?.file?.childImageSharp?.fixed} alt=\"T-Rex\" />\n}\n```\n\nUsing this plugin, the code above can be written as follows:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via `ImageSharp` queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    grayscale\n    maxWidth={200}\n    alt=\"T-Rex\"\n  />\n)\n```\n\n...is equivalent to:\n\n```js\nimport React from \"react\"\nimport Img from \"gatsby-image\"\n\nexport const Dino = () => {\n  const data = useStaticQuery(graphql`\n    query LogoQuery {\n      file(relativePath: { eq: \"trex.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 200, grayscale: true) {\n            ...GatsbyImageSharpFixed_withWebp_noBase64\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fixed={data?.file?.childImageSharp?.fixed} alt=\"T-Rex\" />\n}\n```\n\n## How does it work?\n\nWhen your site is compiled, any references to StaticImage components are extracted, the images are resized by Sharp in a similar way to `gatsby-transformer-sharp`, and then the resulting sharp object is written to `.cache/caches/gatsby-plugin-image/`, with the filename generated as a hash of the normalized image props. Next, a Babel plugin finds any references to StaticImage, calculates the same hash, then adds a `require()` to that JSON file as a new `__imageData` prop. It then returns a GatsbyImage using that **imageData. Errors don't cause the build to fail, but instead are written to the component as an `**error` prop, which is then logged in develop.\n\n### Are there restrictions to how this is used?\n\nThe props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\n```js\n//Doesn't work\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n//Doesn't work\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n## Installation\n\n```bash\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\n...then add it to your `gatsby-config.js`:\n\n```js\nmodule.exports = {\n  //...\n  plugins: [\n    \"gatsby-plugin-sharp\",\n    \"gatsby-plugin-image\",\n    //...\n  ],\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsby-image-next-generation)\n\n## gatsby-image next generation\n\nSpeedy, optimized images without the work.\n\ngatsby-image is a React component specially designed to give your users a great image experience. It combines speed and best practices. You can use any image processing library that you want. We suggest using gatsby-plugin-sharp as your image processor. Saving images locally improves [the important health metrics](https://web.dev/vitals/) for your site.\n\nNote: gatsby-image is not a drop-in replacement for <img />. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can build your own Gatsby-Image with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [Install](#install)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#two-types-of-responsive-images)\n- [Fixed Queries](#fixed-queries)\n- [Fluid Queries](#fluid-queries)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"` and use it in place of the built-in `img`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\n## Install\n\n`npm install gatsby-plugin-image`\n\nDepending on the gatsby starter you used, you may need to include [gatsby-transformer-sharp](/packages/gatsby-transformer-sharp/) and [gatsby-plugin-sharp](/packages/gatsby-plugin-sharp/) as well, and make sure they are installed and included in your gatsby-config.\n\n```shell\nnpm install gatsby-transformer-sharp gatsby-plugin-sharp\n```\n\nThen in your `gatsby-config.js`:\n\n```js\nplugins: [\n  `gatsby-transformer-sharp`,\n  `gatsby-plugin-sharp`,\n  `gatsby-plugin-image`,\n]\n```\n\nAlso, make sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImage.imageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello gatsby-image</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        gatsbyImage(layout: FIXED, width: 125, height: 125) {\n          imageData\n        }\n      }\n    }\n  }\n`\n```\n\n### Upgrading from the gatsby-image@2\n\nYou can use the compat layer to make the transformation easier.\n\n```jsx\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image/compat\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage fixed={data.file.childImageSharp.fixed} />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.0.5-static-image.17139","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-nQo8PtNRKkLy4jag0sqVyLWGMIm/+gDkeD7szzx6UOuSC2+VrAJftLj6zZQ6pr9THAE5KAR1QqUB0WqXNKGIBQ==","shasum":"f5a0b8f674eeeca11d776c72ffcd88b5f635bc10","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.0.5-static-image.17139.tgz","fileCount":155,"unpackedSize":1106507,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfkspiCRA9TVsSAnZWagAAjw0P/0pwQ4X7cyVyZftqid+e\nmmf0w1R2oPquhIVbvjvvLRDC8J5/0YupaHKzr68T3G/UZhURynDzPqWmtRBC\ncI/bOGtK6z1Dk0kPrbBLniwIpsImWwyHjViKiCNSBfQK1PujJoXXgA9/itk3\nJ5K/rF3Nfjg38063n1FXEBu6a81wYs4WiLmuFTk8hW4kgR0jrfCKov5NeqcN\nb3FNNHg/Hru586Tm5x1tkarJTV2Dcs/e2SNMc8Xl/h4xwr1GsZs+C0+7cljP\njOzmT08YxcdNcz8xIg6HpTHBbh9ma7MA3npSbkLnKE6eTAdPmLo3N1kwoq5f\nEiBf9SAIuKag3nYkU52B6mT7KD2OZY/anUpp4pNFkeVHGgYikMXC3U89Wr/E\nEkwn3M5/hTbGOj4/OCq6tpr6Ab8fQGYBKJYjNgLAyzdRHF1Exr6mGdzXAECD\nedaSLVesKYMzgnDVrOSDZBULl63LS7DLeYulWOtsX+tE8YZvuu5L/M0iVF5y\n2E90O1aLE4TpZBlk7wV2mP+E0V389Zo0iczbVdqbm0BDHOrIjHO6thcK1rkC\njctHB3IBAc/W1xEdnVd0jnX/Kde4gZzayFrr8gxN2Q/uMD9kEBjZeb5dOVpp\n7iMluB4hpszN6fSvPINNljweTS16y9qulrd4patFvCYAb8j3jMxxcwFQZnBL\nGkdZ\r\n=RMzM\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEvVgjqY+ZZgW9sj9u//6WLHAzHxT2XdNcDNf5bhr5xgAiEA3HOyghBWGenCmr0fNWFMQ0UoDKW9RxZUgFk0e7IImuQ="}]},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.0.5-static-image.17139_1603455585527_0.31532806597209917"},"_hasShrinkwrap":false},"0.0.5":{"name":"gatsby-plugin-image","version":"0.0.5","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.10","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.53","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.4","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.9.19","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.3.20","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"2d03cb20b77f6f88e1d8eafb3e0efd2763c9cfd3","description":"This plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.0.5","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-bUNfAZUtFnNG6I0DbZMWWg5W0cFZS+iXCBrWcgs590Rt3yh9z8SqxPrBZRZBCFHU/VE/hhkBxQnxVggaNJvN4A==","shasum":"883dea2d9e6daf20de2b698281548e46f24cecc4","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.0.5.tgz","fileCount":104,"unpackedSize":459140,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJflqzYCRA9TVsSAnZWagAAJScP/j3LH1WOr7erQOHiY+5a\nT6vBsF9I+zhw3Crlkvk1Jux9CiaJ76kkz9OG8jo3AIrIvWZD+6I4X93zNKQP\n4+B5DKlRHdJostQRrfNLwF60+0Qx6W328Y6TWwbScU/zGGvKi38OeP4jiAMY\nY5iuMlrfrsGwsroYFlQmNWM0/4++zHoO98Gbkxz5VNTa+QLGU8Gwi1s+gE6Y\ngAhaJJqKG2Dx3pNQFka5t9DkdPNlq270YE2JfvkulipdeLiTqzdMizkJwbEc\nNi4lRh/1JVGl7J2Iw0N6PGFfNf0IQHEWL8WHu37kBhP10wccdJzwbyChWWpw\na9MepjXTCNMo/Jt8Rf+5u2WdWOcBK+so7hwq2nP/8zQqrJDzT/fQFFYuvnQh\nuu/FNgbWT0iB7VbFj9I4o0tsRQj8jk9eIQEnz5VP9r/NcmcoRwiWEefBY7q/\nvLnGrNI1Y1rXO/cm5GODpaay2tkjCV319+v3/Ni1YKuBNnjcJf3/w4Ggw/LB\ny3oTyK4p3UQsL80tCv0UEXp2BVnWB6z4Ysb08ZHEjdCtCkEj5Sk3TeeMFoos\nCSKQbfuLj6iGe2eixdy+UK9K6BwR/RqQrasCpIpFKZ4VeKjd/l67PFTyY+UC\nwU9rUPkKVzn4MGpo5z7zQLw7WgPOePC4RWW8+ynUg1H0h5X6fUc0AcqRed4x\nYFWn\r\n=XmmW\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCNGJESPsAmItJPfdbgJ22lMf0Gen1qxcIV20Da/mfl+wIgZ5LP0j/jZdsNeUpFJGD/RKBxCU6FrF2dfedTIVfm1G8="}]},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.0.5_1603710168204_0.5737125330690718"},"_hasShrinkwrap":false},"0.0.6":{"name":"gatsby-plugin-image","version":"0.0.6","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.10","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.55","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.4","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.9.19","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.3.20","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"5fbfaa81260fabc88aa920b04f3d51ea568323d0","description":"This plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sh","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.0.6","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-buNMRJOm/h0CgzpB2HJV1LBVIhz1XXcG1OLhKmR0h93CwI2NY9pvUG+rqwpg3HQ8NoHMgwxrUlk6XZBPeVw1QQ==","shasum":"34d95ea16621feed48c6bc50ff87c1f2e29cb9dc","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.0.6.tgz","fileCount":101,"unpackedSize":439893,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfn8dGCRA9TVsSAnZWagAAefoP/2rQyjlP/ymveHNo6HSd\n21jjcCJ1FF6N8uQg8qQEYMACVrVJ8j8fBZ4DbOYh1jCLX6lxGw3LG0ckVdpe\n4bAU0rF1YUGh8nGEqJuiW9y4bkPVbI30Str9lOB6l9LBGKrHfrmPcRiWssnV\nu5gu9NaFphQT4fJ+4XM868pvj49OyJPyADNKgxeh97+Gj2v0NF1BLQ9APqQ+\nVE27CZbwPlEKhvz00OQYQE4ahM6Ef84M0ZUTculRkrU83s61SEF00/kWGhRW\nvZ7A+hncy1mexcIjHjdfy45X69XLUpLpX4W6TwMGe7S84PsGzNP3x7GgSuFT\nQdjnpi30WjAWhMCmXLZkTHbB3eBMZXvqPUyz3+DHGyQJtTKJJCImr0nPoKKg\nixM0/ZbQeo1F7EpF8ixqcyc/lRUAb7Kg9y9VuNZd0UMyR1t6xb4qnykiOR41\nDHH/gLpjrlYOjpntPVRNXaS/d+gr04cs9rdAIhCNL54YU/nG4NU2uhBol8Kd\nW/YAxe4dCq3sHH3wtBcKFpkaTSVdr9aDP85tSr+NNTpXzh+AqOSC1ntLubr/\n1Z2VS2ZYkDM41liFXhcp3nlYVZpeJ2bUUfUmYroPZGnXwnegJdmkL+IcZBaN\nQl/yKF0d9QXi9KaTnfsE73uaRgTlKyucLjZBC3/9q2k71CROECNVTpODeNF2\npPpA\r\n=uJ0v\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIF52ufYQJwtDUSwY+QaqyevWDxlFcOzRQiKDr8D2TjiJAiEAyuLafemdJZgeidtyAlXw4h4Ez10Z2jG4QFZqA6A2Taw="}]},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.0.6_1604306758231_0.37387769745657473"},"_hasShrinkwrap":false},"0.1.0-next.0":{"name":"gatsby-plugin-image","version":"0.1.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.55","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.4","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.10.0-next.0","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.4.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"5c6e3e67b059a72147075b04e99df44da5052c65","readme":"# Experimental image plugin\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation).\nIt also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp\n\nThis package is in alpha, and the API will change. It is not ready for production use yet, but feedback would be great.\n\n## Usage\n\nInstall `gatsby-plugin-image` and `gatsby-plugin-sharp`, then add them to your `gatsby-config.js`. Upgrade `gatsby` to at least `2.24.78`.\n\n# Static images\n\nThis plugin is a proof of concept for a simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\nThe old way to do this is with `useStaticQuery`:\n\n```js\nimport React from \"react\"\nimport Img from \"gatsby-image\"\n\nexport const Dino = () => {\n  const data = useStaticQuery(graphql`\n    query LogoQuery {\n      file(relativePath: { eq: \"trex.png\" }) {\n        childImageSharp {\n          fixed(height: 100) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fixed={data?.file?.childImageSharp?.fixed} alt=\"T-Rex\" />\n}\n```\n\nUsing this plugin, the code above can be written as follows:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via `ImageSharp` queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    grayscale\n    maxWidth={200}\n    alt=\"T-Rex\"\n  />\n)\n```\n\n...is equivalent to:\n\n```js\nimport React from \"react\"\nimport Img from \"gatsby-image\"\n\nexport const Dino = () => {\n  const data = useStaticQuery(graphql`\n    query LogoQuery {\n      file(relativePath: { eq: \"trex.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 200, grayscale: true) {\n            ...GatsbyImageSharpFixed_withWebp_noBase64\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fixed={data?.file?.childImageSharp?.fixed} alt=\"T-Rex\" />\n}\n```\n\n## How does it work?\n\nWhen your site is compiled, any references to StaticImage components are extracted, the images are resized by Sharp in a similar way to `gatsby-transformer-sharp`, and then the resulting sharp object is written to `.cache/caches/gatsby-plugin-image/`, with the filename generated as a hash of the normalized image props. Next, a Babel plugin finds any references to StaticImage, calculates the same hash, then adds a `require()` to that JSON file as a new `__imageData` prop. It then returns a GatsbyImage using that **imageData. Errors don't cause the build to fail, but instead are written to the component as an `**error` prop, which is then logged in develop.\n\n### Are there restrictions to how this is used?\n\nThe props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\n```js\n//Doesn't work\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n//Doesn't work\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n## Installation\n\n```bash\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\n...then add it to your `gatsby-config.js`:\n\n```js\nmodule.exports = {\n  //...\n  plugins: [\n    \"gatsby-plugin-sharp\",\n    \"gatsby-plugin-image\",\n    //...\n  ],\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsby-image-next-generation)\n\n## gatsby-image next generation\n\nSpeedy, optimized images without the work.\n\ngatsby-image is a React component specially designed to give your users a great image experience. It combines speed and best practices. You can use any image processing library that you want. We suggest using gatsby-plugin-sharp as your image processor. Saving images locally improves [the important health metrics](https://web.dev/vitals/) for your site.\n\nNote: gatsby-image is not a drop-in replacement for <img />. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can build your own Gatsby-Image with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [Install](#install)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"` and use it in place of the built-in `img`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\n## Install\n\n`npm install gatsby-plugin-image`\n\nDepending on the gatsby starter you used, you may need to include [gatsby-transformer-sharp](/packages/gatsby-transformer-sharp/) and [gatsby-plugin-sharp](/packages/gatsby-plugin-sharp/) as well, and make sure they are installed and included in your gatsby-config.\n\n```shell\nnpm install gatsby-transformer-sharp gatsby-plugin-sharp\n```\n\nThen in your `gatsby-config.js`:\n\n```js\nplugins: [\n  `gatsby-transformer-sharp`,\n  `gatsby-plugin-sharp`,\n  `gatsby-plugin-image`,\n]\n```\n\nAlso, make sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImage.imageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello gatsby-image</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        gatsbyImage(layout: FIXED, width: 125, height: 125) {\n          imageData\n        }\n      }\n    }\n  }\n`\n```\n\n### Upgrading from the gatsby-image@2\n\nYou can use the compat layer to make the transformation easier.\n\n```jsx\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image/compat\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage fixed={data.file.childImageSharp.fixed} />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new resolver to the `ImageSharp` node, with a single field `imageData`. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImage(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG) {\n      imageData\n    }\n  }\n}\n```\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} />\n}\n```\n\nThe helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImage?.imageData`\n\nBecause this no longer uses fragments to specify which fields to return, it instead uses arguments passed to the resolver. These include:\n\n- `placeholder`: Format of generated placeholder image.\n  DOMINANT*COLOR: a solid color, calculated from the dominant color of the image. (default) \\_Currently disabled until sharp is updated*\n  BLURRED: a blurred, low resolution image, encoded as a base64 data URI\n  TRACED_SVG: a low-resolution traced SVG of the image.\n  NONE: no placeholder. Set \"background\" to use a fixed background color.\n- `layout`: The layout for the image.\n  FIXED: A static image sized, that does not resize according to the screen width\n  FLUID: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n  CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n- `outputPixelDensities`: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always a 1x image.\n  Default is [ 0.25, 0.5, 1, 2 ], for fluid/constrained images, and [ 1, 2 ] for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n\n- `sizes`: The \"sizes\" property, passed to the img tag. This describes the display size of the image.\n  This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image\n  container will be the full width of the screen. In these cases we will generate an appropriate value.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sh","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.1.0-next.0","_nodeVersion":"12.16.0","_npmVersion":"lerna/3.22.1/node@v12.16.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-IlqTnrl1UgRjpdwuiQ0f8AVQCnJ9wM0B9iBvDyTRqy1/gEa/A+RzvokP36TqKTKYTyrf8Z86x6bl7RQiQRX/rw==","shasum":"234e3122f5af2fd67491d9cf6a2d177ae9a0e3a0","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.1.0-next.0.tgz","fileCount":101,"unpackedSize":439913,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfoYmLCRA9TVsSAnZWagAA58YQAIx15q8Tt5jnYQL4ZUQK\n31/LyjZRUa/vuwdqQimFOnHHgyt/QTNjEqD2wJpy8Lsb6M47ARGPpqlGFoBr\nMsJtwfXnQqnytlkhwiyFPRU1iaS3HbXhmTgoybi3jFWIISzuZJaAza2SHHsR\nl7MBJmdbU0AYDTXgC72PISAccRrQQwzhTqxvozo+qTIIqMdMv3foCZ5cce0o\naQF0KYPB80WkA4MDxalg1X5M9iop7zE19TmFvWqB6yjzkxOQmChr+0HvmmqE\nUnNqEcf0VrosL/Y73MCV6ukavWYxq57hA7y7fim5xlrSDFfdoJJgdp5IWfbd\nhBG9YxoCQ7AHbIqw/cQtUj4qOwzMTb5TwiWc2bE26z7K4FT/ciOnqeht+0CN\niJ9nRK3zqz23EeugLTFR6LPVjdrYiZDhx0tnUrMZRTwJUOoWcqWxPTd0Sdmd\nn7yNtKoNHNmaJf1oLgwQAoeh3pCaKdpc4b+REvOEMDqVm7zs7srNqyb3JJBl\nPetDkFd6uKz63vjS38tjVVoF5TwSyvEYzDM/UXCwjvyjN7Wndw5qFbO9eXrj\nw5MY8BEaSS3qiPNoTz2BLpVouGzROCjyGtcWoF77KFq3NKEwPBaNGcVtx54W\n+Gd/sxrbBra1sjv0pSVlVW3IkVA1Hw2hc7OJ8ouEp6ygDdh6L24xw25b6oxa\nkBwT\r\n=HKPD\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDkjCzpaDQhtrSH7jAYBTOWMObx2myid3FjddY9yWdgDgIhAPlew0aHAgSeJBiM1ipcXzWNHPrZktPttgchpzX85hO/"}]},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.1.0-next.0_1604422027170_0.420328687714318"},"_hasShrinkwrap":false},"0.0.7":{"name":"gatsby-plugin-image","version":"0.0.7","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.55","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.4","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.9.19","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.3.24","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"077b67fa366eb5c5e0171e87eec8c8810d44c0d5","description":"This plugin is a replacement for gatsby-image. It adds [static images](#static-images), and a [new higher-performance gatsby-image component](#gatsby-image-next-generation). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sh","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.0.7","_nodeVersion":"12.16.0","_npmVersion":"lerna/3.22.1/node@v12.16.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-Ie6DTHJneDiZgMm0UwWXf4KQdMagczk3BMaQS+7RKed8tN3hLeXzaRnz4F7/vn5GctktzZNXqVt6VrUnFY0vtA==","shasum":"a35f18e67ff8576b583b3b852a36a83c6fed1ddc","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.0.7.tgz","fileCount":101,"unpackedSize":440077,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfopN5CRA9TVsSAnZWagAAowUP/1kZyn1rwP+qLujbhJRB\n1pJNmoJFhqx/zduKpYwmwhkDSbc9Uhq5p/Lk3jcIsv6Yca8LjJsXlBf18WVA\n27UedLYx8HgQAZ5ssQwg2uX1bSFHq8sU9Ehx/pddhM/dVkmC4mprpdZ6cMRx\n8X1X+tAkvZqfVlhvbOmnvHEUj4ndXdK/U2yFw9MiRvKlIpc8990+3PNOzkgl\niVXm9Wzay1g1Rrd9j/z+QaCf7abortrJ88Hb0xyDHA5uP9DU2lf3GFNxvf+f\nTJajkz+9aJXNsuvwIpmoekPOSApv8LdP7SKCl/LaBwYCntZlgIq54b6TTDth\nTYhaeTIRUU9hA3JA4NAtz6rqgQQGoopNv9h96nIOQrUztqjwjAFL0HzWsDZ3\nZqE5kivmRr3dj0O7chrfvd2agx4KSfVl1yiuIIqec/nPjAt9GeoMG1OkG7+P\n1AX4Rroqk0Rrbk9MdNNpMhUkqq5jiAAvMJ4IrxxyDDktS75HpMUgSIR68k2D\nBhY3yR8h9urLeosHCnkJy3wrwFVPsmdIg+ZkVTAiXyexl9J7pPr8z/Q6cbJ3\nttMrifxHqOkX02P+chiHsvUo2kq+F6IzQf8KddEfvlyzi3kgMyhxWddb6Itu\nF6qNocFNPQ06xDyNg/BzlkrSd8Sa6oudbLIbKkppba0ZpVvhI4VKH0RxoKjv\n2qEd\r\n=lnWt\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDYKmpDA3AUOkukm8s2/nmkKaBDe0IhMPn8LLqOAqxM9AiEAjQZuYIko8FRUIX2k2aA1YqSlBd4Q3NCWexatFDtmqCc="}]},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.0.7_1604490105279_0.665014347000668"},"_hasShrinkwrap":false},"0.1.0-next.1":{"name":"gatsby-plugin-image","version":"0.1.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.10.0-next.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.4.0-next.1","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"7337f8cca6afe5555deb1e766b81e79691f5333f","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can build your own GatsbyImage with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\n### Upgrading from the gatsby-image@2\n\nYou can use the compat layer to make the transformation easier.\n\n```jsx\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image/compat\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage fixed={data.file.childImageSharp.fixed} />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\nBecause this no longer uses fragments to specify which fields to return, it instead uses arguments passed to the resolver. These include:\n\n- `placeholder`: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image. _Currently disabled until sharp is updated_\n- `layout`: The layout for the image.\n  - `FIXED:` A static image sized, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n  - `CONSTRAINED`: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n- `outputPixelDensities`: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- `sizes`: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance.\n- `formats`: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.1.0-next.1","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-/aR16XBoHgan9gY/SgSJ66a/0oK0aeeD4I9wPnPkrcG4d4ra4MAom7lg31liYmgqAW3/809RPVHX6GlyLJidzw==","shasum":"68d0548d07548af65442c929f2015bf99a6e1a8c","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.1.0-next.1.tgz","fileCount":101,"unpackedSize":437085,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfqsOwCRA9TVsSAnZWagAAG3YP/if2HJsSh7680OVxKqPP\nWFL5WISV6Qhf+5ZN7dVYBVCelnwlGFRSm6c0xo4oR15YNIUem39uV2E1QYzd\nyVrCdTsztcfhhm3uuOPmwy82iWuOOV2sNiZLr49+bpIlJYBYI99MwBOEJgN8\nFSbaJRB9NdJ/RTAQDqFsHwTcnZIS288md+Ws+uJUNS+/5ijba4RlpYwIzhra\nyC9tjSeZSYY1DAXDOQ8QDjQ8785QarfqKZQTcmfoTjXBeQ2IGWU2VMdkWg+K\nXM8VmcnY1NuKn3oHcW7UIRxBPsVkw+IACQyQSnRNVd47+0ijIetjcUTpzknG\nqL2ZlTmdMvKXUeXU1/HkOIhA9mTPacSU49HNWUlc6Y+tHH//7RURY5g/0dOJ\nMJS4EAU4LH/JmdfUOLNfygXCeDxo7MGUYp0S7f8YBkjcs1PYoqtOtJWSzXeP\nXTKF+RZUmDCGpu+D8DpJbePtLqBJLhxXNp44psMhNsO0u73wtGTD8M8q9EnU\n69ocpm4ioO4FjrvFJOyosTF9+P1yzgDtgYIjy9hAn6bhthVmAuql5YZMOyPg\n2SxoQhrc1wc/Cr3WcCKbzjf6aiwDVExSKgx8dHSbvCPZ1G/SX9Z+ZjQe2WRb\n+qzzkUkgT4MrUekpAcJEDtfWD1OWnG/UfmWWuPj3EK9Cgpf/BMTNSJBdL07z\nFLfx\r\n=ojSB\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIA2jbUb+dNZjaymuRowJlT3N5tCeVoJUdFumYL8jYBXmAiEAkMwSspGoIYPaIGp0KMbxAGAz7J6P5WcgCRTTWCxQnpg="}]},"_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.1.0-next.1_1605026736358_0.7353810145228237"},"_hasShrinkwrap":false},"0.2.0-next.0":{"name":"gatsby-plugin-image","version":"0.2.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.11.0-next.0","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.5.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"3ed71f9051fbcc72cfb0ea4cff82a0d3734fa2a6","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can build your own GatsbyImage with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\n### Upgrading from the gatsby-image@2\n\nYou can use the compat layer to make the transformation easier.\n\n```jsx\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image/compat\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage fixed={data.file.childImageSharp.fixed} />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\nBecause this no longer uses fragments to specify which fields to return, it instead uses arguments passed to the resolver. These include:\n\n- `placeholder`: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image. _Currently disabled until sharp is updated_\n- `layout`: The layout for the image.\n  - `FIXED:` A static image sized, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n  - `CONSTRAINED`: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n- `outputPixelDensities`: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- `sizes`: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance.\n- `formats`: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.2.0-next.0","_nodeVersion":"12.16.0","_npmVersion":"lerna/3.22.1/node@v12.16.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-+e6LQeX54ClfHXuTX42APxQc9fpI3fTgQt2Ra8Va/dAFfbKhMOAEWo8FjP5tYSuSHWCZJK43K3/vRzaxHsXftg==","shasum":"b3e8405e6d72b724b3d5fa7811f1e834d3e9b5e6","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.2.0-next.0.tgz","fileCount":101,"unpackedSize":437781,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfqtEqCRA9TVsSAnZWagAAAz0P/RjTZPvYhKZPAbl6IRsh\ngafH2MgFRTrVI8/fmM7xRdjEvs1remlMLeoYhfz9sjCcmaJuslIrCEkIWW33\n2XZo4ZI3MO0xh0A/bIRYkWLFWE43uiljbnnwjfYHqnIy++zkgdSVwv5d12nM\n+Z/HgdoXyRCOeyW7bUO1eF6bPPqYzyeWrMyXPt0FgyqeLVE12VzMr/Qxg6+m\ntkhWveHqt1/dghVumdscnqYSwVWdacH58hAQs7V/v1wNlFJcdjZtF9WO9OOp\ngGZf7/vW0YTybd+VjxX3l6VP4JjDYJtKuBcUTtg6sPNgnRMap7L5cVnM6mxn\niiiyx10tx13cqcM6zK3KHFO8fwnYyvkL9+om8dlGe9PIZkMvJtilaiqVxY39\nkYFfxgjJTyxEFetYCQUux5TouSAdna2LqtAgvejIrgvs+ny088R3kkKCrP3b\n7c7Mp8+p9yZH+G6maIX2QrLfzNIMeqd67IBGsbiTjVX4eeTNolW84NkBXakY\nqAkbM/8orJjNWqbttHBKcmrZXcNtZGkZqtFlCQ+HOMdWkHREnN5soydOg2xH\njqHonJjUg2hFZ3Oq4BJv3dSq5e7nFxLCMe5Izs0VlB/s6wVvfL9Y0Zp/+SoA\n2e5wEabJtkHBu3dRMppMj2uiygbNySAAlfSgEAV8F88EwpRWJLc3LhLNKMS1\nGy7e\r\n=n2aJ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDxTDMZHAIB/ciVV9CSWkKiKFRdxF6OBPxwg5MeOfmoewIgKDsCB7BD9K/FoVOX+mM7BNW0quLEojdI7Jmhbx6DkSc="}]},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.2.0-next.0_1605030185934_0.35091222121671173"},"_hasShrinkwrap":false},"0.1.0":{"name":"gatsby-plugin-image","version":"0.1.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.10.0","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.4.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"135e554aa9e8f10a282983eca65c29ffae738339","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.1.0","_nodeVersion":"12.16.0","_npmVersion":"lerna/3.22.1/node@v12.16.0+x64 (win32)","dist":{"integrity":"sha512-ppc2YEnXys5D5GojXu4+52BwnfvtQ15syWVRGD0kKnzYUqbf/oP6KilBl0bEfxa3sMBPmsria/k9+Kj0bsQOYQ==","shasum":"56a7c15217a71e4d50695d7641978c2fc4f76bed","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.1.0.tgz","fileCount":101,"unpackedSize":437950,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfrW0jCRA9TVsSAnZWagAATTsQAKR91CXlJMMcwzmBBv83\nAp0f4/WarVbkG11Q3DXYsL0XcOP1oNxUTBSDrKkWeCQU+r3rRbTWNw1k+NEY\nTIOZ4HAd+GoDZf3geE0d0acpr6Mf1dOIkVpF1x6umYVyVscfJZk6g2ABclwV\nVqO6F0viq0YpVs/ajrhxKGNOOE9naj41+/ibfnWQgg1FLuV+qLzRNoOau1Jt\njEE6Jy408AjnA6+N0WPY/EQrW99MO8Qe/MMwXAPveGZsoxy3zriVIbDBpWoq\nvUL/sk9OI2jbZA5J0SFKwMoUyflnd3SVPOARPWm2S5t3TsdylWWn28XH+o2i\nFyDQcrCHjhduqMla4BThoSrEwyPuSlxqjpdF3e3Tajt7FrvK+d6UeWF1dtM2\n0IRCPAklaGuW8sVZB9AdEKUM1jbBYQiSJlGCaBJE/wXsvC9u7MOTlVqa/Gk/\n44EvZPXJFd/3evuy/sWtC/WTli4KPZ+f+n7AjYf0HRucSTa4NrATkeKMi29D\nCVYup5XqjOEyWEQeK9yR2Tdb2ZuPlKk9/RJCyLDdukV5dNQsfbU28j6goMTp\nkLVTqVxcYLk1/n4iVq+RzRfdK91nL0U+0W/LBa7NUf4+1EFIw9L/3qllOwOV\nNeHzyF/EKqAhFD0Q9sCYoHoltPQMLoVBryhOfLaD4i77OK0lLLO3v7pcES3X\nl2h6\r\n=9AO2\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDrblxqFcS882tSLIu3ZCPKpga//pqLmmTE+kPwxOg2XwIgSO1edZ9lp2QnDQYfRHQC9NYfZvcLEB9iXjqNjIkGUQM="}]},"_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.1.0_1605201186877_0.8932296064099217"},"_hasShrinkwrap":false},"0.3.0-next.0":{"name":"gatsby-plugin-image","version":"0.3.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.1.1","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.12.0-next.0","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.6.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"fe8346543838a1eeffd1bb9b1b278e99135a34d1","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can build your own GatsbyImage with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\n### Upgrading from the gatsby-image@2\n\nYou can use the compat layer to make the transformation easier.\n\n```jsx\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image/compat\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage fixed={data.file.childImageSharp.fixed} />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\nBecause this no longer uses fragments to specify which fields to return, it instead uses arguments passed to the resolver. These include:\n\n- `placeholder`: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- `layout`: The layout for the image.\n  - `FIXED:` A static image sized, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n  - `CONSTRAINED`: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n- `outputPixelDensities`: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- `sizes`: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance.\n- `formats`: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.3.0-next.0","_nodeVersion":"12.16.0","_npmVersion":"lerna/3.22.1/node@v12.16.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-m8eUxdGOi6jCxSV2qOtbHjFCq7pVi//2+55sHENPaSeJbO1qNdoDcY1UH1KUBGgH/O38TKxmzTnzewmyi5jH1Q==","shasum":"4b8596bc8c42e7af5a01cac5e94f31d289592d37","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.3.0-next.0.tgz","fileCount":101,"unpackedSize":437986,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJftLtqCRA9TVsSAnZWagAAmRkQAItIfQckaVCTo7xywd03\nzB0RG3XxR+l+HaxL0DEUZxWXaBgz26MqG0Wt75bv13G0GJADhGp377uCPwzL\nu/5TdToobacH1Z1zNdGIIHod+vN+3qVF4I1hD/2+2XygcL2yRLslWsZIP6FO\nP/ikpUeTR2qh8DG30ymncKaKm8mhzjJeBaa6LfuLV6CwomqI70v0o75SAeOo\nyAX4jEHPbbw2BtNngPckMeGomciaaJnsvbQiv73pCQ3MXv6zX/+mmFEzyUu2\n5TWxt6/Pb2ZtbdjD4ihl8VeqHOG5aAf+jXI2APwsJYE0GbWV8w8c4a06sWso\na3LuRf+Asgu8jpOTVJVorECtytza2eqzqwvF3ePV1O6RIuSNKlrh5O2eE9YF\neQPjT/xYQ2L8vhdz7VSn8DOnImZLDj+idIveYssyuOdXCITXAUncdbmEpnOX\nYhNX6nXCcYPZEIeZkdvxgHAxQGTQJVVX9+79p7MLIx0fy8wfH/3k72rN+VQi\n6Rvo9F+450JJGMsDacddttz/kqacOuLonpFD+h1WsVn4hDQfP+Xa/O0HJS46\nFiyEZFn6u8U/Am03XZnj4sW6U1gY4SJzJDRCngLifswfEAEgT7w62Ery8hDp\nQinY5O6+hvvnZnUc24p58sdc6AEVoZCPCNWEK9sSbCecCQ9zQ+QxRxJRRI+9\n/3b7\r\n=WaUo\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCqLdOnt8oCpJyrRTjn2CJz+snI4Dqt17aPCvtjpU+txAIhAP6Aa15398prW+A+VmAaL6EBL//NU1PeuO1Bi9wTdD1z"}]},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.3.0-next.0_1605679977682_0.6615799527451345"},"_hasShrinkwrap":false},"0.3.0-next.1":{"name":"gatsby-plugin-image","version":"0.3.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.1.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.12.0-next.0","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.6.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"9e6091325485bbcbcfa04bccda09170e383ae395","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can build your own GatsbyImage with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\n### Upgrading from the gatsby-image@2\n\nYou can use the compat layer to make the transformation easier.\n\n```jsx\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image/compat\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage fixed={data.file.childImageSharp.fixed} />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\nBecause this no longer uses fragments to specify which fields to return, it instead uses arguments passed to the resolver. These include:\n\n- `placeholder`: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- `layout`: The layout for the image.\n  - `FIXED:` A static image sized, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n  - `CONSTRAINED`: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n- `outputPixelDensities`: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- `sizes`: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance.\n- `formats`: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.3.0-next.1","_nodeVersion":"10.13.0","_npmVersion":"lerna/3.22.1/node@v10.13.0+x64 (linux)","dist":{"integrity":"sha512-QBN3PQd35HSRNz0FxX/AwDYlea9XLh9JAaHh4o5OoRTMlOg0x5tNSaWCBYRMnilURfvjJfOBy1AE9y3x06OPxA==","shasum":"493c4a98fd2c98ea4e5b3b288a471388cf72ca9f","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.3.0-next.1.tgz","fileCount":101,"unpackedSize":437494,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJftTB5CRA9TVsSAnZWagAAv3wP/joA8CzYPmiF56rmgAki\n0BsQQLOnVt958t3Wh06g3D1I0IUHVE/ZvNMyzDNFd4PghD23rKkdpbNOoA0w\nQhki39PyV+pvYd0EZBqc/yobop67+HZQKfVDjdd09Ym2yxsVJ/53NCFesVmr\nLMPqo9VpUJeYl73QfzwK3MgOlC4fA7RjdQF30E2Hzkk96IbKfIC4Ikfb64lk\nVBTJ/mw+eptOQGhLBDGF14pIx6aOZ+3TAuBBHFMZUTlZU8hHpQmQoRUPCStc\nsQ/eUFQvMn2vSyw9Wwdbsn7SEY+qzLN1jkntlrvFQ0A4rahcEV+2scTA2lTl\nTs7cktKckcVmCTrS/5A9cuJJafo9wwRRunY/YuVbwYegbgFJk0tDXDdmxDwz\nUZ35JEfRb1TodFLPimcxdsJUvZW9wGgIYA/TqcDPwu66XEX6/2CKudbLuDHO\naKoGWaXoNGktTQtIcn/ZtTNDTZsEwfTsofKWoQFDgQWwlKwh4hpZIkzBdBah\n7t/tr/2xao6gmt9KGlzLcAV+e1LQjmruc4r1tzlke6BpExF9qdx/B+oDI8XL\nbxGj/1haQ7R25MmL/56CzhBrrh18X3oMxU+ZEB1fV5LYqJTvyOODOj27rE9g\n3S7mVd52Fg8juxqBC9vVHXXy0y+kc+dMpDzpUDP1JjVPUpQzpEpoxCRBMQNp\n/Ihs\r\n=/4Dv\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIE4b9yFFPYSxN2fIUJK6lsxiZquZn1VZ8eYgxaBrIJb7AiAETFQpIKM1ZBgtF2mKv6zm7KVxfmXGdzvgjWUjSYF1Mw=="}]},"_npmUser":{"name":"kuvos","email":"npm-public@qfox.nl"},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.3.0-next.1_1605709944519_0.4785504231582174"},"_hasShrinkwrap":false},"0.2.0":{"name":"gatsby-plugin-image","version":"0.2.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.1.1","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.11.0","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.5.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"3d607f1ae0cdde12fb8de53e6d0784f83875df25","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.2.0","_nodeVersion":"12.16.0","_npmVersion":"lerna/3.22.1/node@v12.16.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-Ml6Z0kzGNu/6bdj6o0HszJnt4tMabwevrgAbQoQRSh6Fn4OQS4bniMPqded+zoQ1s0xaDNvuZakz0L4tUvQY/Q==","shasum":"7af8fdcf1b8f5bbcc312aa818f2bfd9abde8b1f8","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.2.0.tgz","fileCount":101,"unpackedSize":437951,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJftsCBCRA9TVsSAnZWagAAlXAP/j0Hit4TnnUq373sBHFv\n6nD6Ye0TWR32wTTlsmeRh3U4uSlCYUfW0QSFCYHWBQTzXvOV/DfgdgbsHBzW\n5vzQqQpFzskWpyCX0l8akiCzqbgDbB3CmckZvhfWt3o7MhEeQsPOmHQUyXon\na7IL3yKl6OThTjfs369Vah/Qw264rgTDo0M6WuJ+Rr4oRUTNcvENUhMTrN95\n6oszfCk80N5/y4dwhJ8GAs7VMA19xZ7StRazm1lHguUsn2A5kRNgQ2TRL09p\nOUCS0ggTll4xuAlYe208n9DUaDO/QlK1womY1VrIheHxvxts5daw32ux8b81\njM5YCTCGP8eS1FF4ia7yzyghohpL3mHJ0IoeRIHWLSS6XO5Er1guUAW+WDxy\nsyo2hni4vCxXnXw3BOcKQT6NL9AaHd/kiX3kW5Np/EcdTVNG918IF8GorRjA\nZmmWOL/ewKoNNsEMGGntJrREMgEDA+cN40zFtYCtf9xP6SQBKceg0iwWDaJa\nS90cY/CKfcFvIJlWY1+gJuOBT+WTIX55/gLdpqV0oqqc/1VPSSX+sIN0QIKJ\n37EZziQjeOMryE2y0ztV362qAESpMKlxiQ9axQHIJGvwBC9OTNirjc8i/4ju\nLTxACVEc9wKaoewrT7jLOQBqAGan6jfSNMRSW2WiAh2iB8HJ4pYkLkhwhr1q\n+meX\r\n=ieOh\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCAz12i6cFEjIFKbk2AcOV5B76HgHCH5nA66slN6Rn5DQIhAJpcC2v7EEvtntGiPp7/83wg+zjfGOksjXND2sNYRxTV"}]},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.2.0_1605812352950_0.09533604406598095"},"_hasShrinkwrap":false},"0.2.0-image-helpers.55":{"name":"gatsby-plugin-image","version":"0.2.0-image-helpers.55","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.8.7","@babel/core":"^7.8.7","@testing-library/react":"^11.1.1","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.8.7","@babel/traverse":"^7.8.6","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"2.11.0-next.0","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"1.5.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"5c38c826d6771f929e57ea08a7213aeb8e09d0b2","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can build your own GatsbyImage with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\n### Upgrading from the gatsby-image@2\n\nYou can use the compat layer to make the transformation easier.\n\n```jsx\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image/compat\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage fixed={data.file.childImageSharp.fixed} />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\nBecause this no longer uses fragments to specify which fields to return, it instead uses arguments passed to the resolver. These include:\n\n- `placeholder`: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image. _Currently disabled until sharp is updated_\n- `layout`: The layout for the image.\n  - `FIXED:` A static image sized, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n  - `CONSTRAINED`: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n- `outputPixelDensities`: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- `sizes`: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance.\n- `formats`: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.2.0-image-helpers.55","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-mDmAWW8i3Iu48ZtMPfRvnFtyJ4c4atzfEN3EJad72wHOc0bY9NpKiJuE8DMTKYUdDxsAgJnxFSF6VAE49ckDqg==","shasum":"7f77705cbd21926eff28b0bbef01a9d987d52824","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.2.0-image-helpers.55.tgz","fileCount":119,"unpackedSize":2317761,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJft8NRCRA9TVsSAnZWagAA26EP/1NRf8/GFCxS4bvizj9k\nTusD4ARtT7tX+5yl+EjKuWLR+TM3lziHoc88pL7f/VjOrlH9iQVz58BpjBd0\n+W8oCgSID6MFubuFKeEss/4JJRL7WbovOgyJYOG1hspJum7rxnLumwdXWeBu\npz19wiBuqWqfCwBSRpB37S1e9qZGc4VfbE0GQ8xujzxwr+t9yM4pI0nP0fSl\n4PBRENar18qeDnnd0irMHOEWs0bqLUeRkUOhMK9GBrKMOcK490Sibcuu9+ho\ntqcb3ttG61OZ3VNO78pOuHu3IVHX7jn+xjG+nKQIgjhx8LLd8zrsjBID27hD\ntwco0Bs6XYdBpDPJsq7JMVr4r1xRvQpJjuDrS8p3dr0Ju/RQbXV/R/ThSN4H\nakTxpIFq2sXzKUnMg9We5XbUoAncNYqf8Z5pB+CuNTJNOu8kclUH9kTwWVIq\nSVwclpXr9cwys14/LRk6XTVWZDfjMplr+GkvQIwzYBgtgDyiUilkrB7RUVSo\nHEYzEU0pgzT/Pg5JOUGoyduiIf1bDibBdzlaoYnP8dvq9WVmjJJCFQI3//5L\noubR98v+ZNR+U4b7+tU+XkSut+5JYQjAyM6vQ2odPWZmBWuX53DsCnvrSRoy\nB20CFAsjq9hr2yq83gbS6QRSuBiMdVw3aKbk3eIMl4T7kJxIX8AXj0HpeV0S\n1bV6\r\n=gw2G\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFpgSpChQkQeox6AV2h2CgFcZvtHXrw2xPyAFJ+ffyrQAiAv24SGZfMPAOBRouvR2fLlZyK8BtXKcom5cZnt8oSC5A=="}]},"_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.2.0-image-helpers.55_1605878608711_0.7569570338478766"},"_hasShrinkwrap":false},"0.2.0-image-helpers.59":{"name":"gatsby-plugin-image","version":"0.2.0-image-helpers.59","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.1.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"2.12.0-next.0","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"1.6.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"5022170198c9fbfa8692106277cebf669bf63a62","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can build your own GatsbyImage with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\n### Upgrading from the gatsby-image@2\n\nYou can use the compat layer to make the transformation easier.\n\n```jsx\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image/compat\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage fixed={data.file.childImageSharp.fixed} />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\nBecause this no longer uses fragments to specify which fields to return, it instead uses arguments passed to the resolver. These include:\n\n- `placeholder`: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- `layout`: The layout for the image.\n  - `FIXED:` A static image sized, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n  - `CONSTRAINED`: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n- `outputPixelDensities`: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- `sizes`: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance.\n- `formats`: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.2.0-image-helpers.59","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-EfYTE7ZovqVuUI/Mp+NIGzaaXnvGMNBJ+AcgnZYUQpweWigMzF3BTgAPmY/MK6DJ1oEe7UxjEDpg/chtU6X2IA==","shasum":"8407e495a24fdb91415f6be4b906aac2aa5a1c1a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.2.0-image-helpers.59.tgz","fileCount":171,"unpackedSize":3445291,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfu9rGCRA9TVsSAnZWagAAeHUP/1DWLTyGrm4G6E3t9C5L\n2xTabWk4fKZqLxPHCH9sUOxgsW8scQLVdgYKgCuoAPTkttFZfKcTYmRXez6F\n3c2BxP8DBLu2TiHZ2dQqNTVoEPOP/VvfYvVMvi4ydZR2ZNyGleFSW8R27vhI\niDW808xROY+9eL3qddM3f6NJScDq3S1d/EUnqz/GZ3YA4HKIbvkJZSL1AuQG\nxlUJSXGWBPFgd4jpz43ESVzZ3COtFmitePDK7WAwHrTnfK6Xm1ZSIIQ0YIlr\nCPoJmXBc0rzVDM7us6hlCNMw/M55n1CdJc/xaXSsbT/gjhBi/bULX2F8PoYq\nMR4yPWjII1qh8pWAgW3uHdHIHBnaLCcc07ACU1ucQ2Jd2KoJjcVrO/qjJ9xm\npqLuiq0CQTxYfbPezaHSESivbBbApPLszLZddhIcY/a5H9hDKnFr9pRFg432\neIxwytzP30IFLY+5qzKgekysAjVupPQTgtq6jTyoGtw2CHWFrJAGvCVMnbA/\n7bPwZmVHgw0UPzuxuSdO6TIn1dDjNFflWMqVKpLlG9YTpkubJwny/uopYDCp\nKFzt8aXpFMZ1vlXfkeJGG9k4YVfBw3BjkFWEXh38QDVRQE+l6A1cfxIhQafo\nx3KTWYZAqoI243iOJiYlAga44Ncqhup/s32atlwSMOe5a/hU1jub9oL6mtuT\nb2Q7\r\n=6+HN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCjdJeTos/HXPdWrdeFGqu4zUc0cdm8dMRGMvoVYxBfMQIgcHUHD+VlyAgOhhnrIHEUJmIHjIos0qmjfz2SiEUOyNc="}]},"_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.2.0-image-helpers.59_1606146758267_0.0030060976354560065"},"_hasShrinkwrap":false},"0.4.0-next.0":{"name":"gatsby-plugin-image","version":"0.4.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.1.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.13.0-next.0","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.7.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"443c8d0daf0b2f5832ae2597d8bd46b5e5540133","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can also build your own GatsbyImage component with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\n### Upgrading from the gatsby-image@2\n\nWe will be releasing a codemod to automatically update your queries and imports. In the meantime, you can use the compat layer to make the transformation easier. This will be removed when we leave beta, but for now, it allows you to try the component with your existing queries.\n\n```jsx\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n// Note the different import\nimport { GatsbyImage } from \"gatsby-plugin-image/compat\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage fixed={data.file.childImageSharp.fixed} />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image. The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities. Ignored if layout = FLUID or CONSTRAINED, where you should use \"maxWidth\" instead.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **maxWidth**:\n  Maximum display width of generated files.\n  The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities\n  This only applies when layout = FLUID or CONSTRAINED. For other layout types, use \"width\"\n- **maxHeight**: If set, the generated image is a maximum of this height, cropping if necessary. If the image layout is \"constrained\" then the image will be limited to this height. If the aspect ratio of the image is different than the source, then the image will be cropped.`,\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `FIXED`: (default) A static image size, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n  - `CONSTRAINED`: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overriden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.4.0-next.0","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-RRyDiELl8qtDwrMl5HQN5H3QKXJfJ7C4qtrhap14zE+S/wJOvDSNQ5RSbvx9US9Nt3aN6z5U56uDUYAtGk8VvA==","shasum":"711ee1408d2ff5f47659a59d192c4f2e33be53d4","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.4.0-next.0.tgz","fileCount":104,"unpackedSize":1371350,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfwCWXCRA9TVsSAnZWagAAohYP/30UVZTrquMRrqkTQo3h\n+IbLG1Cu2hWOxA0epaVAcPzRmpZyEbzqG0Ro9LxSc+8JDYqgKuNxhMIXcaN/\nFbcFO3li0yMTYQgZVtQleDyaDFMLlDD9LMspcDBql0vEfVWDcRaSBPhjtOy/\n22Tp6vUcXv7aVFqonfLp+y2aykMaVNQ+kX97jB3kMtIjIQxxqHZUkSqC7CmG\nt9a8QeI/40ggc5/a/SvKfNrwSTc63DYed8NnwMRQi0eIqKiC4KkQ+gLDAo7w\nG9pMTZUvZguK0SSZ2OT37nOxvd+QgjX27uuTr4nVhyqnMq1/cNJlfXOCkr6Z\nwY/sQiX8n90O1RMm2yrIgtaF4v4ry0UCo8oyqUvcLJngesYrdakXLdvSGJ0c\n/8c0e3JnNOMaEJO77iez/2G3iNlFc/q3V2G6jVs9NAFlTWHvH5l8/aeChYJp\nAeCr2i+VZPIeo525hH04KOelKP9UastW6a8/6x2Re0K4Y/2GZAfXhx4eytCh\nHZ885QfmXWCGWM5I1w2QD9IE44GwGy0mdnF7FuPxzZOs7OLCH33lxohPAcZ8\n5RTpIRfW56Vb24XXobgvKAZjiBISEo9ctKHtjwY1unz/HAmzomEGXLpwObbp\nTSEAWmDdixFgyP/sPiStH2bCYFMjcjw4HD331z/hzMYhPJu53QyeuS3HVHoU\n0IYb\r\n=KrJX\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICg2vFXk4oFxuyAWjKh8tukgzwVv+fLnbw9tE8jOae6DAiEA/e0KAD3T8F7ir+s2i7v21q3NwjPvtg/qekWnO9R/35I="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.4.0-next.0_1606428055265_0.7947015110094613"},"_hasShrinkwrap":false},"0.4.0-next.1":{"name":"gatsby-plugin-image","version":"0.4.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.1.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.13.0-next.0","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.7.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"43e4050db8d0eae5f4b4cb50b58aad85bf45a790","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can also build your own GatsbyImage component with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\n### Upgrading from the gatsby-image@2\n\nWe will be releasing a codemod to automatically update your queries and imports. In the meantime, you can use the compat layer to make the transformation easier. This will be removed when we leave beta, but for now, it allows you to try the component with your existing queries.\n\n```jsx\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n// Note the different import\nimport { GatsbyImage } from \"gatsby-plugin-image/compat\"\n\nexport default ({ data }) => (\n  <div>\n    <h1>Hello gatsby-image</h1>\n    <GatsbyImage fixed={data.file.childImageSharp.fixed} />\n  </div>\n)\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        fixed(width: 125, height: 125) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image. The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities. Ignored if layout = FLUID or CONSTRAINED, where you should use \"maxWidth\" instead.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **maxWidth**:\n  Maximum display width of generated files.\n  The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities\n  This only applies when layout = FLUID or CONSTRAINED. For other layout types, use \"width\"\n- **maxHeight**: If set, the generated image is a maximum of this height, cropping if necessary. If the image layout is \"constrained\" then the image will be limited to this height. If the aspect ratio of the image is different than the source, then the image will be cropped.`,\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `FIXED`: (default) A static image size, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n  - `CONSTRAINED`: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overriden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.4.0-next.1","_nodeVersion":"12.16.0","_npmVersion":"lerna/3.22.1/node@v12.16.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-DUBC+oZHJIDGWiQaPVfROuU1ZEK6vclJ7fxuyQ5ddt7Hd/DYwjE2UtBMP+iDzHvJdrQGF3A7IRMYwZTtVkGwsA==","shasum":"e396078c58ee5f31a5cfef4f945c9a5c19d90b90","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.4.0-next.1.tgz","fileCount":116,"unpackedSize":1461174,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfxrsHCRA9TVsSAnZWagAAPeQP+wdYQAdcQMACTC8HtEsu\nmy1BPH6XjA4k1X9RLG2j5BFFb2X0cXg3SAMyDkliS9Ib7h6ZDK9APEUEiht0\nJJ0ibNGGGadIs/mGNAghEODcTRYxryp6lg/PXwoiaMQ9tbpbPHskmuc9ZNeb\nDLP5Gmna29HCsW0fW9PyndC90l4FTuIgnKoIQrV6HLlZIDlBzp2rG7bliwqt\nwZvCPf3c3/8umSYWKoPkgU7S7BDJbwYBgtIFEQ7LQeCDJarQ+fvikECZHazb\nrniPEJzeH3d56w78jOgE/q1TrX+Ta9yblFCkJMD/4VcqgKe12xz8BWIDWocA\nOdgO4dHPEInbftA4JAVbQh1IZmvLUCIMGnrEQLMos2t+VKd53wzkvcfZQPMI\nqyn5wlFH7JB2z+iv6fDUVaCcqKC+k7e2sUYJNX6KLS5i5o4Q+myq34MeBlaM\nNTE04R3wiQ6qmmF7/HVL4B1AG9aITgRMrC2RiYb6AecoHAnv+DcKoA+WApwx\nWaceFg0ir4TibIihl0roU24aTR5Vmum29VPTzFrhMELUgx2e9xjoEtJYW8Db\nJYiXEgeNlTQmb1Ufj0JqHvRupKVkhQRfWDrh4MvsFQCC1Yp8qx+ApaoP2Pah\ndvYhs3lJGgicZ4WVzAuQB1EyFFU6hGt+r2RxFUCq0d4Ouw7ZHcZHZPZpqyLG\nHGhR\r\n=kzcZ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCo/IO2b8rpzGRYJSwqqAwnfZf2gDLYQ3lrTAL88tgh3QIhAKWurjCJiy/qF5mOlqmdkss1gWAxFUswakj9bAeKnbWq"}]},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.4.0-next.1_1606859527295_0.00819899641897992"},"_hasShrinkwrap":false},"0.3.0":{"name":"gatsby-plugin-image","version":"0.3.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.1.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.12.0","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.6.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"52637b6a88f304a79bd3999615e224113b255349","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.3.0","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-an8Y7hbK1eDaZVcjtx9gEmBJAUQIiEVD1zQda/yM4wY4FA1bcgOefztaMqARPz/wRej5Jyigwfrx1TVNFdBH9A==","shasum":"35a76db6de07d797df09b74ad5354f691fa7bc6a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.3.0.tgz","fileCount":116,"unpackedSize":1457614,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfxugUCRA9TVsSAnZWagAAG9UP/3aG/0XbY/OqEmIBQtQu\n1XjYwFgGLyu2suKjIe/O7Gp8CIKTkUprPdkIM9MbmP4ikb+0LOA0k+AJ6U5z\nmDVGnIumwrhGxLqjygFmhI/ecK5et6aKid3veUXqZ4cYFvsE9kvoZoupQ6Vt\nbflrOsyMsJ+qfx/z/j6KQuSKjxW9Z/ukU/qTOfWLb2ZaUIdC1169+xjAh9c0\nRg1qnPNmHY6Ciqqf+/y+q1IsVqjJ7MBV0ilAlTLC6vFD+4RRxg4KT+M6WoK5\n5yHwIEMjV7rKpPeq16jKYNPPlcEO1b8lAtVY5OSjj/7/ZpD1WH9XjreCgJaf\nxWp0D43b2XSzOR2xvTluTwkLyHOgF188JO/bHxwtK8UWeQcKA8vxSRCJJONq\nawj9cJuruysrWA6ZM3X0/pZ/PvuoYg8xTsuG5DDvtqTx7E00rcnX+z6c2Qiz\ngCaYwSuGClplPLf6jrJWDBeyl8eNlz1zdXgHW7R/t07K4e2sV4vwIwCW8PJl\niZ5Xq8YZP/ntkGeKipejhbsb0/kaLDz6MhLUybwGDbEtefbJCcEQOruWEEFu\nGp5TgPii6Kupyc3BXOY4A/twZY+MtB11kZKpr3D/C46dHX6lIZo0WC0950dp\n5nPUfXFQtqElOTXx6TsczARyewi4GOnfB7WLcvan1SNhJ03+QK8w1Jlx7AQQ\nPGwx\r\n=sSKe\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDWq3oaxyqFizxvpLY5r04vcJ+yATBixb31EQWx1REmhgIgMh5SU/XIescz2UHtYBf88D29VjncuJfzHQDwvv9mP2I="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.3.0_1606871060158_0.5092123048990866"},"_hasShrinkwrap":false},"0.4.0-next.2":{"name":"gatsby-plugin-image","version":"0.4.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.1.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.13.0-next.0","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.7.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"edf46b7f55b6b2ee0c250c0fad8c3e49047a8510","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can also build your own GatsbyImage component with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\nIf you need the image `src` directly you can import the `getSrc` helper function from `gatsby-plugin-image`. That function is equivalent to `data.file.childImageSharp.gatsbyImageData.images.fallback.src`. Note that `src` will be undefined if a .png or .jpg image is not available.\n\n### Upgrading from the gatsby-image@2\n\nWe've included a codemod to help you migrate to the new `gatsby-plugin-image` API.\n\n1. Install JSCodeshift as a global module\n\n```shell\nnpm install -g jscodeshift\n```\n\n2. Install the gatsby-codemods package\n\n```shell\nnpm install gatsby-codemods\n```\n\n3. Run a transform from this package on your project. Note that the paths are relative to the root of your project.\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image <path>\n```\n\n**If you have a custom babel config for your site, run relative to the root directory, e.g. `./`, otherwise `./src` is sufficient.**\n\nNote that jscodeshift tries to match the formatting of your existing code, but you may need to use a tool like [prettier](https://prettier.io/) to ensure consistency after running these codemods.\n\nIf you need to run with custom flags, you run with [jscodeshift](https://github.com/facebook/jscodeshift) directly and reference `node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js` as your transform path.\n\n4. Install this package\n\n```shell\nnpm install gatsby-plugin-image\n```\n\n5. Add `gatsby-plugin-image` to your `gatsby-config.js` file.\n\n6. Make sure `gatsby-transformer-sharp` and `gatsby-plugin-sharp` are updated to the latest versions.\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image. The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities. Ignored if layout = FLUID or CONSTRAINED, where you should use \"maxWidth\" instead.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **maxWidth**:\n  Maximum display width of generated files.\n  The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities\n  This only applies when layout = FLUID or CONSTRAINED. For other layout types, use \"width\"\n- **maxHeight**: If set, the generated image is a maximum of this height, cropping if necessary. If the image layout is \"constrained\" then the image will be limited to this height. If the aspect ratio of the image is different than the source, then the image will be cropped.`,\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `FIXED`: (default) A static image size, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n  - `CONSTRAINED`: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overriden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.4.0-next.2","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.22.1/node@v12.14.1+x64 (darwin)","dist":{"integrity":"sha512-T+L8y4OAa6RgiW+WLIQ1r1z76eEHcSZH8q11u+skivZuCCbjJPFizhCu/cRfmX/RSh2hXr0DdGExKJV5on/z3Q==","shasum":"d3bc66aea4fd6313b8f6b370a98762465c37de6f","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.4.0-next.2.tgz","fileCount":116,"unpackedSize":1465927,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfynaUCRA9TVsSAnZWagAA7K8P/1ZIiOzfDzi2VMkusrAn\nlYduEHADm25ooYkP+8EsbyTgMFIL2+VLBDt/+JmOfpOFH/3XfSr5zH5vyj8e\nwfeu9yWqt2zpH/eyhukLHic7CzLLLpi3064RFJlqPPGZ3CkaTBVVicKNFGlq\nZEM57MFQkRvAN+p/PlNFCRCJ6OupcCUhnF8JUshBBD/EZW+bW+8BUpsG+4NQ\nwb1WBTaDAgKY7+bOR/DALMYRWmZxkVusvvaSCfPTAI8g5HlBNWGd1DyGDHzC\nFBQC9wTJONs8mLaDoZP8K6IKOmlEvwYgnbjTGLw9DxeOx8py1M+/rw0ZMGmG\njNDuRl95cDL48PTfhgXoT2Se4yf6hmXXIQWbM80DXZBCmMO5Pfkfdk87q6Ad\ncsAe0zJRoE5wqLPfT4KKbnVzGUI9liLAjVWdx72KGv1sAAXvelll5WYzi/as\nFap6jegQen2QBYdp8gIT3lk9MBxBreMSQnx8ZIu+mzWHQfZMrn2+oLpTYOfT\nd5QdahZnMof2f772kB48HqS+Af6I+SZp4iHnCGRhZW7RRTPSjVccrcdItIvi\nHO7OOoJdoeXYktQJIScyVNUdJ+w9HGU9Nn37jmBQ6JgJU1UJMukWNL14f6EL\n0dpkbTZHLmxl6D9FHA5ly4Snjztl9ebpMk6iTSOPX0OjDS9dW804PNAlCUYq\n3MC9\r\n=8gLO\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIH5IHwefMgTGyVYOffWCsRh1/5aeL302eSDzGTprdasTAiBkk85lHNOpgSNAt7b/hGFYDbU8Wg/nw1O+VrhGe73w5w=="}]},"_npmUser":{"name":"laurieontech","email":"laurie@gatsbyjs.com"},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.4.0-next.2_1607104147564_0.7175905914276088"},"_hasShrinkwrap":false},"0.3.1":{"name":"gatsby-plugin-image","version":"0.3.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.1.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.12.0","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.6.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"6d11da940468a90265fdfbde786eebd0d9df8e37","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.3.1","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-ZQIti9ibifOM3R3e1hasWzGJIjy5DyCN+GOEJetIKG2m/E9YMtohsngtDxef+tDtC1fiuOM82r/BJoQolE2Dfg==","shasum":"40a2375a34002cb24a7f243d7422ec04e8b00495","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.3.1.tgz","fileCount":116,"unpackedSize":1460322,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfzn7BCRA9TVsSAnZWagAA3hYQAIXnnRLk4DBFUQaTq8k2\nDy0uc/Oy03sz16s1pW5QwUIsnrilh2V1eVC+H5Z2+csRDKQni8K+HRCscGpH\nZW8IajbzPfBfp1CN63JIINMMpp3DlBzG9QJtuE8WvXvW6SOKgKvv3dj3WD5Z\nVK8Koh1tXivwiG2Ueqf9swxR6gvvYBUqY55Zn3c4sPF287hutkrws7DcgBNS\nWfFacWz7Tk0LQsUa07tl8oEsiBWhNSpNB4RUJu94CGDd5crD+05h4ADfaLVZ\nEKiPVNpyu+gVZ2hV4eoYjh2igqHSGWBaPsy0sFkpFmyptk8RxwvKAikqjqmX\n+RtUQbrE6E4TgO9uxSSLadCg+rs7oj977H/YFoSb0Uu8lRQe6mD8+iUsrcR4\nphdetwSA/NwEDN9y3Ydrwd9B6UiVCq/+fU/n1zUCYw2pBfiD9eJogLBl8hss\nJNoSq5hk0jbTckg2RQaabufunvOqCTrtrzysZ4IJnietBYrX/lJSsumxeWRJ\n5TBw5zVAdFUhBpMUkMLm1ixx/7Uu7GLefJHV+abLCvfD3f0abKC++jdIqt29\nvCkDK5N182NttJo1aSpZYmtfAjSQWTHREbCiA2SSyUMAgLkPjSmuVw9WEDjh\n3RazFn+ewqwMKUIXQ63i++DRhWJKdh3F7BR9MBAxWB1134UPab3jliLexYhm\ngi9H\r\n=FLpW\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG0mOleJC4CQ32m0Os9ORJKCXc+3N6ybFw9ulT3T1naxAiAMwqIdCLyJXAppZEx2csffd4mOLkZdo8CTWrmaXumMvg=="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.3.1_1607368384774_0.6679561444835962"},"_hasShrinkwrap":false},"0.4.0-next.3":{"name":"gatsby-plugin-image","version":"0.4.0-next.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.1.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.2","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.13.0-next.0","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.7.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"755950d1251ed001f2d813e7bce20ff417cb1afe","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can also build your own GatsbyImage component with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\nIf you need the image `src` directly you can import the `getSrc` helper function from `gatsby-plugin-image`. That function is equivalent to `data.file.childImageSharp.gatsbyImageData.images.fallback.src`. Note that `src` will be undefined if a .png or .jpg image is not available.\n\n### Upgrading from the gatsby-image@2\n\nWe've included a codemod to help you migrate to the new `gatsby-plugin-image` API.\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image <path>\n```\n\n`path` is not required and will default to the directory you're currently in.\n\nNote that you cannot pass additional flags to this command. It will automatically run the codemod against file extensions `js, jsx, ts, tsx` and ignore the `node_modules`, `.cache` and `public` directories of your project.\n\n**If you have a custom babel config for your site, run in the root directory, otherwise `./src` is sufficient.**\n\nNote that jscodeshift tries to match the formatting of your existing code, but you may need to use a tool like [prettier](https://prettier.io/) to ensure consistency after running these codemods.\n\nIf you need to run with custom flags, you can install [jscodeshift](https://github.com/facebook/jscodeshift) globally and `gatsby-codemods` in your project. Then `jscodeshift -t node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js .` will transform your current directory and you can pass any valid jscodeshift flags.\n\nAfter the code is modified, be sure to install and configure everything needed to use `gatsby-plugin-image.`\n\n1. Install this package\n\n```shell\nnpm install gatsby-plugin-image\n```\n\n2. Add `gatsby-plugin-image` to your `gatsby-config.js` file.\n\n3. Make sure `gatsby-transformer-sharp` and `gatsby-plugin-sharp` are updated to the latest versions.\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image. The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities. Ignored if layout = FLUID or CONSTRAINED, where you should use \"maxWidth\" instead.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **maxWidth**:\n  Maximum display width of generated files.\n  The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities\n  This only applies when layout = FLUID or CONSTRAINED. For other layout types, use \"width\"\n- **maxHeight**: If set, the generated image is a maximum of this height, cropping if necessary. If the image layout is \"constrained\" then the image will be limited to this height. If the aspect ratio of the image is different than the source, then the image will be cropped.`,\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `FIXED`: (default) A static image size, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n  - `CONSTRAINED`: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overriden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.4.0-next.3","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.22.1/node@v12.14.1+x64 (darwin)","dist":{"integrity":"sha512-5McGv1fVGhy4IX39f+CHkmCHePad20fN+AFo64KMSlsRDGn/meFTNY6ewbsyDic1ce0WZTWiBAHidveps0X1uA==","shasum":"51777437a7ff6189f50b3d0e7aee69f87fb06927","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.4.0-next.3.tgz","fileCount":116,"unpackedSize":1466351,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfz913CRA9TVsSAnZWagAA+7kP/0yK6/s1IOmzFq40iaCg\nWza+/rmxt85UkxsBGKTkJHmQy2bR0weskVb6Fxz0GJAl6DiNA6fCteeShbGV\nBqLZO6HLwj3FrmccrN7Cbs1WjJk9waK8+oClTfcS/Qysvu0omHoEZYf0b9QI\nNtgby9o73S1EI2uVAdrlAbQ33Bzz3DdgnYxbKlJ3Lz1OPEYoy1PTg4eyU9W3\nVFC4mnVAJAT9KNshBI8+TpePTYf3CpEvZ2jf+C5Kgn12mf97kg7G8dHAO9um\nJ5VLWkAcOcmks6WpHbnYOCryIjTlRomHdwYwwMOlReBIrt+pei4LkSKSmWe3\neY2DpcbfHqHWoqbTeERVNf6+B2PXJkGlCe0P6X67uEoUQsnfV3Vi40XAH/Ss\nzcMwk/r0FwCiT8SAJY75y97hZTYG3TQj+o/HRwHOqafuBRLBBc94pKnc0Xwq\n//Ct8l6faf5OHA9x4Fb8FawjOHxVJABvRYIyxG7H/9xvR5fPsZG+hMcAEUPw\npHK0tK0rzJ4tYxp0oqwyL9nLsqElKNNA1SkHH88Cwz/SwXI8lrgOr9xT/1TT\n3keA5LzbwH/oYdk3oOI1I0K3dekBeGNs7wYDbkoXe0Th1w3JdDp06JbHXhoV\nJI7FpJp/h9VOc6NL8SQDsUKqEeTHPGFpJfHx3Nezm1MrnRDoNVmgyTozzDVs\nVc5p\r\n=bLWa\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDErSkPLzE5Y15lSTS4liXFzK6tItR5ThQhTlTwjf0A+wIgWsI3SAK85ZvnD+522Z7pxniQY/86Hw/oVs5wkTqxB10="}]},"_npmUser":{"name":"laurieontech","email":"laurie@gatsbyjs.com"},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"laurie@gatsbyjs.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.4.0-next.3_1607458167100_0.6588800219688937"},"_hasShrinkwrap":false},"0.5.0-next.0":{"name":"gatsby-plugin-image","version":"0.5.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.1.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.14.0-next.0","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.8.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"9eb5031a84093da881d779c3a0e3335c085e5f83","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can also build your own GatsbyImage component with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\nIf you need the image `src` directly you can import the `getSrc` helper function from `gatsby-plugin-image`. That function is equivalent to `data.file.childImageSharp.gatsbyImageData.images.fallback.src`. Note that `src` will be undefined if a .png or .jpg image is not available.\n\n### Upgrading from the gatsby-image@2\n\nWe've included a codemod to help you migrate to the new `gatsby-plugin-image` API.\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image <path>\n```\n\n`path` is not required and will default to the directory you're currently in.\n\nNote that you cannot pass additional flags to this command. It will automatically run the codemod against file extensions `js, jsx, ts, tsx` and ignore the `node_modules`, `.cache` and `public` directories of your project.\n\n**If you have a custom babel config for your site, run in the root directory, otherwise `./src` is sufficient.**\n\nNote that jscodeshift tries to match the formatting of your existing code, but you may need to use a tool like [prettier](https://prettier.io/) to ensure consistency after running these codemods.\n\nIf you need to run with custom flags, you can install [jscodeshift](https://github.com/facebook/jscodeshift) globally and `gatsby-codemods` in your project. Then `jscodeshift -t node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js .` will transform your current directory and you can pass any valid jscodeshift flags.\n\nAfter the code is modified, be sure to install and configure everything needed to use `gatsby-plugin-image.`\n\n1. Install this package\n\n```shell\nnpm install gatsby-plugin-image\n```\n\n2. Add `gatsby-plugin-image` to your `gatsby-config.js` file.\n\n3. Make sure `gatsby-transformer-sharp` and `gatsby-plugin-sharp` are updated to the latest versions.\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image. The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities. Ignored if layout = FLUID or CONSTRAINED, where you should use \"maxWidth\" instead.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **maxWidth**:\n  Maximum display width of generated files.\n  The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities\n  This only applies when layout = FLUID or CONSTRAINED. For other layout types, use \"width\"\n- **maxHeight**: If set, the generated image is a maximum of this height, cropping if necessary. If the image layout is \"constrained\" then the image will be limited to this height. If the aspect ratio of the image is different than the source, then the image will be cropped.`,\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `FIXED`: (default) A static image size, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n  - `CONSTRAINED`: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overriden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.5.0-next.0","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-GTROS/NaMC87KaAA330fbgo8G1xB0xHoUtMvjFnidfWnlYaGUo4k4V7qD2egQZ7IdqIMwQJ0wS3sMgmamvMx3g==","shasum":"eb036db7290305100de16b56ee6cdb8e32fff3ac","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.5.0-next.0.tgz","fileCount":116,"unpackedSize":1476981,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf0pWqCRA9TVsSAnZWagAAbg0P/0ut6uxGc9qcgHboc/Ci\nRWO60k4IVMiybH2gpqC6t/oEac3xrQDbgawkeTsKkGOpeOLTWmg0FCi/7NfF\nhDWy+/WssSjDZ96FdFR72JgiBBsS+2u3LRK8JMa0ISQBG5iQq6+nv01fESk3\nIZ0uuHeAFo5FQ81SKn2Kilk6ly54AdY8YzpLF8n+5mq7rKtKF7UgzpTVUy+7\n+zrxdUt74uIatXiQ8IAdRg6kW17qCuwJMiER/EYuA/kIa44zSqiGpvSktOr2\nviac5y6JywPgNvnX6NJWSt+BEUln/GoICeVQYLRvliPHdSexIqJPWlqpJgNM\ncLZWfkfL+v6zbICutBmwYQTXEVtDbafhmv3o1wuHYqdM4idU2c0IT0dxYIdI\nL9jyfDc8WiCCZnQbhX2CVZ1//QgvbcLKfPxt2Odd8kxQcfUdffCsXpLFLpUR\nuMtEESwDmp7EU0aJ1eFzuty+GLUA7pF4YXVUoj/1mfgHwSPrX8zu/siiv6+Z\n2i25M9MBn6ZzteRhBpiJhyQkzjjwoNSsd7/COWXpHdrpssY7jgPxATzLjUwb\numoB2CTkDxTUaR8tgn7klq/behwq4hHaT7DMw0GEKHf9KLNhzbVatu6AvYJs\ng9ANlQHoAbBmlOdfkEH0ym5KYq5OkXjF6mN4moM7TEMEHRr71uvDyszL5oxP\n4Gcx\r\n=i30X\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCZlC+gbMcntfQpkOTYuzifdzhlAZD/7GRsuf8KdBumigIgHHTO1FlA+StExcTr5cAyR3DigxHfv44qoInXogIUhXQ="}]},"directories":{},"maintainers":[{"name":"mxstbr","email":"contact@mxstbr.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"dschau","email":"dustinschau@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.5.0-next.0_1607636394264_0.1323961102583633"},"_hasShrinkwrap":false},"0.5.0-next.1":{"name":"gatsby-plugin-image","version":"0.5.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.1.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.14.0-next.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.8.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"1dcbc097123fd47dddfc0f925e05213b4dc1d666","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `fixed`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container. You can also build your own GatsbyImage component with the utilities we export from this package.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\nIf you need the image `src` directly you can import the `getSrc` helper function from `gatsby-plugin-image`. That function is equivalent to `data.file.childImageSharp.gatsbyImageData.images.fallback.src`. Note that `src` will be undefined if a .png or .jpg image is not available.\n\n### Upgrading from the gatsby-image@2\n\nWe've included a codemod to help you migrate to the new `gatsby-plugin-image` API.\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image <path>\n```\n\n`path` is not required and will default to the directory you're currently in.\n\nNote that you cannot pass additional flags to this command. It will automatically run the codemod against file extensions `js, jsx, ts, tsx` and ignore the `node_modules`, `.cache` and `public` directories of your project.\n\n**If you have a custom babel config for your site, run in the root directory, otherwise `./src` is sufficient.**\n\nNote that jscodeshift tries to match the formatting of your existing code, but you may need to use a tool like [prettier](https://prettier.io/) to ensure consistency after running these codemods.\n\nIf you need to run with custom flags, you can install [jscodeshift](https://github.com/facebook/jscodeshift) globally and `gatsby-codemods` in your project. Then `jscodeshift -t node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js .` will transform your current directory and you can pass any valid jscodeshift flags.\n\nAfter the code is modified, be sure to install and configure everything needed to use `gatsby-plugin-image.`\n\n1. Install this package\n\n```shell\nnpm install gatsby-plugin-image\n```\n\n2. Add `gatsby-plugin-image` to your `gatsby-config.js` file.\n\n3. Make sure `gatsby-transformer-sharp` and `gatsby-plugin-sharp` are updated to the latest versions.\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image. The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities. Ignored if layout = FLUID or CONSTRAINED, where you should use \"maxWidth\" instead.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **maxWidth**:\n  Maximum display width of generated files.\n  The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities\n  This only applies when layout = FLUID or CONSTRAINED. For other layout types, use \"width\"\n- **maxHeight**: If set, the generated image is a maximum of this height, cropping if necessary. If the image layout is \"constrained\" then the image will be limited to this height. If the aspect ratio of the image is different than the source, then the image will be cropped.`,\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `FIXED`: (default) A static image size, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n  - `CONSTRAINED`: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overriden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.5.0-next.1","_nodeVersion":"12.18.4","_npmVersion":"lerna/3.22.1/node@v12.18.4+x64 (darwin)","_npmUser":{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},"dist":{"integrity":"sha512-CsaGfxcRRlRxmDg8pcYaHuNUHxmKZfXpzCW9YtdtDntOgnDFOIbh1WlQv22/vbRVXsBe1OYfWFj6iXM5kEcWVA==","shasum":"b33a83df993e4919d758e528b02e52129f4bc93d","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.5.0-next.1.tgz","fileCount":116,"unpackedSize":1481884,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf2L8XCRA9TVsSAnZWagAAAG0P/ieemMAzhiRHIeUF36SM\nRDpb+2wS5gjwwNSXtrPWTWO3dbVrNPv4X/mjE/PVaNfL5U/y4pVAnyVQ/ZBt\nIDQi6XYi/fRVoKG+/85SfP9IrLu2PvLNhEEPyoFSn5KMdmQUzo9UTQKbFWDX\ngMWLJrq0op85ZECAK5IODqpF4SjqY5WzeYiEoc1d3SzrUSm4JBqIbCDJ1YSh\nI/HXrPh/s2E9hPfW3oQgr6GKLJNqdCEeCQdYii4P9RlUht00LQWZlAVAH6+G\n/Booparls1nuDNVYJaQ5+6D2PPvtUYdVwenRN6cf6gn4XHCSCKRHx9d/5NsH\n/ZW9awBbm5sJGw2AW/grW3NrMVoOFXxSrbWN72jWKsfeKw20pHg8oE4G+VfI\nv2fciC/vFVPMLUmFjJVo9tYEZuRkB5klNqQ9+poJA+6bD7YtHcGdbVGY71gw\n2Xxs9aWf8MM4z/015SWV85iHliEtbz2prXuoF+kjRdPhYCO1IP/38tyhHAsw\nEnN7q0W2s8cbn2o20c8n89dsLCijfExJdSEhkzqL4JU9tI4Ka4f84cpaqUE8\nyimGubDRSsvQ6VAXN2CGn7oOuVndCGclU9edTN/Aki2IKGvGkjEGGT8V1YCq\n/SbVPzTqKxudDVZIKEnK72QhFStH1odVDcp5MQfKm2yGvVBl2/3hGNm5w/h7\nqUEL\r\n=s0+f\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDVZfWbCwdm1qrnw9G8FqytgykUnSubL5tzxQmk5KbhyAiAXteOF+77m2RLTdBBPUX1lJ4gALpHGQR/vhmMNaE5jnQ=="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.5.0-next.1_1608040214649_0.9090496430620831"},"_hasShrinkwrap":false},"0.4.0":{"name":"gatsby-plugin-image","version":"0.4.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.1.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.13.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.7.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"03d497f15bc968d88bb0c85ce427da797b8fc61d","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.4.0","_nodeVersion":"14.10.0","_npmVersion":"lerna/3.22.1/node@v14.10.0+x64 (darwin)","dist":{"integrity":"sha512-3GNpMuj1CJmCOQ1QZu1JYpM+nYIUa8h5bHYne97y+koSIl6rJghygXkQuoqlEMqIZxAbLGgVMUBVKrLlgad+xA==","shasum":"ab26fabb58c00907e9c7bb095f574c0ba39d2677","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.4.0.tgz","fileCount":116,"unpackedSize":1481826,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf2PmsCRA9TVsSAnZWagAAShoQAI+BU1uVV012C55nVz7U\nhqBooSJczwCbr4Lm6aRk/qP4o6AoRdEmDbJWatIsJ8jMN6bvFMkSoRl0Vu7R\ne58cTFrcaNKGf6qOMmTTDpK/9jtyCZ7orNNL7b8TWXcYpw5OJASG+vBmjUl1\nq2FR03P8DE/EgI+404fn7oejULcp4DHp3b1CCmJeGeeVfN/z+4+E1uBNRxEa\nMZAVGq+xroNDBWjK7y/0l8pSHDTT94e5FyH5hnddI5Hy4e2icU+CMIsDG27Z\n6FfLXgPiOF1dRToHht/W3tIt460gMFKaFvtokQHDXR7z3pS2bNaHoFB4TNtf\nLS8tklbZsGF0y4ulBGrZS5vvDKXzB0vHfiGnv3bHNJApov4tjLb+/2rqcZkj\nja7JkXJf0xa3/SkSfDEtGBxYTvaFWLViI1ue6Dv9HaKTwdKOwrx45/U01Ggy\nRVU0YvHibKG62zTlTAinj9Qe4L/2rtqd34Bfb7Xp2R4sAzGs9TpVoR5fuXYO\nF5BhSHJ0HoQV7knvRfxoq8zcpb+l4OYyVv+uw2g6wM+CV10qEIKBRtGQR7OS\nJUEUd/PwPVEZzaP8cp9VzjH1M+kGnsgAUvVv0Z4lNjbBvbtTUw7tbxT16ziz\n2Yp/kdBGQtVEMaZQmBBFpFlArwNz0hzYzPhy3SMsT0RnEldVyp9F2wwv6Ghf\nmM2U\r\n=oGDu\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBFLeBGXG3S/80p9iqJF8ZrDz9IfdKrXqOymVufj/b/cAiEAoTr+Ntol7XMsMN9zMaoBnMTGL/zfAvwzF0qlOQvVb5M="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.4.0_1608055212130_0.1617585145289906"},"_hasShrinkwrap":false},"0.5.0-next.2":{"name":"gatsby-plugin-image","version":"0.5.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.1.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.14.0-next.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.8.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"a07c33d8d4604528b270fb69539c19b9f336a896","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `constrained`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\nIf you need the image `src` directly you can import the `getSrc` helper function from `gatsby-plugin-image`. That function is equivalent to `data.file.childImageSharp.gatsbyImageData.images.fallback.src`. Note that `src` will be undefined if a .png or .jpg image is not available.\n\n### Upgrading from the gatsby-image@2\n\nWe've included a codemod to help you migrate to the new `gatsby-plugin-image` API.\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image <path>\n```\n\n`path` is not required and will default to the directory you're currently in.\n\nNote that you cannot pass additional flags to this command. It will automatically run the codemod against file extensions `js, jsx, ts, tsx` and ignore the `node_modules`, `.cache` and `public` directories of your project.\n\n**If you have a custom babel config for your site, run in the root directory, otherwise `./src` is sufficient.**\n\nNote that jscodeshift tries to match the formatting of your existing code, but you may need to use a tool like [prettier](https://prettier.io/) to ensure consistency after running these codemods.\n\nIf you need to run with custom flags, you can install [jscodeshift](https://github.com/facebook/jscodeshift) globally and `gatsby-codemods` in your project. Then `jscodeshift -t node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js .` will transform your current directory and you can pass any valid jscodeshift flags.\n\nAfter the code is modified, be sure to install and configure everything needed to use `gatsby-plugin-image.`\n\n1. Install this package\n\n```shell\nnpm install gatsby-plugin-image\n```\n\n2. Add `gatsby-plugin-image` to your `gatsby-config.js` file.\n\n3. Make sure `gatsby-transformer-sharp` and `gatsby-plugin-sharp` are updated to the latest versions.\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image. The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities. Ignored if layout = FLUID or CONSTRAINED, where you should use \"maxWidth\" instead.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **maxWidth**:\n  Maximum display width of generated files.\n  The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities\n  This only applies when layout = FLUID or CONSTRAINED. For other layout types, use \"width\"\n- **maxHeight**: If set, the generated image is a maximum of this height, cropping if necessary. If the image layout is \"constrained\" then the image will be limited to this height. If the aspect ratio of the image is different than the source, then the image will be cropped.`,\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `CONSTRAINED`: (default) Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n  - `FIXED`: A static image size, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overriden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.5.0-next.2","_nodeVersion":"12.18.4","_npmVersion":"lerna/3.22.1/node@v12.18.4+x64 (darwin)","_npmUser":{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},"dist":{"integrity":"sha512-iCdDmPG95+0szJyVpRo1mnot5/GkDNZA5kz4kGhAZsyleB7rLy20ronWod3cD7n1hwUGFcw/pV1cWevNovDz4w==","shasum":"6a7d0cf560d3650fdc84a35e35a492dd930b9f89","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.5.0-next.2.tgz","fileCount":116,"unpackedSize":1490071,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf22uCCRA9TVsSAnZWagAAMlkP/Ro0stlrWovDBurel7qA\n1qDJ+IYtwyURVxuePJcU2Zab6N0zCAeDmOeDPlWJlSDqo97AgPiY7oS+l910\n55nN/gK5fCjP/p87EEDJsUhugeLZqRdASKy6JTnuVFg0ZbhAYxOwLH9QWeYx\nOSIoUlgLkdoKbPnbeNv5N762t03yUHWka7ayR3RmFmYj9BCwhEHfAsXc5Wpw\n0JibyUdBcJ5AQboUQWSSygbc/Kn8DzzIaGa/ofT/TEftq9VqyiKkEtwqIl0r\na9q0XBe44X8RCnmeSFpoQ6sH0U6Yv4PyKRcRN/fOM3ly6pBGEvLHecfOAEIN\nkoTZixmEaCcdmj9lqQA8mxF0N1mTGYXQMWNCk+eZVdsVBXEIEkUysLyI/ntd\n+qeVJXc8jqK3NqY4s/FjslGAz8Xxnq6P9Q9grhFUaHrbXEqbyWP+SlzOhdqt\nThfyrGdca3H4lOLytPD/IZfAwplpwifP7uQ972iCjg9lDGDbRE5GUnREU4ge\nbPWFw5ruL9t0y1inznJsEQKbV//4Pf+hXxAZz1gmi89ELgO5xEkMrczIFX/j\nE4RsFBWvMsXJ6J11mW3f8EyeCIMILCzC8RGEtlCtlMfnRCHmnvMc+lNB5zow\nv8xagkwYsWe35wVwj20IMG0XkE4BbYrXn4wQcxvJctxEDmLCPZa1GR1U64IP\nxfEj\r\n=J57d\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCGGzN5fx6uKeeZdakfv7pUMAovbZrIzY9XNkCeyoIA7AIgX3HYdt6dS0CBk8aQrkBHpzbE68J/23vARcvEgLXA0QE="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.5.0-next.2_1608215426077_0.9906886430730484"},"_hasShrinkwrap":false},"0.5.0-next.3":{"name":"gatsby-plugin-image","version":"0.5.0-next.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.1.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.14.0-next.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.8.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"762a52447679a17155a73246e0824ffe2d7f30e0","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `constrained`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\nIf you need the image `src` directly you can import the `getSrc` helper function from `gatsby-plugin-image`. That function is equivalent to `data.file.childImageSharp.gatsbyImageData.images.fallback.src`. Note that `src` will be undefined if a .png or .jpg image is not available.\n\n### Upgrading from the gatsby-image@2\n\nWe've included a codemod to help you migrate to the new `gatsby-plugin-image` API.\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image <path>\n```\n\n`path` is not required and will default to the directory you're currently in.\n\nNote that you cannot pass additional flags to this command. It will automatically run the codemod against file extensions `js, jsx, ts, tsx` and ignore the `node_modules`, `.cache` and `public` directories of your project.\n\n**If you have a custom babel config for your site, run in the root directory, otherwise `./src` is sufficient.**\n\nNote that jscodeshift tries to match the formatting of your existing code, but you may need to use a tool like [prettier](https://prettier.io/) to ensure consistency after running these codemods.\n\nIf you need to run with custom flags, you can install [jscodeshift](https://github.com/facebook/jscodeshift) globally and `gatsby-codemods` in your project. Then `jscodeshift -t node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js .` will transform your current directory and you can pass any valid jscodeshift flags.\n\nAfter the code is modified, be sure to install and configure everything needed to use `gatsby-plugin-image.`\n\n1. Install this package\n\n```shell\nnpm install gatsby-plugin-image\n```\n\n2. Add `gatsby-plugin-image` to your `gatsby-config.js` file.\n\n3. Make sure `gatsby-transformer-sharp` and `gatsby-plugin-sharp` are updated to the latest versions.\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image. The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities. Ignored if layout = FLUID or CONSTRAINED, where you should use \"maxWidth\" instead.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **maxWidth**:\n  Maximum display width of generated files.\n  The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities\n  This only applies when layout = FLUID or CONSTRAINED. For other layout types, use \"width\"\n- **maxHeight**: If set, the generated image is a maximum of this height, cropping if necessary. If the image layout is \"constrained\" then the image will be limited to this height. If the aspect ratio of the image is different than the source, then the image will be cropped.`,\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `CONSTRAINED`: (default) Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n  - `FIXED`: A static image size, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overriden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.5.0-next.3","_nodeVersion":"12.18.4","_npmVersion":"lerna/3.22.1/node@v12.18.4+x64 (darwin)","_npmUser":{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},"dist":{"integrity":"sha512-vJDvZdU77K6QbWhVJvS5kcvUIILJxKhQmS29EwYpXjuuszG0A+0o5CTC+ed6TZLUr5f6YnzHFJGjX2hrc2NCsA==","shasum":"a232ffe453f235e4ff4f9cea0d07cd91866e3057","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.5.0-next.3.tgz","fileCount":116,"unpackedSize":1490275,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf23DyCRA9TVsSAnZWagAAuOMQAJZiZzBE5khGUnRSo2QH\nvbiPdvVMr5QCRFaV/oSJSiLcI5dDJqQJSrnuF/Tmb9r+WpBCAZhTIY+AdwOO\nlNMJDD8prLEMDvC709/V+Hr9Eqxnxq5pIjwiBSX/x9ACSe7qoMCvlX9+jEVL\nHTDqC30oAsAduq2Pw6EWBIKXpXrGpqSAPVlZATqZA3QEeL0bbf+ZgM3Y5sj6\nCsb6nBxaM777guYwNrj4WWi9PAujHZwe6fS5lNf/9VPJunhYgPiUwBWmqLfM\n8R7iQUupEU7FqiHGPJ0ZAsWNTOX6vIrgz03wGQ6jnbhepKbRbgVNncGpNhS7\nqhTcNVJ8+3i9Dt9/ZywD9XMS4BRuK8JNEDY9IDqg54gC3AonQzDwbX43Tcva\nzA7LfyW/iLHzuu+pCa+G5OQTF3Nm28sJXQpUZ3EWZaibRikeGmrYvYSZZzye\nDmRYz2vq9LbFamAIBiwJrj+WnzxUG6gYVs1S/BxEcUx9yaK1UOZ7AmQPPNs1\nIqTn6NE8R5UkwZ2mYpBVA6U2kfnmrLY/GkzQPM/VQqMn1iyZk+3r/DaO5uoI\nBALclc6hgfED9yMH3Y761xLFjHYymVY3+oZdZE5kEEsvLIeeKWJCYXsH4ETY\nrenIJoudt6fpPJsyIbz0vA+1dRG4GHtKQPXnOALMcZ1Tm3BPjZ1c+RMaBtOK\nIjxf\r\n=scLj\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAxLcBMIO5voCpNCYczRKhu/YbGSix2DZ+OBiAzHkkmqAiAlC9ojhTYLeG/nqlMZGrjKOkRYAuUeF/5/SNsyvZ0wQg=="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.5.0-next.3_1608216818187_0.62785563617645"},"_hasShrinkwrap":false},"0.5.0-next.4":{"name":"gatsby-plugin-image","version":"0.5.0-next.4","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.14.0-next.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.8.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"8138b97d025b5aaa8f3a46e7d9911484a00591f7","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `constrained`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\nIf you need the image `src` directly you can import the `getSrc` helper function from `gatsby-plugin-image`. That function is equivalent to `data.file.childImageSharp.gatsbyImageData.images.fallback.src`. Note that `src` will be undefined if a .png or .jpg image is not available.\n\n### Upgrading from the gatsby-image@2\n\nWe've included a codemod to help you migrate to the new `gatsby-plugin-image` API.\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image <path>\n```\n\n`path` is not required and will default to the directory you're currently in.\n\nNote that you cannot pass additional flags to this command. It will automatically run the codemod against file extensions `js, jsx, ts, tsx` and ignore the `node_modules`, `.cache` and `public` directories of your project.\n\n**If you have a custom babel config for your site, run in the root directory, otherwise `./src` is sufficient.**\n\nNote that jscodeshift tries to match the formatting of your existing code, but you may need to use a tool like [prettier](https://prettier.io/) to ensure consistency after running these codemods.\n\nIf you need to run with custom flags, you can install [jscodeshift](https://github.com/facebook/jscodeshift) globally and `gatsby-codemods` in your project. Then `jscodeshift -t node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js .` will transform your current directory and you can pass any valid jscodeshift flags.\n\nAfter the code is modified, be sure to install and configure everything needed to use `gatsby-plugin-image.`\n\n1. Install this package\n\n```shell\nnpm install gatsby-plugin-image\n```\n\n2. Add `gatsby-plugin-image` to your `gatsby-config.js` file.\n\n3. Make sure `gatsby-transformer-sharp` and `gatsby-plugin-sharp` are updated to the latest versions.\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image. The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities. Ignored if layout = FLUID or CONSTRAINED, where you should use \"maxWidth\" instead.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **maxWidth**:\n  Maximum display width of generated files.\n  The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities\n  This only applies when layout = FLUID or CONSTRAINED. For other layout types, use \"width\"\n- **maxHeight**: If set, the generated image is a maximum of this height, cropping if necessary. If the image layout is \"constrained\" then the image will be limited to this height. If the aspect ratio of the image is different than the source, then the image will be cropped.`,\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `CONSTRAINED`: (default) Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n  - `FIXED`: A static image size, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overriden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.5.0-next.4","_nodeVersion":"12.18.4","_npmVersion":"lerna/3.22.1/node@v12.18.4+x64 (darwin)","_npmUser":{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},"dist":{"integrity":"sha512-IyRQgidAzWxqCFtcWMlguSzR+GzVaYYrpUYKKhC8iCMryx5WrFOKwqZdieC+Qt9BCxoQOqXkZGwuLlnm8Xm6Yg==","shasum":"765e89efd9915b79a2f524a18bb265461125d20b","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.5.0-next.4.tgz","fileCount":116,"unpackedSize":1490647,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf25eMCRA9TVsSAnZWagAAb58P/1L73iX1XxXs9B39lejZ\nz0P0ZQL+NlkIQvW5NtiMMIuoNwoHJv9mr/YpgznSo8C5zZ7Dc2xX/qMyliGA\nlLLSsgEPbZXnsWFrdSRiHwR9aLmlOUCX1cwZ8BrM24qRXYczKsnWBw1UeZkJ\n3U6BCBD0n5LxI8A4AfHtxlkiXMwfefwZjjWrbiG4oWirTQz185Nm8YJZ80ZD\nP9RtZ+WU3Kf1Ip0yvQljpJLs+jjSIouhUPJKc2WMgvlrJKsi62aBEckqyHip\nOlpCUDzzCmwTTVYZrFSOBR4BQYLthu86uCmr/GUJGiBTcAC1oNkvjo0VH267\nVeNJU+aCsDgVHiIaQjRuV55kKoxjrgaK4iTD/XTQxuVqMFivKCsg4HwqKGc7\n20blESf1MGAM03aHdEgF31awNHB47jnumBVbLXmlVbRWdy2pNVChvM1Z9qSS\nwviYwgHqDjmNQS5jIeXl2t/2UD2j3uhfrCrLyyePTPp7PTC3WAoffnOxgkNB\nzZHfjCxxuhKpjKvCT7S71wjVg66/LhFCjikYh6D1OcAu80YXH3Xstkswmff2\njK0yu2GWRDcDfESdG3OEy2JRvXjiM8yRMbfq8umYs+U0dcX/bChYHOZeQ3Ha\ni1KkNBCX+iThvSOu5AnwLOsY5lQD3g8A4cmcD/j7k8/vCNo1lrUXuIWdwKUr\nuU7H\r\n=qPqc\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDtxrVRcKMzFHeJzx0BKLAoec/qOMAFusdoBEld/1DgBAiEAj6dhJ0zzuw7PDnVgLF2uDOKnvEUydjRxQqLIGODAjsE="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.5.0-next.4_1608226700054_0.17789250323168004"},"_hasShrinkwrap":false},"0.5.0-next.5":{"name":"gatsby-plugin-image","version":"0.5.0-next.5","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.14.0-next.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.8.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"48fa29b74ec2bcff59d524cff6f46bdc7f677aa4","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `constrained`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\nIf you need the image `src` directly you can import the `getSrc` helper function from `gatsby-plugin-image`. That function is equivalent to `data.file.childImageSharp.gatsbyImageData.images.fallback.src`. Note that `src` will be undefined if a .png or .jpg image is not available.\n\n### Upgrading from the gatsby-image@2\n\nWe've included a codemod to help you migrate to the new `gatsby-plugin-image` API.\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image <path>\n```\n\n`path` is not required and will default to the directory you're currently in.\n\nNote that you cannot pass additional flags to this command. It will automatically run the codemod against file extensions `js, jsx, ts, tsx` and ignore the `node_modules`, `.cache` and `public` directories of your project.\n\n**If you have a custom babel config for your site, run in the root directory, otherwise `./src` is sufficient.**\n\nNote that jscodeshift tries to match the formatting of your existing code, but you may need to use a tool like [prettier](https://prettier.io/) to ensure consistency after running these codemods.\n\nIf you need to run with custom flags, you can install [jscodeshift](https://github.com/facebook/jscodeshift) globally and `gatsby-codemods` in your project. Then `jscodeshift -t node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js .` will transform your current directory and you can pass any valid jscodeshift flags.\n\nAfter the code is modified, be sure to install and configure everything needed to use `gatsby-plugin-image.`\n\n1. Install this package\n\n```shell\nnpm install gatsby-plugin-image\n```\n\n2. Add `gatsby-plugin-image` to your `gatsby-config.js` file.\n\n3. Make sure `gatsby-transformer-sharp` and `gatsby-plugin-sharp` are updated to the latest versions.\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image. The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities. Ignored if layout = FLUID or CONSTRAINED, where you should use \"maxWidth\" instead.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **maxWidth**:\n  Maximum display width of generated files.\n  The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities\n  This only applies when layout = FLUID or CONSTRAINED. For other layout types, use \"width\"\n- **maxHeight**: If set, the generated image is a maximum of this height, cropping if necessary. If the image layout is \"constrained\" then the image will be limited to this height. If the aspect ratio of the image is different than the source, then the image will be cropped.`,\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `CONSTRAINED`: (default) Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n  - `FIXED`: A static image size, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overriden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.5.0-next.5","_nodeVersion":"14.10.0","_npmVersion":"lerna/3.22.1/node@v14.10.0+x64 (darwin)","dist":{"integrity":"sha512-P/ReZscU9T+tj3w1DZ4NzLFqyJV0z+JWtpLIDplPyljBLQ1PBCs+VbRuymoBVl8T1u3bAqowgxFN/NorWsrsOw==","shasum":"163b415b72d3e3e0bc0b1537e7d8226f5e903ea6","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.5.0-next.5.tgz","fileCount":116,"unpackedSize":1493305,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf3JvlCRA9TVsSAnZWagAAdTYP/1MzK2zSvb91OXs1Blov\nbwByaJQYl8Kyq+eyDocZ1Sirb0zMUDWG/punETAE6fLJxfMJaszuLyx5h6zW\nnH7XL9jWMKuuietrRFDWzo33iOkxj+e+heXAXkPRfjgMDjDIGbPY2hAh5ZLR\nMYdM+kBg4xmrxdxSZDuAywEr8HbORE+dnfA03vUNWseL+IoFaPJmcvUa2BxV\n10eCRvrsZrBz4SsI+C/1aJ2IL0apfwd8UW8eXSQP/e8wDEpF7HnnWaFpQZcS\nRt25QrzOCHgiTg75HKUExbfKX3PolbVy68BQw9hrIKark8rIGLZKiv8zdsMV\nVh9CGEp2rOzSKYWiKuecDiOPZh6GJGkv0Yr538pXUsuzRFLyDEA56pMM+u43\n/Ed0Lxgn+tSGgcpa+ZfzJrR52v3IN3PPvJQXXz2WmyxXDR1B0tW27pfdy41Y\nWqQS96plR1WD/Xq6ku5MOFnrn04ZjRNTo7a7DeZXoNDvkhq6dCi2LNEcwuIG\nsSf52cDP+foErZRUTbKlhKMByj+NKxNfokUQRfpTsaTNKwQFqPzOETmFc9Yx\nbi4BaAS27h0AvKwZKUjZ1z5G+irJG7RGDEhaYz8ilfbz0P+KWZoIYqCS6Sh0\nw6r3y13sbzAcOQgTm5nRk2Mcbax9uWQ+I0TIAyyvorelt50eEa75YTs977MD\n4cAf\r\n=zEP+\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCoRtfC+sZxVXw2z+RGdBmQTPDFRvNf73VUQxfwjaLwIgIhAP4tioj0OVfbrrfFG0bOel9idKkSieEasv0FgdHqR6oL"}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.5.0-next.5_1608293349430_0.7944049872619505"},"_hasShrinkwrap":false},"0.2.0-telemetry-test.359":{"name":"gatsby-plugin-image","version":"0.2.0-telemetry-test.359","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"2.14.0-next.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"1.5.0-telemetry-test.359+57d1ad563d","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"57d1ad563d0534d70f0b8170058a38c7f4ff8611","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `constrained`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\nIf you need the image `src` directly you can import the `getSrc` helper function from `gatsby-plugin-image`. That function is equivalent to `data.file.childImageSharp.gatsbyImageData.images.fallback.src`. Note that `src` will be undefined if a .png or .jpg image is not available.\n\n### Upgrading from the gatsby-image@2\n\nWe've included a codemod to help you migrate to the new `gatsby-plugin-image` API.\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image <path>\n```\n\n`path` is not required and will default to the directory you're currently in.\n\nNote that you cannot pass additional flags to this command. It will automatically run the codemod against file extensions `js, jsx, ts, tsx` and ignore the `node_modules`, `.cache` and `public` directories of your project.\n\n**If you have a custom babel config for your site, run in the root directory, otherwise `./src` is sufficient.**\n\nNote that jscodeshift tries to match the formatting of your existing code, but you may need to use a tool like [prettier](https://prettier.io/) to ensure consistency after running these codemods.\n\nIf you need to run with custom flags, you can install [jscodeshift](https://github.com/facebook/jscodeshift) globally and `gatsby-codemods` in your project. Then `jscodeshift -t node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js .` will transform your current directory and you can pass any valid jscodeshift flags.\n\nAfter the code is modified, be sure to install and configure everything needed to use `gatsby-plugin-image.`\n\n1. Install this package\n\n```shell\nnpm install gatsby-plugin-image\n```\n\n2. Add `gatsby-plugin-image` to your `gatsby-config.js` file.\n\n3. Make sure `gatsby-transformer-sharp` and `gatsby-plugin-sharp` are updated to the latest versions.\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image. The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities. Ignored if layout = FLUID or CONSTRAINED, where you should use \"maxWidth\" instead.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **maxWidth**:\n  Maximum display width of generated files.\n  The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities\n  This only applies when layout = FLUID or CONSTRAINED. For other layout types, use \"width\"\n- **maxHeight**: If set, the generated image is a maximum of this height, cropping if necessary. If the image layout is \"constrained\" then the image will be limited to this height. If the aspect ratio of the image is different than the source, then the image will be cropped.`,\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `CONSTRAINED`: (default) Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n  - `FIXED`: A static image size, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overriden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.2.0-telemetry-test.359","_nodeVersion":"10.21.0","_npmVersion":"lerna/3.22.1/node@v10.21.0+x64 (linux)","dist":{"integrity":"sha512-vRob1zhzKxhmYrJBRIMc+hG/wyl385EY9vgFExpe7b5EhaKZMsGZsqu8XovoHL+N9t5a/dipPh/woHDRW/GXwg==","shasum":"fd4804c1a2a4aa7120974de9bcca7189546681b8","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.2.0-telemetry-test.359.tgz","fileCount":118,"unpackedSize":1495328,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf4dxTCRA9TVsSAnZWagAA4CQQAI3N4maF6PNVOPjEDeRu\n3PQmlceIfkcYU2i3jtjYb2Z6mmhskRRjzOKIMFieOTYPFkqI325+TZ7Z1Rus\nO4zkpao7TjRYE3yuzjCH0SDCOMQR7BrEeYzRtdoW46EWUL87xI7/+1fGA2Yl\niTfIyV8KPVqqVWPqi4RFKvgkyD9w4UroxAfa5i1SJsOTsefOtf5JCO6VPFd5\nlswgXzSyCUD8xdSkhkqrEBqV/izGv2JVGHWRndhUxjejqqSel4lHugLed7AK\nBSPQCLQfilrGNh9GdZuDos8qZbugYKs34930rMdsfIAD89WKNiL7s0XUDD5n\n/NsPx1oegr0JkugJ2yMdN1WuF6RPqU2mAX0C9c4kOonqxpwXlmuVyFLIF/YV\nW10U9k5THZ6awTdPTnMF0g48FAVbjNG6xDTPFX5HtPFZW0maoJt+E7mzAZpl\nqh+2tIULQQfYLvmVrRy2amTKiBNc71pmVdibgBnyyS/m1a8/JAnzF1ro/8PX\n17D7fLEZd+9JZqqEs+9nWZ8NivQjMJ60BRWJ0iHmib2jAbt7bBTtJXADSca1\n5bZXrXIBP3JDq0X2cFNGJggmB2FIh/a1ktJAwEbx59XM7yOgGSICS1ZmEtf6\nDenbIIiiUdVuWmRqP1YJ5nvBMkp+AGbLvw+7O2mAtAaTYa8WSQMsLSH32RD/\nFBe6\r\n=1nm9\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDyGj/OXFPW1Bol5p5D3tJMA/e0bl2lpa2GhSTVRYlK0AIhAPuPqX5ymvDcWlgf9P8RgTP2B3Ix9emUF+MIKyETwn3b"}]},"_npmUser":{"name":"jamo","email":"jamo@isotalo.fi"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.2.0-telemetry-test.359_1608637522920_0.4847452774471468"},"_hasShrinkwrap":false},"0.2.0-telemetry-test.360":{"name":"gatsby-plugin-image","version":"0.2.0-telemetry-test.360","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"2.14.0-next.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"1.5.0-telemetry-test.360+4ed521cdcd","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"4ed521cdcd05d1ceab9aea5a933b27deb26dc862","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `constrained`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\nIf you need the image `src` directly you can import the `getSrc` helper function from `gatsby-plugin-image`. That function is equivalent to `data.file.childImageSharp.gatsbyImageData.images.fallback.src`. Note that `src` will be undefined if a .png or .jpg image is not available.\n\n### Upgrading from the gatsby-image@2\n\nWe've included a codemod to help you migrate to the new `gatsby-plugin-image` API.\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image <path>\n```\n\n`path` is not required and will default to the directory you're currently in.\n\nNote that you cannot pass additional flags to this command. It will automatically run the codemod against file extensions `js, jsx, ts, tsx` and ignore the `node_modules`, `.cache` and `public` directories of your project.\n\n**If you have a custom babel config for your site, run in the root directory, otherwise `./src` is sufficient.**\n\nNote that jscodeshift tries to match the formatting of your existing code, but you may need to use a tool like [prettier](https://prettier.io/) to ensure consistency after running these codemods.\n\nIf you need to run with custom flags, you can install [jscodeshift](https://github.com/facebook/jscodeshift) globally and `gatsby-codemods` in your project. Then `jscodeshift -t node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js .` will transform your current directory and you can pass any valid jscodeshift flags.\n\nAfter the code is modified, be sure to install and configure everything needed to use `gatsby-plugin-image.`\n\n1. Install this package\n\n```shell\nnpm install gatsby-plugin-image\n```\n\n2. Add `gatsby-plugin-image` to your `gatsby-config.js` file.\n\n3. Make sure `gatsby-transformer-sharp` and `gatsby-plugin-sharp` are updated to the latest versions.\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image. The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities. Ignored if layout = FLUID or CONSTRAINED, where you should use \"maxWidth\" instead.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **maxWidth**:\n  Maximum display width of generated files.\n  The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities\n  This only applies when layout = FLUID or CONSTRAINED. For other layout types, use \"width\"\n- **maxHeight**: If set, the generated image is a maximum of this height, cropping if necessary. If the image layout is \"constrained\" then the image will be limited to this height. If the aspect ratio of the image is different than the source, then the image will be cropped.`,\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `CONSTRAINED`: (default) Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n  - `FIXED`: A static image size, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overriden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.2.0-telemetry-test.360","_nodeVersion":"10.21.0","_npmVersion":"lerna/3.22.1/node@v10.21.0+x64 (linux)","dist":{"integrity":"sha512-nQRfOSYOo+TEGla9eByaplyiJ55e500G/j7a7l+rl2OH6h8+4JMWHRSxcCL6Vf47hqZkF+SbiqshEIRygRVGuQ==","shasum":"a06add57fa3af2079808cf25cd14568ad5f57292","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.2.0-telemetry-test.360.tgz","fileCount":118,"unpackedSize":1495328,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf4d+qCRA9TVsSAnZWagAAGU4P/1R/qrUF4V0QFS3nEyzt\n+IqNpc7Nupc5zfTKbGVlD5DK5xIZCVQmQKrX6cAF4eCVJ2F06wBJ4r/4IK64\nf8fOREgfyTWR3gmutN3y9MX89ml45x9cHoWCiRmQMagNcY4yiJDyQbVJ6/3x\nGN/fLkIJwahc0AsiuIZwPwMwVo28CR25WX1h0QQH4KVhmwYLqD3cWzb52yr3\nH3v12fBJt3va8EdpPLEnvqg9y/9qF7z+2OCTgpYOgl7lVGcOHraGLcnZpRlx\nMsq4sisy6IG7QSTIS2B2hNtaVnP/UwMrd4H7WnU4Hj8SSJdgBB0REw7QzW/D\nPSIJm1pTnCncVg1iNgEMIahVFVkwzs0dtGVS3Bi1bhCch/mcOFGXYaXSMh+d\nPo2nxCX/OM7WkyzNSXeudRrnweYk2DyK0v6Wu9zTZs4acDI5KpGUj27bxOFE\n2y8lAb1Ljib01sqvYH8ii3uzmage765vbFld8Y7/porC9yzf+SU/d3dgpjTC\nkr5Sdzg3SjF80nfhAQYmVSwqvXRKngTk4WN5Q7XmZnzC8TwhHKPxFgaKiY5Y\nnVtszEd9Mht4lhLrBPG0HrBxF0iyFysZLVGK7F01BB7fmt8UQVR5WJ1Ni6dT\nKo4E0IPGKt15dXcM/g5MaQCsPJK/7pnfXn5RhE8ikAFdauy2CNck1tTleImt\nm1ID\r\n=WQTR\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD9jXehi+cvYB4iz+givYrQ16R4MOtsMK5M0u4mnqfzYgIgXQ+vabLCKA4kJx5q4NwJfE1yCnVjWUZnBXka5kfnaYc="}]},"_npmUser":{"name":"jamo","email":"jamo@isotalo.fi"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.2.0-telemetry-test.360_1608638377942_0.5940174773552658"},"_hasShrinkwrap":false},"0.5.0-avif.11":{"name":"gatsby-plugin-image","version":"0.5.0-avif.11","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"2.14.0-next.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"1.8.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"d0c04dcc3a5dd6cd69f51889c372715ed0fa9c15","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `constrained`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\nIf you need the image `src` directly you can import the `getSrc` helper function from `gatsby-plugin-image`. That function is equivalent to `data.file.childImageSharp.gatsbyImageData.images.fallback.src`. Note that `src` will be undefined if a .png or .jpg image is not available.\n\n### Upgrading from the gatsby-image@2\n\nWe've included a codemod to help you migrate to the new `gatsby-plugin-image` API.\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image <path>\n```\n\n`path` is not required and will default to the directory you're currently in.\n\nNote that you cannot pass additional flags to this command. It will automatically run the codemod against file extensions `js, jsx, ts, tsx` and ignore the `node_modules`, `.cache` and `public` directories of your project.\n\n**If you have a custom babel config for your site, run in the root directory, otherwise `./src` is sufficient.**\n\nNote that jscodeshift tries to match the formatting of your existing code, but you may need to use a tool like [prettier](https://prettier.io/) to ensure consistency after running these codemods.\n\nIf you need to run with custom flags, you can install [jscodeshift](https://github.com/facebook/jscodeshift) globally and `gatsby-codemods` in your project. Then `jscodeshift -t node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js .` will transform your current directory and you can pass any valid jscodeshift flags.\n\nAfter the code is modified, be sure to install and configure everything needed to use `gatsby-plugin-image.`\n\n1. Install this package\n\n```shell\nnpm install gatsby-plugin-image\n```\n\n2. Add `gatsby-plugin-image` to your `gatsby-config.js` file.\n\n3. Make sure `gatsby-transformer-sharp` and `gatsby-plugin-sharp` are updated to the latest versions.\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image. The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities. Ignored if layout = FLUID or CONSTRAINED, where you should use \"maxWidth\" instead.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **maxWidth**:\n  Maximum display width of generated files.\n  The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities\n  This only applies when layout = FLUID or CONSTRAINED. For other layout types, use \"width\"\n- **maxHeight**: If set, the generated image is a maximum of this height, cropping if necessary. If the image layout is \"constrained\" then the image will be limited to this height. If the aspect ratio of the image is different than the source, then the image will be cropped.`,\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `CONSTRAINED`: (default) Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n  - `FIXED`: A static image size, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overriden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.5.0-avif.11","_nodeVersion":"15.4.0","_npmVersion":"lerna/3.22.1/node@v15.4.0+arm64 (darwin)","_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"dist":{"integrity":"sha512-xeORcwueSiGxAsJuB+lmAvGjoGoSCLvlApFxwErJK9zVBv2I0zYDiQ3ZUvUeecqc/Js4W8cfnUvFWyNKBuERKQ==","shasum":"8955a74f6ef51480fabe02c8cad2c1b63ad900b6","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.5.0-avif.11.tgz","fileCount":118,"unpackedSize":1495710,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf4yyJCRA9TVsSAnZWagAAtw8P/jnMMQc+1q6S+hTG8lOu\nWRMWkyjK/Wp4/m9fwy/kxCpxJdACaAD1JuzopbWGui3UuHpIA7Ua/98v9dGw\nmj4KrVYMx+dcHO8vMkQ5RGmsUZhkGNBMa7d+0IrBHYt92mWsfP7LsVm8sj8B\n+lieXGZIYyOzJNzm00UOML/eLN1EPrbDV9kViQ2IMcz8Xv22XPdPD3sIZBkZ\nvMcd7Q4+ZS/umELSYviNPjbeeQf6b7BQi+SYiAcsi0x0vXwbNBG2d1hg61uB\n8dYeG7u3E/IOF9fUa3NKjvj2m20mCaOuAsllIkU7MIdveEpNAJSlhHWREPyh\ngeLYFLGkAI3UVX/Acw53wHm/WHZ4fzFczjs91UMHJ/f0S0KAaX+Zkc7qt1I3\nC3qTnKl5bFSJ/9ebDxeaU+Rk7ujPqePP8SHsz23rnAMJBUNGATuneHpi4SvL\npsz1yXPPAjX9dKAg5ig0yZ2Sm3PRog/p0H1Zihe0VQqh3f7hKXV2SMgmHNoL\nnkXsA2scAF5V9qsQ3JvTmX1nN+0cGyqm1mAubUFE1/VYMeJLN0wvitCl3x07\nSyTc+uC3hsVHp9plBSzcT3MBLBtG9NDp4OgXjUwQmxMZaOJk0ZU+YOxkFy/D\nYD32CibqEzgDwXvLjb+i1zHcBWTfory+GFc9pKSWE52MNZ/8gyXk88v+J2l5\nWaCY\r\n=W/XK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCqkOGe5n8hiLOGKOUPamTTEI1yCsik7IDxP4k2laW4jwIhAPwj7iFuwkJMalP3+irPs+0Ko4M0eLUfGy5Qa3LiX9eK"}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.5.0-avif.11_1608723593393_0.13767761087249952"},"_hasShrinkwrap":false},"0.4.1":{"name":"gatsby-plugin-image","version":"0.4.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.1.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.0","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.5"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.13.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.7.1","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"12a78aface75f7970c36a3d9c24a5d8dc5dd30c5","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.4.1","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-xDTlJsiaSrcKQKciRLEV7fTAnY7BzHOBURDc8TrCABFA7g3fY021Oc72E58DIQRbWFtE4fcCEOlvXbMy1BQRJQ==","shasum":"ff239ea4e70fd5c657f18c1c5ff511c079dd252a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.4.1.tgz","fileCount":116,"unpackedSize":1484411,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf43ViCRA9TVsSAnZWagAAnykQAIAF7WTMByEpca62INIL\nriQXhcTv1kaembaljHt8TNoMS3qLuobjxLNb1+7bEtRpUbOwcdAweZ44T0yp\nanb73lbFOtmFmqp0B18YSUlOmUo4VtkTfb3x1cldkh/Rx1v50PZXMeCJJ1NG\nCKoEM97ZckDlLGSHQYAd/A4PKOgE1heBZsv9kmU2UE9XjzPv7BLvdHcndilR\n17xuVfk3rflnlBdIXGE4EVcHNqovV2Kt/3nnWUNpjBiAFj+CnWGiAyozQFKb\nKksA9tCJMObmUf3xHkCS6vEbZ+CljutGzHyr6B3NJcGR+/Dp9qziQXxTnzwg\n2AaKRF4qlDfC4G1ddxtbhRsxNiXCKCitKRK3DU5zC+HLqxofHm401O9hwb76\nzaTU54+23A+A7J4IcZSB6j/JMgj5gQUXguWz3OWsGaIf8BSW4m3RhO7Bl7Fq\nLNkKYp8POpe2RxFp12Io2J8pR+gj63UvpS1oxyMUPiiKsSVwAgbe8bamwN4J\nq1Sscnzs6ubcGdtOGlhLvbAXzDlLXi8lFIdYVkqW5oQ4pzaNgafXDeuO98SB\nRCBokCJOxTGVVX5pSOZ5O5mKH08E/8N96zT8zorL+BniKGUQhFuyKkvpXU6x\nHsGSQVvDJ7Sre4tNNcHBrE5mLlgYyydrYZzj+aXWBjQrp/TmJOw5Iq3pt2Av\nDJUo\r\n=zCR2\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIE1lN8cYGQ1BlSeudNnWZfJ6OfmlWHBz5WrbnfxTIPKWAiAcXmhuiFWxUBIzQU6jqcqROXmndG/QfQY38jlsrYlt0g=="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.4.1_1608742242052_0.7553221976872448"},"_hasShrinkwrap":false},"0.5.0-next.6":{"name":"gatsby-plugin-image","version":"0.5.0-next.6","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.14.0-next.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.8.0-next.1","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"968914fee46688f41de3c80f5b32bd8fa908f129","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `constrained`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\nIf you need the image `src` directly you can import the `getSrc` helper function from `gatsby-plugin-image`. That function is equivalent to `data.file.childImageSharp.gatsbyImageData.images.fallback.src`. Note that `src` will be undefined if a .png or .jpg image is not available.\n\n### Upgrading from the gatsby-image@2\n\nWe've included a codemod to help you migrate to the new `gatsby-plugin-image` API.\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image <path>\n```\n\n`path` is not required and will default to the directory you're currently in.\n\nNote that you cannot pass additional flags to this command. It will automatically run the codemod against file extensions `js, jsx, ts, tsx` and ignore the `node_modules`, `.cache` and `public` directories of your project.\n\n**If you have a custom babel config for your site, run in the root directory, otherwise `./src` is sufficient.**\n\nNote that jscodeshift tries to match the formatting of your existing code, but you may need to use a tool like [prettier](https://prettier.io/) to ensure consistency after running these codemods.\n\nIf you need to run with custom flags, you can install [jscodeshift](https://github.com/facebook/jscodeshift) globally and `gatsby-codemods` in your project. Then `jscodeshift -t node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js .` will transform your current directory and you can pass any valid jscodeshift flags.\n\nAfter the code is modified, be sure to install and configure everything needed to use `gatsby-plugin-image.`\n\n1. Install this package\n\n```shell\nnpm install gatsby-plugin-image\n```\n\n2. Add `gatsby-plugin-image` to your `gatsby-config.js` file.\n\n3. Make sure `gatsby-transformer-sharp` and `gatsby-plugin-sharp` are updated to the latest versions.\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image. The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities. Ignored if layout = FLUID or CONSTRAINED, where you should use \"maxWidth\" instead.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **maxWidth**:\n  Maximum display width of generated files.\n  The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities\n  This only applies when layout = FLUID or CONSTRAINED. For other layout types, use \"width\"\n- **maxHeight**: If set, the generated image is a maximum of this height, cropping if necessary. If the image layout is \"constrained\" then the image will be limited to this height. If the aspect ratio of the image is different than the source, then the image will be cropped.`,\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `CONSTRAINED`: (default) Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n  - `FIXED`: A static image size, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overriden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.5.0-next.6","_nodeVersion":"12.18.4","_npmVersion":"lerna/3.22.1/node@v12.18.4+x64 (darwin)","_npmUser":{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},"dist":{"integrity":"sha512-LyC3a6MdMYy4BB98h8kJa6aAS4EB4/t8wfP6LUCvjprqrxktirDqgNmR6mTe/D/puxsohQwHI9EmPU9ol39h5g==","shasum":"154c1d957549e785e0d3028f3b1b554d17c72e16","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.5.0-next.6.tgz","fileCount":118,"unpackedSize":1496282,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf6z8iCRA9TVsSAnZWagAANMsP/iZ8gIF5uUMqHsdN7705\nvel9qaFLBEL8Cg9QsJmqSpGqiAh6+V5H0L+07EzG1KvMoDS+/y12iGtweJCq\n7wehB4TOuHK7uFHw5z6Y+OX6dQL6zjXH+V7Dq3R+A4j9aXVQi52CzucVViiz\nxucS2nQMt2mm1wbDCi8fS6v6+mk5zzBf41fcS8mEzQz0N8MOE6To1rc8tH6w\n6Wnd6rO6y4uE/YMboo+qQCVkuN7cTpmxfneNfjzqfr/NBBOZKLNHlxa0647y\n4Ux4tHVmdsMLyDJB9yCto81Iz0+FPTDvROcmojrBSP5Wh7JnEqJb4w5HXPAB\n7STSc1mFzRn20t/C0xx84BSK40irZrvecQMNmzlWfyVd36kXO1IOy0ONLDKz\n+3IQpWb9lTX0jLVCoxqN/lWa7XbrwiX38AMdZc74BpZ6pJ5N6BhwlW21ac2D\nQtydExoyWh5SwmdJFKb+jjKJ/b/gW4XABwmIfPuhDUp0A+pVXOXropLkdyWS\ns5q6sGmTgVv2o8CRxRWgMFF7T6XAudvIB+QffS7oh1/h8Ilj4SEG7gY1FE41\nmM8Akd6o7xLT/PIasVoZDhL7aMXcyZFg1ORYvbgXNlnCX5z01OiRSmu5FGYJ\n6SU0SyydSCWVDoU30IM/KaNpXC24uN7TGHl+pqkCcizzFdHgMxTB5Qa6738g\nyTua\r\n=fA/O\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD5Qx+UJAgKTgqb/DrDcO7e+g8tjBxLkPps89zMVtPR7QIgbUAdZQ9fnRkBI5GmVmlcxlbvtmjnG8c/Que/ZAwdFCA="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.5.0-next.6_1609252642319_0.58432267793596"},"_hasShrinkwrap":false},"0.6.0-next.0":{"name":"gatsby-plugin-image","version":"0.6.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.15.0-next.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.9.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"2059ead7ff0bcfa0897b1606cbfa559835b97f84","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `constrained`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\nIf you need the image `src` directly you can import the `getSrc` helper function from `gatsby-plugin-image`. That function is equivalent to `data.file.childImageSharp.gatsbyImageData.images.fallback.src`. Note that `src` will be undefined if a .png or .jpg image is not available.\n\n### Upgrading from the gatsby-image@2\n\nWe've included a codemod to help you migrate to the new `gatsby-plugin-image` API.\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image <path>\n```\n\n`path` is not required and will default to the directory you're currently in.\n\nNote that you cannot pass additional flags to this command. It will automatically run the codemod against file extensions `js, jsx, ts, tsx` and ignore the `node_modules`, `.cache` and `public` directories of your project.\n\n**If you have a custom babel config for your site, run in the root directory, otherwise `./src` is sufficient.**\n\nNote that jscodeshift tries to match the formatting of your existing code, but you may need to use a tool like [prettier](https://prettier.io/) to ensure consistency after running these codemods.\n\nIf you need to run with custom flags, you can install [jscodeshift](https://github.com/facebook/jscodeshift) globally and `gatsby-codemods` in your project. Then `jscodeshift -t node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js .` will transform your current directory and you can pass any valid jscodeshift flags.\n\nAfter the code is modified, be sure to install and configure everything needed to use `gatsby-plugin-image.`\n\n1. Install this package\n\n```shell\nnpm install gatsby-plugin-image\n```\n\n2. Add `gatsby-plugin-image` to your `gatsby-config.js` file.\n\n3. Make sure `gatsby-transformer-sharp` and `gatsby-plugin-sharp` are updated to the latest versions.\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image. The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities. Ignored if layout = FLUID or CONSTRAINED, where you should use \"maxWidth\" instead.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **maxWidth**:\n  Maximum display width of generated files.\n  The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities\n  This only applies when layout = FLUID or CONSTRAINED. For other layout types, use \"width\"\n- **maxHeight**: If set, the generated image is a maximum of this height, cropping if necessary. If the image layout is \"constrained\" then the image will be limited to this height. If the aspect ratio of the image is different than the source, then the image will be cropped.`,\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `CONSTRAINED`: (default) Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n  - `FIXED`: A static image size, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overriden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.6.0-next.0","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-E+Tswg71QJjQMnrJfS1GIXpxUQOXLF80CXXOmldmIFdthkWoEmkRYrl0HHr99sav1NOQxnlLLmLi8ckucbBYiQ==","shasum":"8ae88d4308d2afa653315399c0e451efc7e91727","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.6.0-next.0.tgz","fileCount":118,"unpackedSize":1498692,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf650QCRA9TVsSAnZWagAA+qwP/iPtU4WxrKa2d3LbBObf\ntEDnLTBJNrSp43pjZUvT95Mk3s19hJHRDaylnQbD6VnaVvqTnlzE37D0Djjl\nvYtpYG56bOB/gS9O63dfG5pXzDCy487+oj5gV7nnKRYOBV0izAwJPDIpjGYJ\nQgM3fZYUvWpV7nrIEAozoQUJ8ONzPdB/65/5N8KjqZ5Cjc70WlqgSCu8d9JS\nD9cOISHKwcI5+dvnWC5a9RmHR0FndGi3PBvPpPi9vcoD/+3SmAjWUr279t20\ngH7wqn/r6i9cxmiyh9bxO2iLDIpddXA6Bq1me/Y9QS53o/gNbkJXVFOTkkjz\n+wKDK01nYkr8MtW1o6Nix7aOL2VoPcKIGn8hYDd9xw8arcjTxe4fYTRrVvFq\nLWOaFtJyciLGN9U+Q+aajQf1whczP1zIxoTiazxa0pQIXYpFx8CpqvGoxJUa\nT2BOGr9n5FhPGr1HV1FGH9z2xpuLlCYQ6JatOGvRzoUrlHh1JZDeu1Z0ziOA\nO0LHnqXRJzsVTVtZxdWPGwVDOmIvWaPk+UOiu5Ixq5kIqyxaB0ucgu0lt61a\n51mQorWjQQrqzC0ElV+jnsQiz18Z/ZwyUI7TpIP9YDjA7r+UQKLg7aRlaWIV\n00iepkcKfqJ9EWGyIF7cwHNXXUXLIy0yh8QqcPJvEIQGvkYJ4HdvTP0+godo\nFHRN\r\n=jI+N\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEDDnwm3NeKvLImc/oOlabJLsq+yp+Hh+0H20GbGtR5jAiEAxxQrfOIez0nOTvbSaTXxJrzMD2nGYL2qp8c+wE8WVSo="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.6.0-next.0_1609276687780_0.6551388558908458"},"_hasShrinkwrap":false},"0.5.0":{"name":"gatsby-plugin-image","version":"0.5.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.14.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.8.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"f8cc2a3f02f621f20af9b60dda6f1980fbd37a05","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.5.0","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-tyGDzJpnRDU/uM9+W78gAQmKWFwxe+0l79rG7m60SAA0eQeWoklD5roKyWcp4WP/h/zDL2wVVPHu59/FT3CWnQ==","shasum":"0fb2e299f9213ee89774bf9f86dd21bba9e58192","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.5.0.tgz","fileCount":118,"unpackedSize":1503274,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf9L8oCRA9TVsSAnZWagAA6HcP/0H4ZGHgOgIja71Az/dE\nKMqSvuNngRptpCu9XtivaH5kG5bzTc7Pcm2lfiMWQrVBFtQzeHbSgy4Gl2st\nFvOFQjbAjg/86z59t4vjGBBq+i6uC9U1/LfjHDD688ULohYn/RK6Bgtznt6M\n520y/Ef7iNDtD2XBUbS2n2PkV66gVFGTyS/2RM19zJbcurodku2R4+FtuyUx\nMWly+FMbJLbwSsO4o4mlKl+x1Egq3CWVI+JCY7DM4+y6Hkaehq+eVdPH8Twr\n1b8vXB3zaGXtKnk1TmW3its3AihpjTlmo24beVHcDeso6yMjfYxr7Bgl3usX\nZb5qN/d1jAQyazVdIFLrBcsLK3lUacynpAUg9x3+0zAh4TcrorrAr7p+VVzw\nvIln/YyQsDpXRStGRjh3m/8qCHwN0rCs864cl8tkaaf1Uh37siUWH+StDoRl\nW6yE0C4QU6feLRSiY/HbbgQFvXP3gQ6J/TbOL930Yv/eipJONDX7N0QycyEA\noRFrUNiYvyO5O1zXn3mTGJrBnimyBSE97dcugiRnMFVuvMhecEJzcpiBWrS+\n7lAw9d5ayMT+uI0dTuZ6uq86sHcB7ld57nMYE6s0xpK9arY0kpuZxsyPiPuV\nzScElBGoJFK4YwkhhwUBrbtLyrXTedjoLD+GOfzgxKb6IN26dRbjoL6g0z7R\n5Bvt\r\n=e6n3\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDeVUf/cWHALfIcFJHXFP/kC436IgoDJk6XTokeGv6I5gIgVH7qNCYXLuQGcZWJyD2bfumEAZMVCfUE4gcCxGsUaKM="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.5.0_1609875239368_0.007233234816187428"},"_hasShrinkwrap":false},"0.6.0-next.1":{"name":"gatsby-plugin-image","version":"0.6.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.15.0-next.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.9.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"5e5c11259b1ab38a2125aaa97e8623bcd0d1cfff","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"constrained\"\n    width={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `constrained`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\nIf you need the image `src` directly you can import the `getSrc` helper function from `gatsby-plugin-image`. That function is equivalent to `data.file.childImageSharp.gatsbyImageData.images.fallback.src`. Note that `src` will be undefined if a .png or .jpg image is not available.\n\n### Upgrading from the gatsby-image@2\n\nWe've included a codemod to help you migrate to the new `gatsby-plugin-image` API.\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image <path>\n```\n\n`path` is not required and will default to the directory you're currently in.\n\nNote that you cannot pass additional flags to this command. It will automatically run the codemod against file extensions `js, jsx, ts, tsx` and ignore the `node_modules`, `.cache` and `public` directories of your project.\n\n**If you have a custom babel config for your site, run in the root directory, otherwise `./src` is sufficient.**\n\nNote that jscodeshift tries to match the formatting of your existing code, but you may need to use a tool like [prettier](https://prettier.io/) to ensure consistency after running these codemods.\n\nIf you need to run with custom flags, you can install [jscodeshift](https://github.com/facebook/jscodeshift) globally and `gatsby-codemods` in your project. Then `jscodeshift -t node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js .` will transform your current directory and you can pass any valid jscodeshift flags.\n\nAfter the code is modified, be sure to install and configure everything needed to use `gatsby-plugin-image.`\n\n1. Install this package\n\n```shell\nnpm install gatsby-plugin-image\n```\n\n2. Add `gatsby-plugin-image` to your `gatsby-config.js` file.\n\n3. Make sure `gatsby-transformer-sharp` and `gatsby-plugin-sharp` are updated to the latest versions.\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fullWidth\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed into the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(width: 720, layout: CONSTRAINED, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image for layout = FIXED, if layout = CONSTRAINED it's the display width of the largest generated image. The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `CONSTRAINED`: (default) Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n  - `FIXED`: A static image size, that does not resize according to the screen width\n  - `FULL_WIDTH`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fullWidth/constrained images, and `[ 1, 2 ]` for fixed.\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overridden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.6.0-next.1","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.22.1/node@v12.14.1+x64 (darwin)","dist":{"integrity":"sha512-Wu+Pc3FA/1glkqJDYd3saCmxEyMN4HHdHPhIScbESeVhtN8fQMROTGHqOFCQqZdykwvc4NhvNIwW9iBHFRntqw==","shasum":"b80e885abb50f73ad3a0854840a03ce8c26a81dd","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.6.0-next.1.tgz","fileCount":87,"unpackedSize":903081,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf/gB8CRA9TVsSAnZWagAAwrIQAI28GRuj2I1SH/Ra0w1q\nXtzQQws1DbhkCZ2Wy439s7eQZ7nVXfqxTLkjxSx4WCsi5yIB1fA1gPabAALM\nqpSgvXPyQPr9ECE0NTUuZiwePR7AmJxO5k3AHxVLQ5Kvi12LO1xWb/8cuOAT\nXTsvtTzWBo/ns3qTFqod3F+eQkNkWoenKFXvS7XosswwsCYylp0Ix3XZEnVk\nJYtvDAD6SAEVXCdoBa9uVknosSxQ6kG5f7no1JNnztj0cfFwP2006Zb3RyYd\naBHB4CxRzdGVjQTnCuU/usWoro6/CT4KQQnZ+C2DkQUdKqb+eMiWYUvfWE0L\nffDkekV2j/dzGqvTdWIoEwGi/81Qh8JdtamSM2qTQwmfm+DR38Quycs/VRoj\nsu/azpBQ58pnhl13gidwuXltUXSd2oj8CCc7fZmfFdxT8E1vpKKDyjt3IuBX\ngch0GQeeEEfcBCp3DCaE/ESQGc3Mri7qpzUyofB7Cw8f6L9Fg5DhQgGydppU\nEvAdavYvFLX0fYMrh2QM1V3FEyVEy3DuUsueV8MGS2+uxtar/Vcu02ZFfW5J\n4Zxw5E6YoVoCXlRZgIgRNa4r4k9HpRSu8EYOvC7f7553DzWOcsbNRqkSSXau\ntBog59VcdT+ciOSGBeg8bdmWhZEbVhMlWYyKrWufNLAFNiGsta8BKpEwKis3\nFjP5\r\n=MS2s\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDfS42Juq8b7oZ1cSLIsI2DkZvHqt5M4trQYNCEvNd7GAIhALlxd9WuFr2ZuMJLG2LdeCTT05OJb7IA9AmX+yCkSB8y"}]},"_npmUser":{"name":"laurieontech","email":"npm.laurie@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.6.0-next.1_1610481788110_0.9665151170258133"},"_hasShrinkwrap":false},"0.5.1":{"name":"gatsby-plugin-image","version":"0.5.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.14.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.8.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"c15af991c3354df6ee055c6a5b60c6b047bfaeb3","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.5.1","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-y/n0SXOLQvXQAVjZZK+RQcH9i2is9+qtfL6xzgQtba0WLGECdJ8bHY8xJBlSRtWLLoFVV906CmEJdWe7WqYIGA==","shasum":"90c743afd333095a9078d6487c22d29057278a31","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.5.1.tgz","fileCount":118,"unpackedSize":1515867,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf/tDXCRA9TVsSAnZWagAAPoAQAJJywgMblHFl+neiyJLQ\n8hPL/rvRzJ2PAIAxNCDxUBL+Cnu4Qjtw4/ZJ9/JHZI7z3mP5Dot0U9Lfpurq\noXoTyxGkCZdEoKcz/ECD7z0qj1D4b4LYyfwThIKEwyL/J1QX503IwdkZ9alC\n0wk2DWuUH3DQzzMb9xxGKhAZEUprhfUn1Vx83f+hgdPcHiNzyzs31eNS0AXy\nMD8qmJwf7alUljM4V70h/+AqvmRoupJYKcPS4EQzFhWmBMWP4REwK4j1dAW9\nHS0z8fR29Yv5u+tUh+AoWkUKSAJI11RZdlXjTftr8xdAVeLXocxpqT+2PtSw\n43iHX/tLE+Owwxmw8EdfX21YbbccaLUI3JKKjvwdTNSrony9ZMPyFrHysUYu\nBfbiCqQGcjrJuh0t/JKOeUY+1JTemWPQdgDIJXhA6boFoZyJ50GHoEb0TECg\n3fPsonNQRIp1yTiBcdAgJLjd/y0UnoV4nVK7MtD3U8tTgrb1vibbY7TkxqT0\nVQGvRW1LFiY1uNsoi4lkt8mYBk/dzdsv/0qeTAnatwek2DJ+bAVokJFFpc+w\nJR2WVe+nTApBz9f298TR15vZTpQ5q4MiFhLjsv/zfLo6Cddk47VpkhtrbWvZ\n2IWbz4710AcuxtPDyXhT0hvyhLS/uFpRl/LJ978i3URcoMBjBPOq0reajDwq\nDBsj\r\n=E263\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDGgYfqqoGy154QxZJethncRWqB/Mv6Di6XZtq5bXh3dgIhAMoQvnx2kCLZktanEba1CV9Jq0StHLD0f/k/fE8rMoYA"}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.5.1_1610535126451_0.14087046731024433"},"_hasShrinkwrap":false},"0.6.0-query-chunk-stats-base.68":{"name":"gatsby-plugin-image","version":"0.6.0-query-chunk-stats-base.68","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","build:server-compat":"microbundle -i src/components/compat.tsx -f cjs,es --jsx React.createElement -o dist/gatsby-image.compat --define SERVER=true","build:browser-compat":"microbundle -i src/components/compat.browser.tsx -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.compat.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","watch:server-compat":"yarn build:server-compat --no-compress watch","watch:browser-compat":"yarn build:browser-compat --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./compat.js":"./compat.browser.module.js","./compat.module.js":"./compat.browser.module.js","./compat.modern.js":"./compat.browser.modern.js","./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"2.15.0-next.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"1.9.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"ed19fa052a93e948b1135ac128cf5abec48752b6","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"fluid\"\n    maxWidth={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `constrained`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\nIf you need the image `src` directly you can import the `getSrc` helper function from `gatsby-plugin-image`. That function is equivalent to `data.file.childImageSharp.gatsbyImageData.images.fallback.src`. Note that `src` will be undefined if a .png or .jpg image is not available.\n\n### Upgrading from the gatsby-image@2\n\nWe've included a codemod to help you migrate to the new `gatsby-plugin-image` API.\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image <path>\n```\n\n`path` is not required and will default to the directory you're currently in.\n\nNote that you cannot pass additional flags to this command. It will automatically run the codemod against file extensions `js, jsx, ts, tsx` and ignore the `node_modules`, `.cache` and `public` directories of your project.\n\n**If you have a custom babel config for your site, run in the root directory, otherwise `./src` is sufficient.**\n\nNote that jscodeshift tries to match the formatting of your existing code, but you may need to use a tool like [prettier](https://prettier.io/) to ensure consistency after running these codemods.\n\nIf you need to run with custom flags, you can install [jscodeshift](https://github.com/facebook/jscodeshift) globally and `gatsby-codemods` in your project. Then `jscodeshift -t node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js .` will transform your current directory and you can pass any valid jscodeshift flags.\n\nAfter the code is modified, be sure to install and configure everything needed to use `gatsby-plugin-image.`\n\n1. Install this package\n\n```shell\nnpm install gatsby-plugin-image\n```\n\n2. Add `gatsby-plugin-image` to your `gatsby-config.js` file.\n\n3. Make sure `gatsby-transformer-sharp` and `gatsby-plugin-sharp` are updated to the latest versions.\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fluid\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed in to the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image. The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities. Ignored if layout = FLUID or CONSTRAINED, where you should use \"maxWidth\" instead.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.\n- **maxWidth**:\n  Maximum display width of generated files.\n  The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities\n  This only applies when layout = FLUID or CONSTRAINED. For other layout types, use \"width\"\n- **maxHeight**: If set, the generated image is a maximum of this height, cropping if necessary. If the image layout is \"constrained\" then the image will be limited to this height. If the aspect ratio of the image is different than the source, then the image will be cropped.`,\n- **placeholder**: Format of generated placeholder image.\n  - `BLURRED`: (default) a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a low-resolution traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n  - `DOMINANT_COLOR`: a solid color, calculated from the dominant color of the image.\n- **layout**: The layout for the image.\n  - `CONSTRAINED`: (default) Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n  - `FIXED`: A static image size, that does not resize according to the screen width\n  - `FLUID`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for fluid/constrained images, and `[ 1, 2 ]` for fixed. In this case, an image with a fluid layout and maxWidth = 400 would generate images at 100, 200, 400 and 800px wide\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overridden by any format-specific options\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to \"SVG\".\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.6.0-query-chunk-stats-base.68","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-0iLMGWodv3p9y628n/ALUQbfz0FMcZn5SxXdlL5VJkq1PVz09nTZzqOWkVKIpWkR75pQLmwD53PqHQItBxQmmQ==","shasum":"c59074c28c843803a887e49eaf5c2abb6e810fb3","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.6.0-query-chunk-stats-base.68.tgz","fileCount":116,"unpackedSize":1466491,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf/0VhCRA9TVsSAnZWagAAkIEP/16rLULHd0EwWSj0qCle\nwAvTEv7R+luA/SY9XZxk2Wwsw1FQtDhIFoNAo7LyHrQHR08ibK8+Q/mXc+/Q\nqjAmld5FsYfm7nXw3glZlE17JjgB3dn52pwHM43fGrtcJU51jvUSCamRlQwM\nbxobyMXgnvfrEv+FNL8cCVK6bxppiK2uK4w9ddajeopdrZ4zl2MdWgTQ5ym6\nzKHvYdjrLIrtMS0CRGcJE0OtyGQE0xW2cshNYoPj80McXTFcLec0yb3kGg8y\np5luCRlQmVO7khvncCGG0p87oaXrllB/V86dtHFFhsABAS/j39tlV5kOlAGx\nvVd9nXJTn03pSxExiLUnKxgp24jbUCL6rJu24XWnamONtgJzapBKq1R9Y8fV\nINvb8PONzZ6DeoG0lWCe7EkGerSHlma1jRLFH04yV7yKHFafzhv2CQduwnoa\nqhtBfd23wzy2VNFn9qShD1pyfKp3J+oyOz+DjxR9VCF27yuvkbsg6vsMJ7vZ\nWcN8VffAxFsK/SASexH6U3J8IaBlQTHWbO18zZJCYqVQRYX5kQpohG7rOOl0\nApus7rhloN8aSm0mvm6cHkMk7MFO8Y/BdD0WSWo6SGf56T66vkpMO43n1x41\nOMwwo/0w+pkvQ9W5KnO7Zu368YpzzOTR76HIP8Bh0ExaKHE4FQR50kq469yB\nfd9u\r\n=XJFN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGM9w0kBMFRQCYeEJ3qB7HIw3kV+57Bh4zdei4bWFxvsAiBK2IpY0hpPUMR7m/bpR1rLIdEcyZ7lSmb5XyIXs1fd4g=="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.6.0-query-chunk-stats-base.68_1610564961365_0.7525777606996742"},"_hasShrinkwrap":false},"0.7.0-next.0":{"name":"gatsby-plugin-image","version":"0.7.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.16.0-next.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.10.0-next.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"d4a8ad26215cc2189d6473a657e0ae83088effb1","readme":"# gatsby-plugin-image (beta)\n\nThis plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.\n\n## Contents\n\n- [StaticImage](#staticimage) - the new static image component\n- [GatsbyImage](#gatsbyimage) - a high-performance gatsby-image component\n- [gatsbyImageData](#graphql-resolver) - a simpler GraphQL API\n\n## Usage\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`:\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\nIf you're using the new `GatsbyImage` in addition to `StaticImage`, you'll also want to install `gatsby-transformer-sharp`.\n\n2. Upgrade `gatsby` to at least `2.24.78`.\n\n3. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    // `gatsby-transformer-sharp`\n  ],\n}\n```\n\n# StaticImage\n\nThis component is a new, simpler way to use Gatsby's image processing tools and components without needing to write GraphQL queries. It is designed for static images such as logos rather than ones loaded dynamically from a CMS.\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\nThe `src` prop is relative to the source file, like in static HTML.\n\nYou can pass the same options as those available via [`gatsbyImageData`](#graphql-resolver) queries:\n\n```js\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage\n    src=\"trex.png\"\n    placeholder=\"none\"\n    layout=\"constrained\"\n    width={200}\n    alt=\"T-Rex\"\n    transformOptions={{ grayscale: true }}\n  />\n)\n```\n\n### Are there restrictions to how this is used?\n\nBecause the images still need to be resized during build, the props must be able to be statically-analyzed at build time. You can't pass them as props from outside the component, or use the results of function calls, for example.\n\nThis does not work:\n\n```js\n// ⚠️ Doesn't work\n\n({ logo }) => <Img src={logo}>\n```\n\n...and nor does this:\n\n```js\n// ⚠️ Doesn't work\n\n() => {\n    const width = getTheWidthFromSomewhere();\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\nYou can use variables and expressions if they're in the scope of the file, e.g.:\n\n```js\n//OK\n() => {\n    const width = 300\n    return <Img src=\"trex.png\" width={width}>\n}\n```\n\n```js\n//Also OK\n\nconst width = 300\n\n() => {\n    const height = width * 16 / 9\n    return <Img src=\"trex.png\" width={width} height={height}>\n}\n```\n\n### API\n\nThe only required prop is `src`. The default type is `constrained`. The other props match those of [the new GatsbyImage component](#gatsbyimage). You can also pass in options which are forwarded to [`gatsbyImageData`](#graphql-resolver).\n\n## GatsbyImage\n\nSpeedy, optimized images without the work.\n\nGatsbyImage is a React component specially designed to give your users a great image experience. It combines speed and best practices.\n\nNote: GatsbyImage is not a drop-in replacement for `<img>`. It's optimized for fixed width/height images and images that stretch the full-width of a container.\n\n## Table of Contents\n\n- [Problem](#problem)\n- [Solution](#solution)\n- [How to use](#how-to-use)\n- [Types of Responsive Images](#three-types-of-responsive-images)\n- [Gatsby Image Props](#gatsby-plugin-image-props)\n\n## Problem\n\nLarge, unoptimized images dramatically slow down your site.\n\nBut creating optimized images for websites has long been a thorny problem.\nIdeally you would:\n\n- Resize large images to the size needed by your design.\n- Generate multiple smaller images so smartphones and tablets don't download\n  desktop-sized images.\n- Strip all unnecessary metadata and optimize JPEG and PNG compression.\n- Efficiently lazy load images to speed initial page load and save bandwidth.\n- Use the \"blur-up\" technique or a\n  \"[traced placeholder](https://github.com/gatsbyjs/gatsby/issues/2435)\" SVG to\n  show a preview of the image while it loads.\n- Hold the image position so your page doesn't jump while images load.\n\nDoing this consistently across a site feels like a task that can never be completed. You manually\noptimize your images and then… several images are swapped in at the last minute\nor a design-tweak shaves 100px of width off your images.\n\nMost solutions involve a lot of manual labor and bookkeeping to ensure every\nimage is optimized.\n\nThis isn't ideal. Optimized images should be easy and the default.\n\n## Solution\n\nWith Gatsby, we can make images way _way_ better.\n\n`gatsby-plugin-image` is designed to work seamlessly with Gatsby's native image\nprocessing capabilities powered by GraphQL and Sharp. To produce perfect images,\nyou need only:\n\n1. Import `{ GatsbyImage } from \"gatsby-plugin-image\"`.\n2. Write a GraphQL query with all necessary fields needed by `gatsby-plugin-image`.\n\nThe GraphQL query creates multiple thumbnails with optimized JPEG and PNG\ncompression. The `gatsby-plugin-image` component automatically sets up the \"blur-up\"\neffect as well as lazy loading of images further down the screen.\n\nMake sure you have set up a source plugin, so your images are available in GraphQL queries. For example, if your images live in a project folder on the local filesystem, you would set up `gatsby-source-filesystem` in `gatsby-config.js` like so:\n\n```js\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: path.join(__dirname, `src`, `images`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## How to use\n\nThis is what a component using `gatsby-plugin-image` looks like:\n\n```jsx\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default ({ data }) => {\n  // You can use the helper function `getImage`, which is equivalent to:\n  // const imageData = data.file.childImageSharp.gatsbyImageData\n  const imageData = getImage(data.file)\n\n  return (\n    <div>\n      <h1>Hello GatsbyImage</h1>\n      <GatsbyImage image={imageData} alt=\"my gatsby image\" />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED, width: 125, height: 125)\n      }\n    }\n  }\n`\n```\n\nIf you need the image `src` directly you can import the `getSrc` helper function from `gatsby-plugin-image`. That function is equivalent to `data.file.childImageSharp.gatsbyImageData.images.fallback.src`. Note that `src` will be undefined if a .png or .jpg image is not available.\n\n### Upgrading from the gatsby-image@2\n\nWe've included a codemod to help you migrate to the new `gatsby-plugin-image` API.\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image <path>\n```\n\n`path` is not required and will default to the directory you're currently in.\n\nNote that you cannot pass additional flags to this command. It will automatically run the codemod against file extensions `js, jsx, ts, tsx` and ignore the `node_modules`, `.cache` and `public` directories of your project.\n\n**If you have a custom babel config for your site, run in the root directory, otherwise `./src` is sufficient.**\n\nNote that jscodeshift tries to match the formatting of your existing code, but you may need to use a tool like [prettier](https://prettier.io/) to ensure consistency after running these codemods.\n\nIf you need to run with custom flags, you can install [jscodeshift](https://github.com/facebook/jscodeshift) globally and `gatsby-codemods` in your project. Then `jscodeshift -t node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js .` will transform your current directory and you can pass any valid jscodeshift flags.\n\nAfter the code is modified, be sure to install and configure everything needed to use `gatsby-plugin-image.`\n\n1. Install this package\n\n```shell\nnpm install gatsby-plugin-image\n```\n\n2. Add `gatsby-plugin-image` to your `gatsby-config.js` file.\n\n3. Make sure `gatsby-transformer-sharp` and `gatsby-plugin-sharp` are updated to the latest versions.\n\n## Three types of responsive images\n\nThere are three types of responsive images supported by gatsby-image.\n\n1. Images that have a _fixed_ width and height\n1. Images that stretch across a _fluid_ container\n1. Images that stretch across a container but are _constrained_ to a maximum width\n\nIn the first scenario, you want to vary the image's size for different screen\nresolutions -- in other words, create retina images.\n\nFor the second and third scenario, you want to create multiple sizes of thumbnails for\ndevices with widths stretching from smartphone to wide desktop monitors.\n\nTo decide between the two, ask yourself: \"do I know what the exact size of this image\nwill be?\" If yes, it's \"fixed\". If no and its width and/or height need to\nvary depending on the size of the screen, then it's \"fullWidth\". If you want it to shrink\nto fit on smaller screens, but not to expand larger than a maximum, then use \"constrained\"\n\nIn Gatsby's GraphQL implementation, you specify the type of image with the `layout` argument\n\n## `GatsbyImage` props\n\n| Name  | Type            | Description                                                                                                                |\n| ----- | --------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| image | object          | The image data object returned from a GraphQL query                                                                        |\n| alt   | string          | Passed to the `img` element. Defaults to an empty string                                                                   |\n| sizes | string          | An HTML \"sizes\" argument, which is passed-though to the image. Can be left blank, when it will be calculated automatically |\n| as    | React Component | The component that wraps the Gatsby Image. Default is `div`                                                                |\n\n# GraphQL resolver\n\nWe have added a new `gatsbyImageData` resolver to the `ImageSharp` node. Unlike the existing `fixed` and `fluid` resolvers, this returns a\nJSON type, meaning you don't specify the individual fields, but are instead given the whole object. This is because the object is then passed into the `<GatsbyImage>` component. The API is like this:\n\n```graphql\ncoverImage: file(relativePath: { eq: \"plant.jpg\" }) {\n  childImageSharp {\n    gatsbyImageData(width: 720, layout: CONSTRAINED, placeholder: TRACED_SVG)\n  }\n}\n```\n\nYou then use the data like this:\n\n```jsx\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.coverImage)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\nThe optional helper function `getImage` takes a file node and returns `file?.childImageSharp?.gatsbyImageData`\n\n## API\n\nThese arguments can be passed to the `gatsbyImageData()` resolver:\n\n- **width**: The display width of the generated image for layout = FIXED, if layout = CONSTRAINED it's the maximum display width. Ignored for FULL_WIDTH images.\n- **height**: If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image. Ignored for FULL_WIDTH images.\n- **aspectRatio**: Forces an image to the specified aspect ratio, cropping if needed. The value is a number, but can be clearer to express as a fraction, e.g. `aspectRatio={16/9}`\n- **placeholder**: Format of generated placeholder image.\n  - `DOMINANT_COLOR`: (default) A solid color, calculated from the dominant color of the image.\n  - `BLURRED`: a blurred, low resolution image, encoded as a base64 data URI\n  - `TRACED_SVG`: a single-color traced SVG of the image.\n  - `NONE`: no placeholder. Set \"background\" to use a fixed background color.\n- **layout**: The layout for the image.\n  - `CONSTRAINED`: (default) Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.\n  - `FIXED`: A static image size, that does not resize according to the screen width\n  - `FULL_WIDTH`: The image resizes to fit its container. Pass a \"sizes\" option if it isn't going to be the full width of the screen.\n- **sizes**: The \"[sizes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\" attribute, passed to the `<img>` tag. This describes the display size of the image. This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image container will be the full width of the screen. In these cases we will generate an appropriate value. If, however, you are generating responsive images that are not the full width of the screen, you should provide a sizes property for best performance. You can alternatively pass this value to the component.\n- **formats**: an array of file formats to generate. The default is `[AUTO, WEBP]`, which means it will generate images in the same format as the source image, as well as in the next-generation [WebP](https://developers.google.com/speed/webp) format. We strongly recommend you do not change this option, as doing so will affect performance scores.\n- **quality**: The default quality. This is overridden by any format-specific options\n- **outputPixelDensities**: A list of image pixel densities to generate, for high-resolution (retina) screens. It will never generate images larger than the source, and will always include a 1x image.\n  Default is `[ 0.25, 0.5, 1, 2 ]`, for `CONSTRAINED` images, and `[ 1, 2 ]` for `FIXED`. Ignored for `FULL_WIDTH`, which uses `breakpoints` instead.\n- **breakpoints**: Output widths to generate for full width images. Default is `[750, 1080, 1366, 1920]`, which is suitable for most common device resolutions. It will never generate an image larger than the source image. The browser will automatically choose the most appropriate.\n- **blurredOptions**: Options for the low-resolution placeholder image. Set placeholder to `BLURRED` to use this\n  - width\n  - toFormat\n- **tracedSVGOptions**: Options for traced placeholder SVGs. You also should set placeholder to `TRACED_SVG`.\n- **jpgOptions**: Options to pass to sharp when generating JPG images.\n  - quality\n  - progressive\n- **pngOptions**: Options to pass to sharp when generating PNG images.\n  - quality\n  - compressionSpeed\n- **webpOptions**: Options to pass to sharp when generating WebP images.\n  - quality\n- **transformOptions**: Options to pass to sharp to control cropping and other image manipulations.\n  - grayscale\n  - duotone\n  - rotate\n  - trim\n  - cropFocus\n  - fit\n- **background**: Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio.\n","readmeFilename":"README.md","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.7.0-next.0","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-tC+VS2lD6TcIZuRciVBuyO35/X3HAWVvDR7j198TDPpD+yYMIY0eDOytKohghhjqAAMpebBWsItIv1qsuMUrhQ==","shasum":"25197af0594899a035e4625d42b261ddd5fba00a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.7.0-next.0.tgz","fileCount":87,"unpackedSize":908966,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgBeC8CRA9TVsSAnZWagAArOoP/juER7myZ6WI6aaKjl0X\nYQeg46bkIPRQV/xQJ4PX8wtUVaMt3xeKxXR5lMzcAgziXEyZR1Drm80YZy8v\n1AaKfkMSrxQnFEMyph10ulmSAZ/QsGCb0giZRtiR9dQrprui9gibrwijmmy0\nAxYGv1M3gWyR5CM1Zl3b/FuGKggykpQj6Ri1G0u/Z2jb4wEQnvXeusXJwkAG\n4OwRb4qIsl/1CQyVYbREyQ1AfzV63Mr4FH5Knd57m+pBHB+dUCNxTjja1MQu\nay8r0TxOZVr0rBwscYh6Lal7Jglx8NNop8typo8JhyM9pq2QoRRTy8mjUICo\njkSFcHSo9ET7e6AlPVBhsxcuYDvDYynC8uyih/FlbyHIe3kDbFvCE7K4pZY7\nVKhyLQKFEw6XW/XZtPab8Xsgd4QG67z5o2trrt9sDUjmWwKI0UawahuAfBR5\ncvNiMy98mcvao4jQ+iArT/oTaBOHI1/fvK/H9p7YkkpVKEMlVRNIZihu+L9Z\nJHjhRLfb8vJREzpR5sTIyxIW/ZsIn0KHXTv4NQpeX89ZydlLLh382TrwrMSp\niHegJG8NhxRmK/0r4XSnnJOFqj6hOsMMIfcWYD4GJH97UUwRQOTIwo2+maLE\nlEmKTYiq6c9268DeIU25B+CkOmfafpesmQOd77xyP7I7IS9MCTYJCalI2wyW\nfili\r\n=TjHx\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFYQ23DEXjpMMP2RB917okb/VIFYB0J3A00GKoSOOwVvAiA7qGWdJlPf8Fa1J2L0NSZvDOWuuZz5dzN7i4NBVqD6eg=="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.7.0-next.0_1610997947890_0.7017703229516272"},"_hasShrinkwrap":false},"0.6.0":{"name":"gatsby-plugin-image","version":"0.6.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.15.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.9.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"fbc58933c6a6d5d8837e36104fdb74a0cb02163d","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.6.0","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-s+I37DKdXcJlXJjQGcAuVDujfPiXwlJrYRhOGKGrmRF1xyuOk61hZbqJnomXo4/BaaldLu3GXFRn0iTPL+V1VQ==","shasum":"04618dcad79f494e1a755a470087976a7187fdad","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.6.0.tgz","fileCount":87,"unpackedSize":908930,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgByjUCRA9TVsSAnZWagAA5xoP+wfSHgI1xCF4DnWrOyMO\ntJnO8UGqlucJTDjzCOLbaZYw3HFDr51fhyyZQPeXc/yquqaiuFiKajfj+txI\nfw62owNKMSl+PKhW7F0rwSxXkNPNyQ+CPnVoS7ZL9uCM2RAj1H1pF5faj4MW\nm+J97jDfw7a6HE9T/g3xXX5snNv+yxFF0ckqD2RR0fpA/INqOgm4sECmWkDt\nQSx6UBXfIqBfg3mUwoMLKgapulRO6vB+y4jbmkiIf87nqkZBp3HQmizIESGg\nRaxi1oq5un52T778ZUCWQFsO07zwJWqqoTEnpca8Bwu/cLVyaTsjvX4HRMSc\n+xyvdy4IIyXYKtDMkIjxlIrn7bUmVTmdxtG8BEKUy/t0AtItFbv0aB23igN/\ns4uLxKOi4myQcyK2E52XZ8Or4urOMHiop30g4v/9Kt+CO+sXDDQHUQ9iRO8a\nG8MVpOv1A/2EvAr+atXTQRSOQdS3NWvZLRpam2WOcVdGo6slH9ak7bOmihF0\nT60cs40gDld8QPokC1yELbhIiwwngcUAMJfcuri7VcMCYEP92RzQuyNiGIu4\niZrQXLzV03CsGpTZ5N0Azq2LFyDBsILUToTsf8HmmQmqrrAALG4QdD7GXS6J\nrZ/ALPTsw4e7ODEmukdIJ4EmhbIlfOn2a6CneA7ZaEEz+sIn/SLtK+WTWlyt\nxgc2\r\n=Saov\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBqG9zR+TjOkyi4WPnC7Kb88nVHtghw72pxfhzHYJL+/AiAHt+lk9TPwGe9AwLnLQRWlRjk7Z2GjEV4eGnV3TRekqA=="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.6.0_1611081939982_0.1362116352183349"},"_hasShrinkwrap":false},"0.6.1":{"name":"gatsby-plugin-image","version":"0.6.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.15.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.9.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"b6cac825e2044a9ca793fe057fcc6593d8f27d20","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.6.1","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-NjsTegL0R1uoRcgdFWrI0/gYxm871c1hYoh6vzt2UYlrId2r6tdjtQjsLxF6SsDql+hIyAf+l2zfNuCpGYfzBw==","shasum":"3291f67036ed09788228d52bbdd4eb285f82aadf","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.6.1.tgz","fileCount":87,"unpackedSize":910273,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgCGc2CRA9TVsSAnZWagAA650QAIc6rUixV4gEuTIUhlkT\nUYrqMQTdL6SYpHp2FSqJuZWOmyhONLZwYZZQpL4HYxTlSt/tOO/YDF6xa92j\nV+luLHOqBy2VgcPdLoIIIeqL6QvnZQ2PvBB2xoXe3tpNJPqh0BCgfNh8mQwM\niIZGntHkONWIvEzPi8dwARXxmBcoTdCd/DWN5NWYZxpkvX2NlSeAKru/ot44\nlERUpLP9TPmpL7OJ1/Xb/Uei/eTwCPdaQDzAy+SujYy3XVu3wJLZZfiz8m35\nCpXjM+Aheb38o+XEqrdkIpQ/sCQoJQAUUKCCH7ekE3h1eauQ53zI9C7NacBE\nFBmTJok0VwB/pIzQSrE4fMXEk+F+LRYd31MfaFwoliJJxY35ttlhuieQMqQg\nVOSFc5KmXVWhOyPgwJNOC4LgU0fDjH519uIk0/6HVqcoPf28fktpdY+KMWun\nCFq8r2BMsiPlQ7Upl/nZh4JYi+Y+LIIwRGK5x+u/B0Js724L3Tl9oMQ4nEOe\nDrozUoMPIFgOeQk5SZ9Golc5MLWGVmb7rZHaJu39AkwNvqcYEmBSTGImdJtU\nLiexF9rFYGW2p7Dt31Fw8Q4CclkwNCFyjPP0+aJ5+69I/N3MV++REQulvCre\nHRpI3PHmCrFttYcxGooJKH0Va9gElDcTCwh/pSkDRQn32GdlxPX58IqAIq8k\n3kAP\r\n=t1Nk\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDvZmSwxFPu/TgWzas/YFeAiHrnj8l+VLzp58hpOsV9JAiBgYH5ig2T8pnWCsUxoEVruwPQgZ2em31PkGa754+EsrQ=="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.6.1_1611163445763_0.5308870637725753"},"_hasShrinkwrap":false},"0.6.2":{"name":"gatsby-plugin-image","version":"0.6.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.15.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.9.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"3c8c67447545d1a4395e67848d10a2d50d3f4144","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.6.2","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-0sNwZhP2QVqkohH+taOp5cq/Pw9+pRGaa8GRrVII27snhI+ml5LyrxQN2dtd8jfU0diP/UNT0GH/VbXg6Qs12A==","shasum":"cb4efc82671a26001acb071e05f99fa0d2b592eb","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.6.2.tgz","fileCount":99,"unpackedSize":918736,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgD+CJCRA9TVsSAnZWagAA6AYQAJ6R/+R/9jLBuV92FR6b\n7MMhphAFSwBp7/A3B9mT2X3WXyV215CmRthaCXzo301IZfgdgYRFqEWrg3zy\ngJrjfg0orGWTeJwm2cADzIlGBGtP7f6Oxt1xK5Mo9ys7X4O8QUIltu3e8/nR\nWvJMBAwI1hp/1kZB/QePwMzuxtMe1aCG6karkEa2xArWfqtKU0dkIqcAQLWu\nAv0+NTV/R9pg3jk1bqxGB7NGDvpIJiRUc6335FTGmOb9V+7xpY3tzYaB8RjW\nhCxkhyH6geb/fZNeXuRLTqeVve5WmJAmrELWskL0MyBE0oXKYPzOeQ1MPZvu\nrwxK4T7kwSFA5RL+rqK03oQzhBGOplMf8zlwx5SVAFU20bGcS3ZaS3BUOYHh\nZ/c40ZdLTSp4a/xQaUXyryMrZCwPC6cAVuyoGa7425at7Kkc4jYw5I/MvbHY\nEAREllEdYWwsp/j9/CC5to8Mh1CUmiqETAc4nYAwtdgRslG8F+lRl3GOTI2O\nfUilsIeHcOSgIb4rs7uh1Zmgqtt2oPESigUo6DKLKruRej9imG3uFxkJxlC8\nfuf58/oce5+IAHcKc3qSf0Z6jcAbFTsFVbMuGubJkhTPGEM/xmNe9Fu3FZZg\nUUhhlLPAPQS7VQVuEAQM57CzodyjULFrqgMZBb36vO6LL1AiDcKknKQ37yVd\newuS\r\n=IZf1\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCXtkdInm47J4WkYR5Tv8O+i4IGkqKnyMudSEpQ9zbJMgIgFWuyfScYCb2iQGX05CdSPd9XYy7GRgBQiVYLJmRL5Go="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.6.2_1611653257157_0.8723173905817181"},"_hasShrinkwrap":false},"0.7.0-next.1":{"name":"gatsby-plugin-image","version":"0.7.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.16.0-next.1","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.10.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"7ce988eee6479c531999d422875d878d64cc9463","readme":"# gatsby-plugin-image (beta)\n\n_The new Gatsby Image plugin is currently in beta, but you can try it out now_\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.7.0-next.1","_nodeVersion":"15.4.0","_npmVersion":"lerna/3.22.1/node@v15.4.0+arm64 (darwin)","_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"dist":{"integrity":"sha512-F+x/KXFv/Pogu8ClF6P8g741Vpkw22pEk82yR6Ud1as7Gvo/6OMKYemfkeFpA6zz7gEXTFHt9C0AQSh2OkrXlA==","shasum":"09d4d7ac1b8030e176e13f3cf432d22baab73f58","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.7.0-next.1.tgz","fileCount":99,"unpackedSize":922742,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgEET1CRA9TVsSAnZWagAAJ40P/3IUOM/DJoBhUgiWBsm8\n+EgrWh7MJjloJW9thdweBtFUzGmjfOx0f98B/eZDM0KMe3Ci72PSf6Pipg/0\nKF8lyneZA12Jszt2WvIkeoibxgMp87KkpSBDGLsFwDjBbKaqB0KxvUr8idWp\nOcTSRYQFsCtuzXroSB0rd+12Gj/NbU+yTpJpzZTdvZzSMqS+De6J2dDLhyKG\nN5JahztDtxhIUfxSGxd2sH7kwO81KRkCe48GDzRD6CUm7a0B0EVP4sp12067\nFt8u29LSUcMOyb+8FcALED4UYYqUGGJ3Nlb764nuM1N84POak/wYcCvvvIlD\nR6PxyVyUod4UaF544f3B8xhMPHx8dRsBXy617MSU/vZXk+iffTp4r0c/MNvl\nh2D5XLm/ov+goaKMAdYL/QBp27z0bGAgvkI41Qa+d4RBDHD6VFUqE/G2VECa\nzYALK79Ig7GhV7NKmhsbEYFr8uAK+lEr3sE70q/2G9ENeNJUiF9jw9PT3efO\nRiz1GqNKEHfu6jrI7dHQgSpe0T/arkif/48FF6V0dLydWMinZ/HR8FXyOao+\nw5Y8ENf4Sn0lAoJhNH38jpZsKZmSCsZ7z/6Dlk9ctSJfaJjm5coOsRPucTkp\nw7oefCXscQkB6udWTxLpwUbyDOu3olEqDdAB+CJoSFKJmW+kbo0wHZJtki7u\nvgMi\r\n=MNeQ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHr4xraL54oDVm4Dyy38gXOCHxv4DnuO+M6wMQQFjKYeAiEAia1WqHysWrjjOccpJCQ1VhZRxQyE0klVYA9NsE6p5Q4="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.7.0-next.1_1611678964688_0.5655300781924679"},"_hasShrinkwrap":false},"0.6.3":{"name":"gatsby-plugin-image","version":"0.6.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.15.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.9.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"4e4b1edb216aac131040097ef8465b05cd8cf87f","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.6.3","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-k57BD+mcgFTEcZM6za2LOaXPIIDhF0GcMLGK51sM45EcuBT2t1gI/Jzm7do+u78JgXYNxLphRYeYlCvrg6BSww==","shasum":"6afdc11b4f289748fbc8de49120c75f618a3a9ff","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.6.3.tgz","fileCount":99,"unpackedSize":919280,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgEn1iCRA9TVsSAnZWagAA/OsP/10Vlf07xvjU3ZTF/27W\niTwpyf1Wrz5zEq5YY3o4Pt3OWA4UB1k2hhrr6CFEj6EbltMdztYAdXDztDZd\nVs8zucOdzXYIqL8cMIELMIkI0e/bLlLys26//PCTRO5DHp2rGMRU3jchvDZG\nxNmrOkJueZY8lCYSn4U7+q2SBkdBo8QmUcOmAVusgX3v6ZP/zZ8YM+Xd8QeA\nJusmTsIgLBOUBoR3PJPJhNSbCrkBYF/MTpfF6TgzA0XYgX3YDaPwjiEfI3LD\nEXcHz5BnbPzNd3gmTNxjkFOi47kgMbltGMxCSjaZSV/bb2cqsq1INfUPCkqD\nNzTcWo+dDej+xF8Yj2lBTDiJooipNHCrbTf39ck/jCxRdFShxTUrrACibLRG\nRBMnqQF7O+1J9axg32SayBb8tFByS6P3+VDS5rns8EVFyMRVYRQ+cjxfIfTN\nZLT8TFcWbpUqEpXGPA3qWt/iKEGMLA2bZzG7846CwAB6YRzhkCw3Zm3lG3lz\nxw5lLLl0TWZ8p7KSa+h0MvIIDu3c1SZ3BfFKYEkH6J9s5D+WK2LTmwPgPAGL\nAQuL92ds+9rYxgR+W/vslptBp8Qw7EXT2VpTjrXLURDUPZZL5cM+GtsJ96w8\nHiVmFHbKdh3u5wRh9w+ul36RoqQwTF+I4OrpzDTugsYuOgqhmmmcne3o6Zh8\nohYw\r\n=BiEe\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHayBVa80ICnaSJ1gLTgqsGKqATAuzN6rHWcUU1woK5pAiEA/NJOrPuFsqhi09Hpp0xLXhISxLNyOjALAYvtUR9rzf8="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.6.3_1611824481824_0.8198508033650129"},"_hasShrinkwrap":false},"0.8.0-next.0":{"name":"gatsby-plugin-image","version":"0.8.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.17.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","fs-extra":"^8.1.0","gatsby-core-utils":"^1.11.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"1da331a5352e3f7cb18f69050b7199481d85fbcb","readme":"# gatsby-plugin-image (beta)\n\n_The new Gatsby Image plugin is currently in beta, but you can try it out now_\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.8.0-next.0","_nodeVersion":"15.4.0","_npmVersion":"lerna/3.22.1/node@v15.4.0+arm64 (darwin)","_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"dist":{"integrity":"sha512-vMQGWzDG+BWwbWM+rRAyoMTXHZyLss4wM/3q2scxmgBv20Y3jCMkyhbCl5cHjW2IZCJRD0vG/UvgcyFagV9zZw==","shasum":"61a399c4cddf9c170769a8d561e4c3c9d60c26be","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.8.0-next.0.tgz","fileCount":99,"unpackedSize":948381,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgEuYNCRA9TVsSAnZWagAAE1oP/R9ujFpiqmrsN2gGH+QJ\neD+GRjIiZi15TUyPMOZz4gHvw0D9VpQeDRzUFVLmCZkyYTph52Qb/2ksOAqP\n3BTlBZMegucFMKxYa32NDS2Gc2zoE9dGLOimlDUpr0WdVb5TEF8e3eOyjG9l\nOH3zyDeRy5n1NovdF0hDE+GmkOO/eyMxO8EcR6LyvhQHaYQUUVQP2Gb1URdL\n3+1RJq/sDjQH9Oc/Qx0zVHnuLsJHjMIP4OLce+cDTsUOF5N84Ru9l0ZZxe1P\necdMfStFK6qPv2+EukQfEy6NBEXONFwjAED4TfoiaHEzq7NBzg0gcJ93Lq6c\nH0dUm/TwVVKrBm5vZQ9IFkI44NUgwrx6bbdaoS7E4aqmODtuXir5WDe5WG7O\nDM2BJLKBDRkbJBMgIxfWaRhXpevYGl/0vjKAbteuj2TnbiXnqsec3Zi+0UGu\nfdIZ3G1OpZZhknABeHaZqJxzrieKjKR6Tnlvhn3kJfix/D4rF0zsUDi03CcU\n0KztWemvkSYIINVUtQuPHpbsLPZ/I8pdcUEvIWHx+En1xk1fX9fCHyx72nVb\nyntpPx/JY3jvpU25fnu5F33Lm5Y9+JR1VMQmjcFH9tMDQNOyLiEglJivgwhk\nWnxl67eh29pWP6iT06zDmhCl4su7B4+5IBqjafzSzQYxl02/72mKiBnnrjOX\nUSG2\r\n=8/o0\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCD6k5gEEjBLXFgvjyG6a4s7M/n2tcVwMkmxpUoHnE9ZAIgc5PkrGfz4Hfv3ufcMp4ry4sZzL2iy7mxyFR9RNFtrSM="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.8.0-next.0_1611851277152_0.5016024919976987"},"_hasShrinkwrap":false},"0.6.4":{"name":"gatsby-plugin-image","version":"0.6.4","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.15.0","camelcase":"^5.3.1","chokidar":"^3.4.3","fs-extra":"^8.1.0","gatsby-core-utils":"^1.9.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"a777f9fb9a249553f2b21e94b24bfb4d3eabedae","description":"This plugin is a replacement for gatsby-image. It adds [static images](#staticimage), and a [new higher-performance gatsby-image component](#gatsbyimage). It also adds [a new GraphQL resolver](#graphql-resolver) to gatsby-transformer-sharp.","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.6.4","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-Bxf3KZ1dk/Fvz4Ag/b8/5fcQo2QyT9FATSvjvI+RH0h5G6CWgz9hCytjZo4nT/0Yf4UwWv3c5+B5J1UwbbxHUg==","shasum":"2fa15e736281e831e215cff792bd1f2aad3520ba","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.6.4.tgz","fileCount":99,"unpackedSize":919685,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgFDxICRA9TVsSAnZWagAA+qgP/26ME1Ys0w+Qgowyvche\nKyqzuj7mMPHhloHNkjNuasJtWqwL5OKdMJxZQWJWR5w+qqYcf009BRfiajQh\n9xX93rNndkdpCXllFUVzLsYRuYHQPjSFzFuN22b4I1h/IseWJDY8+iDoq6lQ\n13LSEuY+49TBFUrtr65OH0AykYj6pAs/J/fSC14KPBqJwP696BNpxUPhu0RM\nFCkPAhLjXX9v2qEZASNyfySQ98s9PNTAX1dTLWabfb1+3qCD97OEqdbXozMx\nogiysBoTLrmrwr1UYKmjTiZpDEQmB4RJ5Ihtwrl+KBIbaaMDXbPtK9t4IZu2\nh33wqVxNN+bctJSK4YmVlCekF9Xsr9YZDpgzqksVhUhe/3qFFFFie9QlHN59\niXhDRpiJcalwvLnWnhJR+lhWLvG9adbKk3KFwGZXcTt700zDrX7yULgCMUAH\n2E/a1qAyf9ZG5WAI0B5Fjg/jmU1m2nYZZjwJwwsXbDbIagjdD5OL5qGLx8eC\nWvsTHUE5q430EWtaZGBbUIMCtFc8fLtQULJfhFYN3HGwbYCIckk7GnV0vT6D\nIV1pMf9ngCOveE0LWSc8rrxVwoqhhOhXd2THzfcDDSdpDu/POurYZ9hY9rEY\nnP4apXcXaVFpo7Lk+MAsPO6ys1TPMJxoH87B42RzE8fS1dE95YoKgzVLouMH\nzqe3\r\n=h0He\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDJRuAzX8rbUU5zWaoEl5mpRvu8+PSaAxKqvqZxGFMVFwIgTFiwf7F4AModBHefd1ZjFTgWJeutDSmXzVTJkPHp1Fw="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.6.4_1611938887976_0.2570394546081325"},"_hasShrinkwrap":false},"0.7.0-cpb3.26":{"name":"gatsby-plugin-image","version":"0.7.0-cpb3.26","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.0.15","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.1.6","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"2.16.0-cpb3.26+feda9ec2d8","camelcase":"^5.3.1","chokidar":"^3.5.1","fs-extra":"^8.1.0","gatsby-core-utils":"1.10.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"feda9ec2d8b4f4a10add0aae1de72c5ac8e41cdf","readme":"# gatsby-plugin-image (beta)\n\n_The new Gatsby Image plugin is currently in beta, but you can try it out now_\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.7.0-cpb3.26","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-vYv+q6AeEbHtU2cWPq3Rx1hTSs/W33X4QcxVzrPdv7hEDWEISLZa3vCkKI6o73Elt2yqwwjGLEiLGKvrRIA0AQ==","shasum":"6952d62733625d5100c9fb4a632cfe6902d21b47","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.7.0-cpb3.26.tgz","fileCount":99,"unpackedSize":922764,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgFsEZCRA9TVsSAnZWagAAyZYP/16qcGsO+0adOrIg+HfF\nEKSiHMGFs7bA9Owoq9aTR8zxf4BXdZxAhTqdN1GgL3j5uMIxkeQqAIMLXl7p\n1lHyO3pHhrw1I9no2WAM3ifc4oUuA4aTwsIOg36BkDpyqZ6MMhzAcgDznAI5\nR3E6jEldZCHFVsVpk4NvvUZJR6Vbm4bKexSE/o3CrTvEdMeQid2Xum8u178r\n3Tw10l22who28RAnWgHUAuVmoTbn25k2n7epV1aK4mzDkmdM3mRYWT5pJ+gX\nLdst3u8I3OVA7aM4d8drExjQygMHvGgGiR/YVYjKc/wNGF0V9ekzLfhkXyyx\nlz4yTUkcnzBgOgSF1OuDOTfyihX3TZ0X3SIrED5Bnc1ENX7tHWwC4noukVZC\nb+1haBd44hfnKgh1pbIOfvu0VTrRfJ4vp36qerugKyCAQhwryhL3cPLem7Z0\neNG0LXg9+zb4tHu1g32H6EV5IUyEeebt76W3flO69V8C7XazHfrIArqhs1dO\nWZrXBBah66NaESJZvkZxG9q+gOwk1zU383ECHZvMVDPTvIm/UYafV+YnTAgR\nyZFHLcBQDOqmqnG1/bLgqJ5qsqBP7z4ZfaeBuKjXifVmqXbtyRyHwgEndHjP\n+aWbcolfVs/v80FLLbDRYPeRI2wkelZv+8zArhEQU5O3Gize5VdFpy8uhqSP\n8YpU\r\n=LPJR\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDnNvqyxYHX9qXkzNbi3LSk6U9cS3KEmf44FC0ufSjH5AIgbWwPTHclhFRdSEDqFkgsspdUbrgYf+tdkUnhA8GpXX0="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.7.0-cpb3.26_1612103961336_0.9167057688823284"},"_hasShrinkwrap":false},"0.7.0":{"name":"gatsby-plugin-image","version":"0.7.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.16.0","camelcase":"^5.3.1","chokidar":"^3.5.1","fs-extra":"^8.1.0","gatsby-core-utils":"^1.10.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"7797522184600284a44929cad5b27f2388eb13ee","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.7.0","_nodeVersion":"15.4.0","_npmVersion":"lerna/3.22.1/node@v15.4.0+arm64 (darwin)","_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"dist":{"integrity":"sha512-jW5FMvS2R4y2Plj6iW9S2TlVpsd91dAszU+tNUN+8E63DHPfR/5Gn16dznkyrAIlzBvrixWSU8w8CCGjfhwI7Q==","shasum":"1e2aea812ee1d11e41a0bf3b65f14321f38a83e2","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.7.0.tgz","fileCount":99,"unpackedSize":948436,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgGYUtCRA9TVsSAnZWagAA+IMQAImhBgHSj70CvNmLVQL6\nqSNVh4p7/fiYOnWEMC2uMXELvv0U4UPB1e2XW/P22sQ0fdsYkIFcVIsdC44g\nBsb6ff5av/VTbDzCsr/kzmILTlMsWDyvrOocC6sCvbWQZSWcNL9ING8wR40Y\n6a4BTLPZZLJgWeZMEF8to/RAT+Dy+rvJSVFm+u7JJlvyiehaMtSdEoEoygkZ\nmI5ziZxRmnMnlay+uwT92ZCvGImWVe1DSF1oEVWYievuaWCIzJlzjhRnEXpB\n+YLD3cH0dP6q3+alDGwWs6sTq86+kjguYIDLXoabQ6MxczBO94NgS1Bj6ITL\nnm3eGTtS+YtCdls1L/sLrsNSzAGABvyKyS+g5wyBmVp8bylmzr3VgdCbR73+\nDnz3n9XC/aZC3oWxm878KFI8cGlckKk+4DmG1sIEWJHc0i+8YC60YgNeIcTj\nxKqy/xJ01PHN4GZLNsqVj5tZBp3g0ot0TPO+x7o+/veJ+We7YhBH7VVXlOXJ\nybNiQHWNBuRTCxLflYZkJBp4Mm1GZwlLwRw6wGVeqCJ2nBjg/InqLUMfBTBq\nu6YKRrSTYluD/wOMcjAyYVrWrITwtvAvNdGQZrQ3u2ySU/iPosE6wq+xnUGq\n6Cph3FbzITrib8cQaqqnnGS2akXhQuPE3S/ZZfohaU7eZKHvUpq3n4f/YIBW\nkYZD\r\n=Dd9K\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICtHVMBNwR0T7EkaWCrirCOeoggmZbMlcG/zDGGHHtqVAiAN/3DUp/rw9nnpqO+C0e12u8CcxioHGxTBbz7vERIuUA=="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.7.0_1612285228835_0.5651190416537171"},"_hasShrinkwrap":false},"0.8.0-next.1":{"name":"gatsby-plugin-image","version":"0.8.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.17.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","fs-extra":"^8.1.0","gatsby-core-utils":"^1.11.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"77f7487bb250275cff8bed46befa24e708189df9","readme":"# gatsby-plugin-image (beta)\n\n_The new Gatsby Image plugin is currently in beta, but you can try it out now_\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.8.0-next.1","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-KdyGoHeNymGNjfNPZyR0qUfgxw7Sq3X78vYBemrjMxk9LOcMUklpEXaUrw+e33CZ7xN1SCldYYiNW8HV9xD+DQ==","shasum":"63b6d4f107e3abef1fdc16e536de741f60b0799d","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.8.0-next.1.tgz","fileCount":99,"unpackedSize":951004,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgG8/ZCRA9TVsSAnZWagAAB5QP/RoqEU635bY8GWyLKFXy\nAIZjYAPIP8PTIpVkMINJ4AAl/QBvziCCua0PagNt64SEt7MHg40viOotedA0\nc9G0YcUa/aikx/z2ZyQ1mpINSo1ZpVeb1Yj8p9y+LSCdXHTOJyzMgYgWOIOQ\nzFVKtrw9EB3vOsdD8SZI/NtyYVGnU65yBjN8X4Z0NFiWALpEjZA3q/klsj36\n8UQPPE8WnQXmOYjvpgHKuqP4nRMZ6x/qnSWdCfbDc9w1K2HNbj/1f3JKiCsT\newMY/9/rW5SpwMKQgP0B1ouS/58BgBBDw8l36TlNplJO3Vs/pspm3yzcpA/W\n3+Sa9MRcLHAK2Ts9yehedF84EK9WOR+eo1wkwZn5VBRShpQyENlqzEZfc4Tg\nUe84hWPXAjI8waSgOP9vl7/G94zNCVVETYwuY7hBxnyhlc7n7dpaTwqVGPZJ\nsUVcDG/CJSZ+B8er0Km0KyStfqwbalg81fV6eC+WuE6Cu5HkkmMhBv7vNxtr\nckqR8cKXuuQo0WPQQdmrwZR9yYiktCD+QaXXGWM7zK88hOO7Yix3HhBmteja\n5zPgTWqjPySqhrcARKHRqxmZ0MsJrlH/IY3DLuOt2BQWlu3CrnM3UBEeuDWk\nxuANdrQs+N72LSmd5IigocgJeUo7zqAJnCXBCvT1ZPFc5F6npCgRn5aSVpkL\ntUyu\r\n=DkWT\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD5Na7t8dLEbV3LpH/rfDNVfyG1nbpTGIUVyOn9S6IfnQIgJTe1N7sMZMBUzhAKygIGGZd/NNsxZrLw9m0APDjUels="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.8.0-next.1_1612435416797_0.4925847722344996"},"_hasShrinkwrap":false},"1.0.0-next.0":{"name":"gatsby-plugin-image","version":"1.0.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.0.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","fs-extra":"^8.1.0","gatsby-core-utils":"^2.0.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"fe4cd06c71942f535caf73c0462f0d5b7dd485ee","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.0-next.0","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-ov2nRQPB4c+XY4hM+wJB7gewfGD2/h1s0qjLrPlGjF5lZ1CUcpKy/A8GUsAM/NWMktoP8Jr3E+HHqOSLssT7Yg==","shasum":"00a9da6fe9b6f5e2033548a539e5d4d8917e9c56","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.0-next.0.tgz","fileCount":99,"unpackedSize":951216,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgHTbkCRA9TVsSAnZWagAAkXMP/jqKcv3aF/90H27JXnIc\nkLA4ZBOAg3QufzZYmYu1O4sGmMemO9qqho1baQ032piY3dB2UV+58w3DGvKJ\n5IttlbyaVh+TlSdplYuoMgmEomG9UzYjRKKjtEmjOH1R/a05Py3CEdLJpzo8\nAuBuLodEODMGA7dnrYilJ2gKuzn8TJYlxOTbeTYMzIulb6peo2H1691f85X+\nIvHcB21PJupLprav14bdzrDKTQS1TK3e4zpQNWo1fMrrsjCayuvxYuswlsBB\nK/UB4Lu80kIaeyKKIK0XcbLIx4Lu6dbQ/GH6E7zGqHOz2BMAAnxbfa5jveD8\n3bnJh7OvohWWEepZGV62IlxVxIQBjJnBFuLC3fM9sc+9ap8hFnPQNk7ww1B2\n7vRWT7urrZPfJNB1GjFEVGfu8m0RAB8CZnm6JMbljsMJRWuR3cPc+/Qo+ZLZ\n+R1kusDu6JtnAO6ed+PJuJxjlVZb2mttEDvKfv8yYG+a2podkWx7GKtqvgvm\nnaROaRJYGXDoX8u/TroeynTQBId5ccPpSeMbIzB5qECuBH6z+P3dArzX8Z9l\nlDHSZezQT1dfEXyqk4OvKftEeaTr+OJ4DUryxX/TuJ6lByz0OuQHj9y1Nhdn\nQaj/ClOwedVL6iKTczV7r6a4clrt0LtlymlbYyNj8zOD6bI7lEdxC1LzFmlL\ndwIC\r\n=1JuC\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHrCO+xhfy79Houj3kPcYY0okoWd2N8V+Md10pEHHDbzAiB4Sgu7YlnEo+F33tT7miMqYcrtVnMB0ZNAQ51lU27Xfw=="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.0-next.0_1612527331951_0.3371261082952357"},"_hasShrinkwrap":false},"0.7.1":{"name":"gatsby-plugin-image","version":"0.7.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.16.0","camelcase":"^5.3.1","chokidar":"^3.5.1","fs-extra":"^8.1.0","gatsby-core-utils":"^1.10.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"1bbde7fb06cfc1fbf4b3cc2580d234576842304a","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.7.1","_nodeVersion":"15.4.0","_npmVersion":"lerna/3.22.1/node@v15.4.0+arm64 (darwin)","_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"dist":{"integrity":"sha512-+fd/eTjCjr1KCj4rsBAwH1syCj3WL5goBsxTLSDQ2WVN1Uc7JYLO8szyKZBw4RyEOlm/bdVDDPnm4AxrOedjMg==","shasum":"a6554c6b9f512e21f89f83094d365eb7fcd51520","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.7.1.tgz","fileCount":99,"unpackedSize":949147,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgHXuHCRA9TVsSAnZWagAAprkP/1v3gsGO9v7t7+2z2mu0\nu3pDVmEdk41XestebJfdQa/RiAfSUJVFtY2+jtqesViYpi5Otf2iaZK+OZl9\njT/pWHTBkXLp3OwTGzY75sr3Q7S9sfGm4zMpcNPOwDwhsfMN79tJSmIDywTP\nHwxm2Q2xXajWcOxV+9WRogXNfDTViOHTN8T9aAR4xdSeogcZtykktFPJviB3\nn6VtWFDmvdzuB0pJJC0iC8jIVI/JDisQlpI7k50NBjMhfMAXWDFaz9J9kIzD\nFpdssuRhiIpKWPjuVFLkGJOHHms5XYCAXquaQwVAhqloGkjIVjtnX88GL+H+\nsVlmPm5uFIZQvRc7hRR1vb2MOjELm1Y9RHyKCp11BDNYl2Hb66aMQ1nLsbNm\n4C2YfheXcsUiiFBLrD3+LO42Pgqe06MuP1Ci9I3kFc76g57SiRm7/ClkcyUZ\nWg6PBVaMKFO2nvoZiz16PmEJTRuqEklfXWwkHMyr/4N00DM/5z7jTkLo2GHo\nX1A6+4+hjjuzvklAWJocLtRyjCkJf4JfLFSuwi4LI3F60vwZ7R60eRSYPuuY\nqv5xhqZV4CYQEH5thvn/O1bE8hjNKR9tzL9DpBz7WzT89s88nLpWEcp6nr77\nIUeWnqW2lV7A6imHk1kylxR03KUaxw/gohB2dYW4QXns5g4lKKP7PjOimG6X\nazjv\r\n=JvNo\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDiRsuSTqBrFrza7pBP0YUwIiyS+t5xONJJcKhzkMMN/AIhAL5k25LUGrcWUJ+jU6O8ubmC6TVVAZGQPna0CtkHbXKv"}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.7.1_1612544903277_0.1754411051947038"},"_hasShrinkwrap":false},"1.0.0-next.1":{"name":"gatsby-plugin-image","version":"1.0.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.0.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","fs-extra":"^8.1.0","gatsby-core-utils":"^2.0.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"0a25e3f3f98253ffecc06dc3e9a69a87497e4f52","readme":"# gatsby-plugin-image (beta)\n\n_The new Gatsby Image plugin is currently in beta, but you can try it out now_\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.0-next.1","_nodeVersion":"14.14.0","_npmVersion":"lerna/3.22.1/node@v14.14.0+x64 (linux)","dist":{"integrity":"sha512-mwkhEyvgfDIw17HdMToyKggHmm18wGONnG6goUM4o09Vbtuok2hVNtF/fiSQRQHnJDwDJNmBW1XwMStWtl/+tw==","shasum":"7420907e583ca79f5f63a82b10eb6ae8a4f54bed","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.0-next.1.tgz","fileCount":99,"unpackedSize":949453,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgIQR3CRA9TVsSAnZWagAALIkP/RUoKhNs4WX/8Dq4iixw\nEyizDAMbdjbaT2JmJ6uCPHW7/5V1HcnMHwdLLyqsPiSvoD3AiEWFtBVG+aV2\ncHIEgBT/SFZbIzTP6fu/KLJsW20UfI2jE/6V8rPOp9n4JLn2+AVLH1HANtG5\nUp3rIb4JrUxcx/V+CHVQqC6MX7o42T9+d9b7Fz1Mz7HY3p9D+Gb1//AVOev8\nN7S9b2mIw18uF9KB/4Vjv4X7/kNXrMhihHKADjnmHlkgnaLT9aK9p7+M5ayf\nFh3hCRuXeYvDA3hSS8eauSY7t/Nzvk2/2XSoJUv/qMMrXlhbnbc1DI9EvPdN\nODTcRS0SFMhA2CE8LZFkjiERIlZ5iB0Lxnv7LJFmi1PxOUUmCaBgqyR7vjMu\njWLycS6fx9O8VIhLrFJLNjXKVAdzjlaWDpd6KT/ELnK9nscHd/ozfL/e731q\niCkOax/5hNx8tL3IMelIBXo3ONNgdNaMW+zHgD2p5Ge6gZmu5gH6Oj3/v8ys\ntMvS1RDWary7KOtw5XOuEBVz1wt82FYqRwg65tAkxyi49gRn5VGvg6Wlq4vN\nmiYapDq/ec7hNp+Kkyh64ejcO6StUR9do/q5l4opYK57xbDYXtP0ywGCjVMT\nLNsWL2y+nWDYlDp6PnquYHvgaBmRvgbUu6GiE5gsOy3btdbl8Ba59jtqGNLt\ncJql\r\n=bdS1\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCr8qYHhfH+nIAZMEpSXOYMmmUi13HXyfdvi6MhgkaYwwIgbVPhkmKEfTaBxCuIdGaViC+FXiPhVap8eOjK4g2chS0="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.0-next.1_1612776566656_0.7018391871144789"},"_hasShrinkwrap":false},"1.0.0-next.2":{"name":"gatsby-plugin-image","version":"1.0.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.0.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.0.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"ea3facd271d6492edf01fb94aaee33f872db33dc","readme":"# gatsby-plugin-image (beta)\n\n_The new Gatsby Image plugin is currently in beta, but you can try it out now_\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.0-next.2","_nodeVersion":"15.4.0","_npmVersion":"lerna/3.22.1/node@v15.4.0+arm64 (darwin)","_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"dist":{"integrity":"sha512-BYHA6XvJoGoZLH9csGORHt66LZ7XVXEz0zEkoFdXVtRpsLkCZIsg/fCpmX4vLsW4Pe6TgrxSGxv9CLqfiklMUg==","shasum":"1256f8d73b2b28197143a94af4699be13b717bbd","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.0-next.2.tgz","fileCount":99,"unpackedSize":612942,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgJQEOCRA9TVsSAnZWagAAnCMP/2mYan50lmMoYtKrG1dO\nTKAixRkvXbJ/myG0LkkEQTKtd1dbHE0ktyuqC+knWTw4TkTSU66E7ZU0ALGB\nd7K0JUQ1gclqO2OrdumcY0WaZ2ClFXcQnBdLZ5Peer20nZ5hMNqxLWr2310h\nEjUI7C8lyZfo4sbT4CrF+NJwVab8ErSM6lDYcb3zObE9Avc9wJ1gqzIsOslV\naYyjP8+sWBjGTg1jGQmZivYK4VIIod1yPVJ0ruc7v/UX0n/UQtUFOBTS0rKa\n6aLGKeaJXdJyUU7U7XGXri1853Mhcmmniqz9oQ1ii1OpZ45HKv+oRmOmKPnf\nUm5rz6FTqLmHBCkIr2X/3XH8jNEODG3UkWr6EXt2S/P4dmvajPuHTHsbNpg7\n/4dwNbnkfthSVABhytTcgS+CKqV6z2htyM5GRnZLe3+acg089m5zJKd28EsB\n8l0tPSYqCVemXOXeRM4y8GDVVpY87lnYd+cXtmquvvfXWhakE99pRQBpjR5E\neotJ+6nSxaSjkNJWC+WzRWXH58EU2OpIpyHcm9F5/a4KbhU4GpyfysNTtp0l\n18SzPyNg5+zCvOEWwHQx8WTD+vza9wwOiJk3pYkm+s9GapnhRy5GclPRIiy1\njWCgCG+1ZAUmNdTwgsDGY4892IcPrbNv1xmKkvHwuvj7DhnOMLqr8gdZNomd\nYzPM\r\n=aSRg\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFhFkvl/9TIHdw7kPJ/Pv3W+Jpjk0Bj0X4fSkswa1LgIAiADPs+FfhZADLXgcTM9hpN77IeVm/aIAASwG6wPaRmabg=="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.0-next.2_1613037837868_0.08320560444661784"},"_hasShrinkwrap":false},"1.0.0-next.3":{"name":"gatsby-plugin-image","version":"1.0.0-next.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.0.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.0.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"03250efd3c7d306d2eecc978c78d36987d7b0040","readme":"# gatsby-plugin-image (beta)\n\n_The new Gatsby Image plugin is currently in beta, but you can try it out now_\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.0-next.3","_nodeVersion":"15.4.0","_npmVersion":"lerna/3.22.1/node@v15.4.0+arm64 (darwin)","_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"dist":{"integrity":"sha512-1swpNxvMiVeuePlm0pnj0L9Onz0bnaqYXc69Z/NHKl6kHg+Q9uMZqnOMbnMnTHejteCshtlfJiLMvnTqBJaegA==","shasum":"1f7e005d306f5a7abca02f20b2f205e5df1fdba2","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.0-next.3.tgz","fileCount":99,"unpackedSize":613260,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgJk2SCRA9TVsSAnZWagAAEJsP/2k3ZbvEqtSjXPW0VE8R\n/uJxFUkuGfGeycE965jbZcja4bRfz5YVgZIUlBRAEoRKCdXBrtUEq+C+PsaR\nPHg6TRrxMokS50vWTgBnKw+c5t4l+bvI45v1WTA8Wo4xOCohI9YyEENQ9Of/\nbyoGWGEFrCrdnXnUvNUf4n3RVVHYDf3TX2ocV+NnPr9lGUCR+y+32SYhe+4H\no2sSJ2B+q0MtTJMzW8AEyJquDyYY41aGIDPOqWaRvSzdqKMXgc/Qbq7ibjYB\nmp96ULtwfSz+cPpT2T0A59Zg07FaIAIQRe2E9vjQ2XVESFQybJM1uTY0XUaO\nRZK2NM92DImHmdQsfKqQfZfOEvl4hEFwc5LK0WGSnrm1mNgpkYOmzCBvcHDN\nTit/VdADOyy0dI1guso+4xKRQBj8Lc6/crK4j7MnRXijJmu8bYWCpVc6GtSP\nSsB+8+C8paKTpSWkmYMqS2UL+Xb3M0C4vFbmMAbNTVuvim2DRW7Z/qfoqoUZ\nCfc50nUSAw/vNNRZ+KH1L4W9KkCPDBUqJeAYHyNoNqgz+Qxf+jewiZiLle9o\nvpGF9BrglgeMTt64ZG4qMXSkq8DkIA6icHDmPp1KzuxHShe/jUbA/qzaYqKq\nBLAEa7CJ2rooHww7aidH9mmKURC7hlymElgpGYEUOOlchM1n/yqxHmOxFN+Y\nnqmj\r\n=OFvK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFBWX+odTbFvk0P+dwV02RQsYuV7SGWlZ1zjUaKCIGu3AiA9JqQvs5FVTFchFcmzvkfmFWC7Uj+33J0AaceDWy/Q7w=="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.0-next.3_1613122962172_0.7522470683654587"},"_hasShrinkwrap":false},"1.0.0-cpb3.33":{"name":"gatsby-plugin-image","version":"1.0.0-cpb3.33","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"3.0.0-cpb3.83+8c6b829124","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"2.0.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"8c6b829124c0a5bd4024e9a792beac93079558e4","readme":"# gatsby-plugin-image (beta)\n\n_The new Gatsby Image plugin is currently in beta, but you can try it out now_\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.0-cpb3.33","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-xNvgfJLwymq3I/zfR57hN5FH8PnjfRKaAMbfgOX7b9zYc+WaNlDKtTmpCOsamT1+A93kmnsg4C0ZW+30b/vMEQ==","shasum":"c033692d05b81327873738ebffc7a0ef30cdffd0","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.0-cpb3.33.tgz","fileCount":99,"unpackedSize":613282,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgKmHaCRA9TVsSAnZWagAAUNwP/2ZDi+rmQxDpVCCBT5U5\nGXcih3FBGFv6QVMmH+xcg9y7DLX0HMGTr3VQYITwt7w4fGGQDeyTHuOytzJA\ngyxUqr5de0mBEfi2C0OSY/nvbTCY20+yQc0h7Hj44K3fsBoxod8diWMiaEgL\nbeiLn58Fz8VpfkcX68t22n10Bsv456WEk963WWl7RiUEgbM81LxSOr8h+A9n\ncw0yPRw+GigT+qMrwq1XVjZMvnvSVc2mp66+rKSMv520kPwLcrGIEX3Z1d7f\nCAifqzIvGQ13E3KVnNx7UYICZE2xdQoZbrHJHtz/k1BA+Ig3K9uFqj8kLt3m\nC0kFSMIoYeNKxzjuEJABYfrZ3n89+p7QInugzBJMvch49XBrjgbyhjup4QO7\nWtcO/VHsLV8EXEqInPhV8T9fQBaszdJlTutK3eORPbBTO2e/XlJLb8CIogAy\nEjVOkiUzja+M03Fz+pFzvJAoAjT8NqTNgIZIoytcZjZBHVIHwW1m+VmlAjEI\nP0slUyX2+b2+Cypgcwj7Pwakd8oKLqD2qyvJdbHt/qLZPy9bLtVOAHXx86Dn\nDD5bAL+0QMU4FOPzNdE/PuvvspfmtFfp0fERa3UEVgtqD69NP6QDsY2QrB7S\nRrqgkCyCuIJS8gPnMyNVqgDiN7G6qIHQ7Mbt7zQcNAfBhQz9hpbnOAX8Kq1m\n+mvS\r\n=S17S\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDTKzvrdgUJqnp+O6PgwJBOtTI6LZkxLQat8MEPWMNQKgIhAK8GqY5ndSxL269gKMdPT/EWv6UH0ApdhGskj2hhi347"}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.0-cpb3.33_1613390298187_0.2402033022433152"},"_hasShrinkwrap":false},"1.0.0-next.4":{"name":"gatsby-plugin-image","version":"1.0.0-next.4","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.0.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.0.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"b1a081bac2d39a26e63bf8688cd9dd04f05e2581","readme":"# gatsby-plugin-image (beta)\n\n_The new Gatsby Image plugin is currently in beta, but you can try it out now_\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.0-next.4","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-VaibZ4QTscztEO0+uPJ8QLaAK8ivRhlmabQAhR3wQe7sdsRA1jyVZbNKNUmpQHlYA2pz1aSAdp+cbCZ/jbDtrg==","shasum":"58f206a0c822334540a7c683dd4d11793db1b3d1","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.0-next.4.tgz","fileCount":99,"unpackedSize":616014,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgLT2bCRA9TVsSAnZWagAAiksP/RDR5nKDhqGuGHBGhV0E\nPr2Ja1cgB4ThxZZxLZr/wEHA8OVW6IkkX7Pj0xrOHO8D2NXqaKeJBikgN88/\nTqRrgiwlHmOVwmpUlx0uKeREQy/ybkR5wDAfzLHnglL3J7DMMnk0JTUg/CLB\nLxp9+RX1O/GIFRbjGW5MqDk5f0DHFEb9eHWMVGK9dySUX6fBsRsEUAu+A5e9\ncoBg1Hw7tzkPnl5z9aWqisDiQjuU5/mI4ng8hxY6X/6hr5ihdX34wnxoTEd8\nStJSkotIDZniH6l8wiUzlDsuI1fcc2WfucAb+wIJNO6LS0xb8mgxrDWy6a2P\nP3Ty1FgNNqNFZ4QXpDTDxR1d+P3ryNPdba/ENOdqiURbmJlNyBps5N547ky/\nU+ZVc9K50NumeWIL1CrmVu5uQLrOViWcB0zs6wW95EurtaDZNgK6Bx8tdWEg\nSV04b0CArxReWYH6Y8nFPRlTyNQOONlpvWYlfWRK5UeSmfk6NgUWwiGdPYBz\nEeTJTgGQL4Osd13rdIVD72gV3Z2tWGBIl4rgoMhWCwu3l8zNKk6MZ4oFj7n9\nI+c+ElHkUkul8GBVw6D7t9isTx2/xraBqD1MXf8oJbtPBYh0Xf/Bm53XFINP\ncLfKrjHsHe+i2aPcHCcvhi4yHK1Pa6AqjLt6qDyPuBT4pb7dh+9wqeeqJsh0\nWVsw\r\n=yNSo\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHkZSsdIA8gsplp+alPyH4zIcj1LhqGtoBr/E6mIi8YOAiEA5DJNq6WdryKTKVj2Vpw/CgKxtK1syH053A1vIMO2akw="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.0-next.4_1613577626754_0.7016894068473474"},"_hasShrinkwrap":false},"1.0.0-next.5":{"name":"gatsby-plugin-image","version":"1.0.0-next.5","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.0.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.0.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"df2f9d68e6ec3b32dc43aea4281c35f49e58884f","readme":"# gatsby-plugin-image (beta)\n\n_The new Gatsby Image plugin is currently in beta, but you can try it out now_\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.0-next.5","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-BrX7e0x3Pl7GQEQUZmMTK3MU7CfVH1Nv9ekX9H/4ruuOtE+WpqfDGaVSFpTcMxn2XWsWlunGM2TJvPrtv1SHFg==","shasum":"8c6ecc1422cd2e443470c4d6e2671e6e9096b03f","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.0-next.5.tgz","fileCount":99,"unpackedSize":620580,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgLkHCCRA9TVsSAnZWagAAWlMQAJL+Gbs1vJhPPIuy84z4\nPcVee4br9FavKvBcl+jX6CSKLN77H0K4bfX8FBeLfV/Hd8ogvJhoU8friz5+\nIA+xCI9hHZ6seokfN73ASnDPVMtxInq1FDS7sZhFaj/7eRByMYwS1HAQgNuQ\nRgr/1iOREH7Z44adfJcnq1MxBvpsWd9qQd3VSwGJycjDOPMwYQrxUHAj2+ip\nLqJ6rL2xJ7gQPG55o2x1sKiB4iDT7Y5b78pY+XVYiO89OM01PIQkBwI5xxE1\nhgu9dwoL8iKBihboGwhvHwQ2aqKWOeiEukcmPMnyYF7nlkAZaTvXr6HtsC+V\nAOhhueE8IPyVy79Ienyf8jDiazsDcytwJBJKgy+TSKddn7aMqKzLShCdMgzB\nJzEE1cA2SJdomk6AXo2ErvL4NvtObOl6hpgCZNTLcfgTaSo7PcuVCmnpCzcA\nRnYPwvCHjTO7g+eYNyV+HqqlyR8cozVMkls8opUylb4SxDQGxbTxYxEu+xXo\n4J/DlK5B41x1jsI5iw9/t+G6Gx+cvOHHGzecpS2j5xBZUzB4/8/jQOYvl8jq\nqOakT8gq/IUvORhx1anH04dMqRcuBnzTplbU9B5IOpV7gaYzgmm4gCAs0DVV\nCqIe/kkioNTcclc3bo0m4PF4mfhaZVj3sUZJKXz0jXDxpw6tEVioUmHznGQ9\nImto\r\n=XF1J\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIE1qwkV3Gdy3hXH2YilRYC5hhWN7D7YzHGCiBbbxXXvPAiBX7qp97d84lif3TMpvMs7HKRqjimQPd8le1lazEdy7dg=="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.0-next.5_1613644226061_0.2961235348754496"},"_hasShrinkwrap":false},"1.0.0-next.6":{"name":"gatsby-plugin-image","version":"1.0.0-next.6","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.0.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.0.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"6cb9067bd12a8cbb40125c0030a04530a9af1df6","readme":"# gatsby-plugin-image (beta)\n\n_The new Gatsby Image plugin is currently in beta, but you can try it out now_\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.0-next.6","_nodeVersion":"15.4.0","_npmVersion":"lerna/3.22.1/node@v15.4.0+arm64 (darwin)","_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"dist":{"integrity":"sha512-7VZ+crtFflPgfEAnvwTVGIfkXilWuwmZ2exNQZVnQZFbGlprIMWxx2gCgMm7yvlEZLaY9ueFLDHbyWSiOJ3BEg==","shasum":"ed1102836ff607dd89f2cf1c0137cddd4a2ea516","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.0-next.6.tgz","fileCount":99,"unpackedSize":623538,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgL+AkCRA9TVsSAnZWagAAHcgP/iuCMFi2n45seac9L0q5\nOLE4n0maB2t62XSlYqax0Ls4OfaX9TqIV5RioOoCeWsrXuuqIs+dhAcd4sm9\nSBdvwd+vvjpuxg4gGV4zC7nKWxxFbvwhEUsK1dHEWPKB2tVmPdie0TjRqpby\nAeBJCP6TIgOBqfrsYSW5tzO/rq5+K2t1b6ObihFtrboT7qo0mQEM7kmf8W6T\nhrHluIFvuzvWtXEkXlr3w6xcA0RSpng7x2kP/t5Ria1oJQXBdnka6YqEDi5R\n++6vhnPvnc257+qG5NxU9OV2IoeKCcZ7zXH9nGFNDmAqGM4v21ujC1QQGWyk\nOyQn3XRxUPPxmC508zxEb5qGukbIPK60QkZreWcpNoYrz/L5N1C9yVaQG0IC\naGcmEXgeJ06fUOgCL8uR2rxJbdEUmyaNHEnMDC9vJ9VliFbiFQiy1F5XEPBv\nt2jP33BT5sYSts7O22OK6GUEtuVpTaTbv4XNNiWwOgTsm1rrNj+m4zABnAxU\nDgUorhltCnRp2DqspzrEDaUDE1PDHpjZNtpRYpWlNyzXMUW0w/ymw0VQwN96\nDS/x/oBoW5uSUyEGqznNNKsG91yhCu6rNz1iQEbUFBMuyZCgMOyh1JBI4+q9\nf3Poshx18haGAr5KidXIe65uFJsSpYN8QCSYUg8RNrrfoOnzdA9iKF5C8s0R\n40H4\r\n=U+s5\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBoO6qutAsbKtYNLW9JDr6s0froTAsoO1qpTBAhNpsmOAiAh1X47H0XyxBrp1gx1n+n5Z4JHEar/NtCHWZTgFsxHag=="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"madalynrose","email":"madalyn.parker@gmail.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"kuvos","email":"npm-public@qfox.nl"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"},{"name":"mxstbr","email":"contact@mxstbr.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.0-next.6_1613750307320_0.7571864293479738"},"_hasShrinkwrap":false},"1.0.0-next.7":{"name":"gatsby-plugin-image","version":"1.0.0-next.7","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.0.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.0.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"d2e9968f138e87216c310f739e2fc993ee50e6c1","readme":"# gatsby-plugin-image (beta)\n\n_The new Gatsby Image plugin is currently in beta, but you can try it out now_\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.0-next.7","_nodeVersion":"15.4.0","_npmVersion":"lerna/3.22.1/node@v15.4.0+arm64 (darwin)","_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"dist":{"integrity":"sha512-7Raf30DHVsPFBPtF2oKIcpConAjo5glTcBFtcqe3wIw5cSI1dgefzwp+PBhJOX2xztdNmTLJsqtPtEJx16tMNA==","shasum":"9b5a5eb2964c12b526e137350ee373aca764ea3b","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.0-next.7.tgz","fileCount":99,"unpackedSize":623903,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgL/A4CRA9TVsSAnZWagAAo8wP/RSZMcz/sY736UAqOveY\nrsKb1Zq+FCWCZtqHf8E2OrynU3025pxXTtPMMHD5YAo6Il9Y6rjZlxvDHEbN\nrHo04GOEbgJTxddFsNA9Ok6flV4MfivpzAwZJMNbLQMtv9CrrJkWJKakv+Y6\nlMWuRd5qVST1ukVg+1fMrbUg/hU0YTJRwbWZ1dTo+4iSpLwdFwvvc26SGo47\ncxJBE9+7vI2u1XPgeEbKtxM/vaXaFOxslEzXrTxSKwcwKVrqHObZhyApALGd\nNteaDX6Ch/qnje75MKZd1W6pxg069SOFqdTZd3PEg6UXvdwZJBwrsv+hzBTG\nUCe/CXRyfY95RKTTyACzsFM8D3RHI2rRO8Dzp9c7MdE5f4O35Ss81KDXoFqP\nn2/leqD5rpEkGhKfWqeTLEoXyFdsK2elUIeD6hlkcqgwssXc7TfHzdOZL9+y\no6ciDC9td5vs4z/FY8sQVa112Hj1h+dsSaIBrS30odHWu4HOSKDE00ZJriY4\nzGGyab3wYqe2jRFDbQUttOnrA7s9TVwOR1xEPc/tnLbeic0HWhRiyaTB+h3m\nNiq1JxHLzBuGjTdqhSntGLG8DewLOxgycir40EG2SKLMA6MDWXY2qlPCVtcl\ne4aYY2Oth3ZOAT7YK4hZjZZxhaGxdPO3+KbKAR7dM/ZIwyp+lOW9ukJzuEpI\nTTpc\r\n=1dEb\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCPF5Y4fiWOFiKYQMzZfoXb0oPgrp6ckyrRFF0bKro1OwIhAM1smBpiQ7nEyORNV/iPaBNiDqbrCXMQnm6VVMuAYOIM"}]},"directories":{},"maintainers":[{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.0-next.7_1613754423847_0.048846793073737294"},"_hasShrinkwrap":false},"1.0.0-next.8":{"name":"gatsby-plugin-image","version":"1.0.0-next.8","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.0.0-next.2","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.0.0-next.1","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"3f9065586ff49d40d672cc2d48be68b02bae0dc0","readme":"# gatsby-plugin-image (beta)\n\n_The new Gatsby Image plugin is currently in beta, but you can try it out now_\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.0-next.8","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-fvObBWxVkSVF9OxYFdxqN6GChPH+ogjilyinky49eNCusI4UTdX2j3JhxHGLBrV6MjKIyTkoLrvlWFPZrZfFnQ==","shasum":"37e5342ae32a5bc7c6caa53aeee1ae541f72bb2f","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.0-next.8.tgz","fileCount":99,"unpackedSize":626678,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgM1liCRA9TVsSAnZWagAA0sMP/0tTMhlJkjui3wHxigtq\nBET2Umv5rRGkKyaHtio7dgXZN1MBmUZuaUziboa7xT5uaM+iM2qkZw4htapj\nuAbE15VLUAZZDMhEhl4/55yP/4t3lXRfwI0Ivo/ORKsfw5bSaS3CrbGLmVGD\npJMUDZ2sXFWXLMmHEWVbWR0Ud98d1h5lntxaCkr9wVRJjGHyBWE8zTFSySmb\nMaMy/nWip+aDf3fj86jfZb1KT8U9RfsnkZ1n7880UxcMA/02qO6tjy3lZL0N\nOCaiim3xdim0iluOlG6E6PH+I9UJJ6Zuebhmr50tziqY0uZ27gjycLxSj0HB\nnU8jeK3iL9BWZh90kFGZJBX1DyFTHNXYCt4ZxB9CKs5O7ITc27coK4MhSkNd\nRm2zlnT2y8pBI2zbadPBeSm9dtYDrgVOm4mAf9m60s9889GSF+ZnVbU4vlqT\nwsP/3zUtAEKlfmPWK+tmot2FTG5lXtYb6J1wSHyJuMFXio7u9KtrU1cddEsy\nbJWkypj89OrhdwGjfFYRWmhbV4SJgVVlgXvh0bgXzBQuYF/A7OuyAri+Riie\n1D6d1/kc05sHSOsKr4g77K45cD3CMJIQvc5jkHvD99Uif/pSkhkJXaJrUq6G\nOqVcmNtPghd1izArC6VSG4tLl1Ponam8sJBjjDMD07gRA301uRLEXvOc7oWN\n3HPU\r\n=TcIp\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCOfmLJOuvOOcydxNvZ4BpGQYYo8E7v2E3CergBIlXKkQIhAKN8sj9BfbkYgW3NSl2Q1HxT9LU/uzwC8k5aLTMK7P5P"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.0-next.8_1613977953337_0.29014039047846585"},"_hasShrinkwrap":false},"0.7.2":{"name":"gatsby-plugin-image","version":"0.7.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.12.4","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^3.9.7"},"peerDependencies":{"gatsby":">=2","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^2.16.1","camelcase":"^5.3.1","chokidar":"^3.5.1","fs-extra":"^8.1.0","gatsby-core-utils":"^1.10.1","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"6fa14e4ba75adff605443402a9a93417a687aeb4","description":"_The new Gatsby Image plugin is currently in beta, but you can try it out now_","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@0.7.2","_nodeVersion":"15.4.0","_npmVersion":"lerna/3.22.1/node@v15.4.0+arm64 (darwin)","_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"dist":{"integrity":"sha512-MUWLzLH8s0y9p6plM/vcCK+8yKYNqDAedhXbYelVMgbseOfUkx8ELwDwKXh79D8Jkj8sLkoq5IlSOP2nCyBGLA==","shasum":"c49453b036479ef902d4385c9efaaa660af27fce","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-0.7.2.tgz","fileCount":99,"unpackedSize":951636,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgNmGECRA9TVsSAnZWagAAUdwQAJUE4cxpHvuPOuojGwdx\n6fTNZ+3eKna1bvoZdNUAExuek3HkK2lk7BY6Uk4kSi7/WYPHEJDcAES4Ve0N\nm0GljdQaZYVCWkF5daGz+lnsU/AAK8loO3zYTzNZjUAj/spjeT5shBK73bqJ\nK1ptypq93izrWfp/9oVG4XCPpquYpnnixuCY/6LxCmsSEJNVVzDQl74cDMai\nEfz1ktkG8d6Xdypsgxh9fAN1H6hv6P4KZtewgbjgdXLckoQEgfayjysqpLIt\nYOSlRjB4yW3tBGTItaZPM9bLKYQUvh82s0zQFRWmaAV1a0bAk7ZLF2wtl2F1\n6xs7Untk/jWPcmggjWAsOIvvXnOWkEyL3M1nD+sdFafR75mfjseNu5R+c1sm\niYTksi8k/ltTz/7r5sdNwKmD7fnKV3exBGN406nnt1zAaK5h7BFoV9JUe/kj\nKQ2xiedMzKgMJlnVIRjJ/NCbS1MCjeywvubahTdxVz4ZuhC3qfb+HoCnVbSU\nBl3VmQ6qWCJwuoRaO6yw5N9zpwwy5adfPDh8QpmxMx3oi+GPXv87G8xe4j/p\nPscgFGHPUNDwOro1GaNM9MqosRH9agcrJKjDmRjNzov9GScgc/M943/l9rT+\nofifSOQSvQwzWwBCclIc84flRegSeaCvEjEr9IpXxwDXT3ug2OoDaL6rshbg\nogAF\r\n=jMul\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIH9m9UlsxCQCYLkP2r15H97vGiB+eknNeWCI/2BLU8mcAiEAuPCr/dWyZbrYfqtogwXunrCIgY2+EAziNHpXnADbUG0="}]},"directories":{},"maintainers":[{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_0.7.2_1614176644126_0.021647490554841387"},"_hasShrinkwrap":false},"1.0.0-next.9":{"name":"gatsby-plugin-image","version":"1.0.0-next.9","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":">=16.8.0","react-dom":">=16.8.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.0.0-next.3","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.0.0-next.2","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"2c049ea62d8f1c34370f675c4488f459000ea68b","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.0-next.9","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-eyFc1LctcY6hKEAsQRBwXyMuJaICPU7X2lrt22t63tmb6skg7QqHdKkj+nMThoAXSLDJpAD513Oiif4nx618Bg==","shasum":"6b5b9debbe7fb09d4d5da34b8b5f97196c45b62e","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.0-next.9.tgz","fileCount":99,"unpackedSize":638592,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgN4QJCRA9TVsSAnZWagAAvPwP+wQYrUz7vp3SwZueivTW\nWW9pPuAVonxTa8770MMjSDBFy2psDNGK29hnIYF6/EQ6SXks4zA2w4IZpQj+\nvbm867ZNfpA2b5UKteNf5M9+4O7lgJLR7onCz4cgvbBRmHb6lTBqfkBM3/Ux\nhYRl0Sv9L6AgaUVSIXLL43tiaGJvKco7OHPpid9i4c8m9Skp1xXhniOBaiVl\nTvWupxRKaQmGQf4usB/kgac8hKasBeeVH5qqHjs9LiqYXbr6j3Ny/uorD/Br\nOkFTWUqWnCwamALxSoAavTPXq73dKMHnULuuAFw5Sl99XLeHYpZVgr9I+fDj\ngClcsseDxsq/g7dEs93Mfz+gJlFLADRtBgbW0kBrNIge1t/YgLk1I6bQGu/f\n6+6fmNMXdbikAE872CLQpJHME9IPR7LywxK3QR0tzeR796N7JNCzDSxL6do9\ngO4s88tRDZuPUIiFI4LZEp7yvFcCkeOdCptvvsCfFEyPZSyQOG4b6rW3kvM8\nx2lzbAXbqfM2qryAn7Z98ruumAmo1FZ/d3/z5uVgVYydUbviyab1bT3crD2F\nYFBnBqDdO0tqb1vFOq76Bl1ueQiBLqQ9M7CNXGERCuRwMwIKzXOZ+AO3FeAe\nJHXZJBARHzJnRoJCocwvIKPPNO6u2vdWjSOGFZaOklZa/TPxtXbgTVgjqowu\ne2Q8\r\n=iTM3\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCPkcve+coKYngcIwZjWhTymsXXa1MprDgJeR+xowzn4gIhAKd4IfxfHmwSkHu9UOY81ODnV+51KgUMqiBuKUkSqCq8"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.0-next.9_1614251009469_0.33094588647818646"},"_hasShrinkwrap":false},"1.1.0-next.0":{"name":"gatsby-plugin-image","version":"1.1.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.1.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.1.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"6e36a28dbdc8f26b6a643972fe685570bd1de99a","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.1.0-next.0","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-/TlJZ9wcQDiNkXI3tol+hzSoXV7zhWt0PtHlLhbkfD/UWeIdKAKL43Z3kYi3xyFFmPOjzCC2mVUJsApFn1EMGQ==","shasum":"f81e945f63c60e5bc52ac25642510a24ca18fb3a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.1.0-next.0.tgz","fileCount":99,"unpackedSize":638816,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgOL8kCRA9TVsSAnZWagAAO/0P/0e8Tc9txKalgy/flPv+\nKO/p3KZEzCcsxtXycv0Z8vz68e0n3dorI1mRRklmyAUbSOOfuClpbg6biXLj\ntay0RIB2Pj8NcTwdI09JVnY6l8Bbp0kMXdcKKEXkx/7IcPlZmsG2SlQQi5ia\nh9yDAvPIaVYAe+JUoMGIrkprlEQe1JwCZde7k21nRBwDB0CDH9AepdNXb507\njfm2YyJagTe150BdpNMGvkfkDHKCz4GJaai0REJxUYsbiK6pO9kgWewhR1pY\nlH+mxzV601tfh7azbUcQq9SKn3XrZ2wyNBS81HhSUk4yw9dso89ai5BG+KL9\ndAX9rhjkrJsPZ2c/IOh3988ZUeSyLsBdFJt+XTM1KxnW4wN4/WTOOevw5fXq\nSg1X3wpV+tFFn1O2gFD7CKmfz/0f2kxuB8wzk6Lu1qqpAhY85W3P43I0dDns\nkGM7pMD1hbOsRMS4+yD2OU1cNEQ+7c4j0vDI3fK/WI2dYcGc37K27Oq1AicG\nMMcMTSC3CYmOn6gGcxos45mXMXmZ+EMcCgVH8UJ09gOo2A7AEWLO0GND3t1Z\no4J1UJv8nRABP+q2e+F6fT61TdRsNT6DtdeUV8OvA+duKHoBaDPoDMJ2XzGG\nwAUKUPlilHOSH0bPB0FiTwZHHN5ggXeeW2j5iEDxRJ96PKR0h6zCTgOrr7mD\nM1Cs\r\n=6wsf\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFI/Ill1IlWlSa4wEHcketBEYEUM49qaG/hnJ2ygLvRZAiAIY+40oEX/KzGfZc0Th6Oh4qKLF4V9YgrJMpi/5AGSEQ=="}]},"directories":{},"maintainers":[{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.1.0-next.0_1614331683544_0.16218004960947496"},"_hasShrinkwrap":false},"1.0.0-reach-router.17":{"name":"gatsby-plugin-image","version":"1.0.0-reach-router.17","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"3.0.0-reach-router.17+5bf586b83d","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"2.1.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"5bf586b83d90b26f3b6053e35a45dc8e8edda746","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.0-reach-router.17","_nodeVersion":"15.4.0","_npmVersion":"lerna/3.22.1/node@v15.4.0+arm64 (darwin)","_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"dist":{"integrity":"sha512-L0p6Yn2CYJtkrg4wkM0ZdJXFrQzPj3U6SgYUzEabWud3qrGNLJmGzu1N70xZ97jaKkDtJfEuTAu+hx4QLg2RDw==","shasum":"7d4c308f4a6c89928e1826d5c32ad7ebdbf4237a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.0-reach-router.17.tgz","fileCount":99,"unpackedSize":636246,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgOM8KCRA9TVsSAnZWagAA6oEQAJjWgXP4CLBsWSRgms4O\n8JolhfCDjH1cvRjcgztX9sk8LaMqt/9cvVdv1DZy62NiepF3cbESdZ5Kb6qe\nNTLJSs/DDorWiV88SlR3wv1vJ+fqFd5DGCLaj4jko73uMRge46C62VoUrm73\nY2GGXkc6A6IkSAmu+YK4JcnEJhv11gDloKO56iMmO5JN4gQWhhbU0Jag8Jzh\nNxdNWC0pQLqseF5g3J9030hW8X8PrA9RiKatuGQUWXccekzG0DSx78VF1i4u\nySkcoEImbbl+fOQelPfnZnqd2AK6zTBn51ZGyAZbrc95qqlu5KY3kgJ7Eti4\nTLK8P/2r2HrPbRljF/y6RnN3jPeqOv0WMs402WkBvjIxcwm5ba48XAtJSdaH\nKAYqn8oKkrlzf91SpYvRVm8pWkY2I9sntrYCKmTbmDsMlhPmSw3IeRwwqz/r\nHJpqP6dohtPZezBK8yZaW3+/HnPKviaN3q9wdtRgpCcKgqxe8F3nUDsCB8ov\n82/sxENTRqGX7Qx4r0m5RKfm+0svPTI9inQmEZSGJVLf07b9HU5kVGOLDe4/\nGeFBDUUtHOOwP4tv4J4wAl07SDIl0VlSg5U67xFGAlQbQv6nJSoHHIh17cO4\n91HymA8nT6yBEcswyVbNzjPD+SU4xIFuA2z8XzDDPlZucHp5hH9UjohRqhEK\ngH/P\r\n=Rkww\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD+MInKYTqjEdGe2NSDb9sBYkqXnX+G2YxyB0ZC/IEkgQIgW7UZLhRd/uA9gE5jj5cBP3JHyKL9SSBQn+D0hGFNDIY="}]},"directories":{},"maintainers":[{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.0-reach-router.17_1614335754323_0.03759273327834922"},"_hasShrinkwrap":false,"deprecated":"Install latest version"},"1.1.0-next.1":{"name":"gatsby-plugin-image","version":"1.1.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.1.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.1.0-next.1","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"1c661531b7f541b848a33a64abb5127c3dd89260","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.1.0-next.1","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-DU4g/5DGAlCJizBSZJebJyeDFsGaSc3jq6desRDvRn/uYdKyGLOz6sShP00PAquHW21dEE92jsBN8JqzqRRUeA==","shasum":"4d579ca8b1c341b14d852974366760d482616cbc","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.1.0-next.1.tgz","fileCount":99,"unpackedSize":639008,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgOPviCRA9TVsSAnZWagAAa00P/34acqeutrH8fVmPirYQ\nSn/Sw8ZBuq2n5+tNAYvc5qQjEcnC3HVpLGBTZ/ck+yT/Pl+a7ISkqn12Hkub\nzmyIoFyPAMB80EZEW5dGQTOV/JwmoPanpYO4uShVqWI5TsAVhamrMitUQ8j/\nlraBc7Wea+8LyxABCjlCn/rof6k+WWJz/k7SYJ8Et2OCMIpCvBPTGSCbngSP\nnfSShuD6/HfUyKCIMTco0JfLtX8SMZhKa8Ccp2KPWVuLZWJe955o4EsqXxp+\nEgUcYpMHdUtYA/M6vXcezEVRvMFCCs+9nkGBjgBZeCOiYN9pSl34qNm0XzQ6\nLKxq8wvGh9/SKHtc5olktoWryzZQV6DD7/m2SXwTl0QDtgMWkH1JiSSpFjr+\nGTaZ8cdIN0hwPGsbH8ZfFpbhYnpxCwObl5/3ThJxc07TcH7ger2JId90wcFI\novABGvPuKuLeUZNvUP/73Le/j1tQC2pJP5ZROSYqyKlOJYK4YmPwaAASmBkg\nI1aNYWrwaVnOsSNIik2szMEEqwFeMRePEjg/rLgeTyaPqOW5eZn9PJhPH/wx\nU0iR+6iMp+fhP03WFjn52A//lFmi9N5H8r1KVhyZiMBnwe67WX2wiv91J+eQ\nrMIr4OqTsLf3QOFf23r0nbYqD8qtkKr91asCWFHnKjZLof7uyQ8Yj3sHBBug\nfFDz\r\n=aJAL\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIA0S6J4/ocuQrLLh9/nLtHDesrOEYiNzgZmXqGqz0jpwAiB0EtbnXoYDgbTtIkfQgrSBmGyf2iAUYN4UagvP7gWBzw=="}]},"directories":{},"maintainers":[{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.1.0-next.1_1614347234099_0.7960629542233311"},"_hasShrinkwrap":false},"1.0.0-v3rc.0":{"name":"gatsby-plugin-image","version":"1.0.0-v3rc.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-image":"*","gatsby-plugin-sharp":"*","gatsby-source-filesystem":"*","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.0.0-v3rc.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.0.0-v3rc.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"ca446edb54a924ede2725e8748be1e8046248c06","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.0-v3rc.0","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-5Ef9qeloeNSTs+k2b+CNxDn26JzPZUZzqVPZY897b4XHbcaE7ggTjSdKUrcmIg8RcDcPz9Yl2+NtehnlOV3tLw==","shasum":"06cc001ecae09faf0438b40f31a36a7d53f8ca2d","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.0-v3rc.0.tgz","fileCount":99,"unpackedSize":638816,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgORpSCRA9TVsSAnZWagAAovUP/RbLNlFzfkHkxpJOydHJ\n3Y4Gu1uhgi+wjjmqF4EsoMwGp2Q1T182KiXsgTR4DGeONtnCynAg0P7I0i47\ndhDh8RGKsy9PjDCk/8PTKtf6YQFYiJ0D9LbHzlpwe+bJ6Tb5zXck22uhpd4K\nkmp6Enrk+W6T0Tm3UMPeLSd7AnMlIOVnVVluurEFVrGgR4z43zTdThUAX5Xf\nOO/oIssafmbIF1C/IA099VjJJ0xD8cKpdlYRsTZVT6vajy6ajLss35tVTznV\nReylOEbCQwYdy/7iFmYPzW0d+PcICsrPMftCEc8GjihlT0Zo7siRXz4ehsQx\naCKHqa7fRZRkI8Sz4BRprtuA4IeodhvL0Weg50dCs2gZM6W3/S/A9vhEvLM1\nqblyZQD1hJhzzo+A3KAMNQfTRJdMbRZ5g0tTrl6mt1CBzAMOMKwXRq+gjkE8\n9Cam4xU4sIq5MX64chdUkHMR6VUh72vI8pIfHqmXfkgqEawtzgM/n3F/ko/A\n56MknhdfRdrbgIibn8inaHXUIcuWebf9F7T5iquiS8uojP9Ylz2pEO2DB7z4\n20kMqbeBwI4anKiO3dxHKXf3UsAAzOKMehxw/Nv9PQGOmgkJqOifL/MTgqPO\nfKEXVt5y5dS/uxX0w5fqq1+Mg/WLBnk6R2WbFRui2l0rQ47pbwK3gl+9GSna\nCANM\r\n=aHDW\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDTiG30ZoVONnOGeN61FYALAvjekc2Jy+ZIrVKEfgPd3gIhAMywMr/8pUCj1fSfi5ssxqkIDO6vwA5qqpHS0W3GRJUy"}]},"directories":{},"maintainers":[{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.0-v3rc.0_1614355026115_0.5098873013049272"},"_hasShrinkwrap":false},"1.0.0-v3rc.1":{"name":"gatsby-plugin-image","version":"1.0.0-v3rc.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.0.0-v3rc.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.0.0-v3rc.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"c98c87f9533e616b07d94016141f433d21d8037e","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](/docs/reference/built-in-components/gatsby-plugin-image).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.0-v3rc.1","_nodeVersion":"14.9.0","_npmVersion":"lerna/3.22.1/node@v14.9.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-0WAkBf6U/Sb3X9EZKHfBw0iSlFzT3vPsiB0tfSAQ+vpixkvQ0OlLyQ3Uo0Kr87eFTFJpZ/20koouwCyFoFIvVA==","shasum":"dc9448891937b91250246ccf85a9f2bc0d0659bb","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.0-v3rc.1.tgz","fileCount":99,"unpackedSize":639233,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgPVX6CRA9TVsSAnZWagAA7ScP/R/BYQ7xOq3JYmep3uXJ\ncnQu3hRNJcg8aqlJTglH+yHkt2Gr23TFesswTs41rKHnOmjbTaeYuUgG5oHw\nguDVwOXa2xRAEoEP+0Bi4tDbd921p+OQYo5OgKEhBl4cUudQALP4ACnquJE4\nkibbxsXncva8b2cPXyouC00R5SZoXg5cWQof05jec0BfsDzdyLABRvpiUG5k\nTVdUMQFAH13raPMaJAkR1/7aBoZ2PxRkbbBbK7GpOynFpBTmMpOJKkr4Hve0\nQK06uLWTMejEnNuFQVkqE0PqQFBMQsfL/mB3cWzKMuHs4y8Qo4LZ/f/jtC/R\nmV2sFfmgWedNjnutIbv7bpP3pqPMUrnws8n45wG3zAf6VRTPy81jPne12itJ\nwirsDAY5xLrEC+wka0/0+fqYNk4EYRwwr6CcS6rQsPn9MWnrTUVZHN8UJYEf\n5i4qf/jTloKp8M6srEJ1/fv4eEgDPO46UVaXmoYOMZNtWIgdMBWEcW4bg+pM\no64qIc6woDfqf3aC4LF98wRlMIv6Tt1Pbmf/1toALdaJV8f/LAjsmSDEzjj4\n2y74wpmo0e/JLgvaDvv4vDRan/cHwXN2ZtPMZIm/T4eHUlh0HhSMA33LtuY7\nfWrdcpd28WMo2+d6VNY1nLMMqSAQV89fub7VGj+fwthPWYrbn/+BHtm5p3xZ\n00C3\r\n=54eR\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCYjj5XfnY8WOLx1jX8h7C1icqKXBelIChbVCNYtEjO7AIhALzUbzBBV5BGS5M1PT6TSeZuwhuRpI/97T95t9TaPBNt"}]},"directories":{},"maintainers":[{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.0-v3rc.1_1614632442514_0.22814365236531642"},"_hasShrinkwrap":false},"1.0.0":{"name":"gatsby-plugin-image","version":"1.0.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.0.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.0.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"f1d3f7b56bb2633e8e9de2d43c4e08dadfd52597","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.0","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-qPfydip7atF+rlESv1HLDmbwmmQvC8aU7W6GwO62hWcuGcIFJD3lcn6B8xF55f4rxE99vxbO5gUwRUwj+fUH1A==","shasum":"100ab670549c1b4b742034d09944c19b6a5cd4ee","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.0.tgz","fileCount":99,"unpackedSize":639402,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgPhaKCRA9TVsSAnZWagAA14oP/0Bhes7Wfjv6jDhnSlXE\nIDEQT1VayiHLy+GLlyYglbgRqnd2u1Yw3e7u3jhXV2tIKMgb87NdqhQvuQDA\no/U93v5IXdXBEnGNJ3CU9upJ5P7FxNX18PRTHCOvj+2UaBuGnYDQeCTE+CFP\nDABOmdI6JkZNCOM//IWW8F8qwW2wLK7NPXNhsgkKQkKsLHLAJ+ya1+A3ptZc\nxwW6xBXAfi/CwOp+EDhTMUAuT7l5nofz6XUswpJeus/alyQf02nr5n0oiGdW\nVJ/87WcV18fNMCSxL1qFbfEN6JcjlEEDAZHha0DEQcFWEEplaJHgGufgx29J\nLHoqfQ1cm6janYHS9jHE2k/u3s2Mt7Cudbybb9b0HtQWSYT9jcoc8StC8gyW\nuAHh0SoxWbr6nvpHPPGd+H2+xgm+jvFHJfe+Gc2kBcSuJxn5KqoO3zpkMzDg\nTtMoDwUfUaH79BXLPDc7bDvJ1NVYxLW/NFEVWnA8naQEHTCuQi6AKFQY5+c7\nxXs0IVk5MJkUr4zdUYYjxXhI/3GNNRhKcYrZlbtS1wHVDnQh4Oj+4xUwRUio\nAvh3AoX80bvxkpLOEGQhsruurgNn2kyMAieZExACrpJLRS0BtlEOS/zWhYpH\nneeSrhKpK6FCJ7mT8SaAZVMjvSlsaD6xR/6HVXVg1FMyQxNfze80NR3hVsF/\nRCCt\r\n=cmUK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICCXRWkcTVllhNNkVq30qEmjQn8E6LsDp44RDLiS7+BaAiEAit3r93DJF4Yy/6xHgFCN1FzuFns6OqjtZaVxohGkAf4="}]},"directories":{},"maintainers":[{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.0_1614681738246_0.16308265551411805"},"_hasShrinkwrap":false},"1.1.0-next.2":{"name":"gatsby-plugin-image","version":"1.1.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.1.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.1.0-next.1","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"73859a9e22e45ef0064fe87da9f4b855519708ed","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.1.0-next.2","_nodeVersion":"15.4.0","_npmVersion":"lerna/3.22.1/node@v15.4.0+arm64 (darwin)","_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"dist":{"integrity":"sha512-H7pESmA/L709CSpi1cVy7GROWE5+ifRqsh9wARFNkrH0lkttwOTrOxr7Gbr66BglWLB+vlp9H1XHwcM9L2xqdw==","shasum":"6cf69269c654260bff111cf5e3d941ff89089c30","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.1.0-next.2.tgz","fileCount":99,"unpackedSize":656373,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgSJW8CRA9TVsSAnZWagAA3m0P/2zwhUweT0FhyYFtUdTv\nU4iyg8sJxUKeHnOCCAaFDsMrOA1u+h9+96/oVqYPQ+8H08W4v6YLEpwMv2T7\n6G9oYNvwYITngC3uFUUUlIzJrX+QeFEUOvQyOOBIUle/CFoUABFbzhNaaw20\npn3XsxxCm92971O/e62ZUxBN6RXd6smqS96dUWxoYn8bkhbptesjQ2SQx1g6\nFjr9LbNNgnciYiOpgoHI0lH5CRjX1YyWmtndllS3I/3lDdrAmFULXLfrt1nk\nhWuvuBAOoLsNUyvI9r3grdh9NFtZUsjCC3mrlRK39D6u33kAQrycU2hxkmBV\nmZ2C4/sOzoyMoASb6x63wyE6Gx0osFwSQPTGB6nhGekWDwnGV5r4JDtkynEI\nM5lGMdzH+/7q+II8sB9ab44sehY7DeWNu+CXBP+lXUTQtnvE5FTIdSYSlZ1D\nEZjPllmhADnupkPGfbiJmd5GH5b41YkuVzcRaGYgA9of3ibC66ECIrzF4DAs\n/3pujVkJ/1WDXJomYSnLCpgWzr49YMPQc7f9S7rslEqETC2fQ9UZVf8m+hMG\nHZoz3bsYnW8FOxIynlCuVCpJYsEValg4EBdTjeDkpWqRXNHpOS+Et0JfjUlZ\n51GTE0KAuWvM0MsK9C/iQNO8MGYUr6zIZH6RFuLqDcXRAH/A1BuR4S8LJlZG\n3Wz+\r\n=MRWD\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHiRuNLxwsfofmO+7pVSv1McFWirjBL2lOdiMsmxhALmAiEAoDjwqo9mpXcEA47qwL5ftIiV+eNPKvX29zsg8h7FRho="}]},"directories":{},"maintainers":[{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.1.0-next.2_1615369659430_0.6013485803546079"},"_hasShrinkwrap":false},"1.0.1":{"name":"gatsby-plugin-image","version":"1.0.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.0.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.0.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"b8f5ba9565a9b65b8c6ddc4ee95863acbb49fc4d","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.0.1","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-Aa8CV+bt5kboHDWPaZZ9OWDDnlZp7Ut+cx5nMfoXAq5fPgAFtausiLzyBfsYcikjZxgYIc4VBXaUJoi0I7sjTA==","shasum":"b2b46ec7b2203c05b3511e1440100bcd3d2af68a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.0.1.tgz","fileCount":99,"unpackedSize":640677,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgSTafCRA9TVsSAnZWagAAWvMQAIApHlzZ439lmu52uGTS\nuIsTgcEV2cm09wK6TQAlzm2vOZYpcFPKXP+INOSANLoLDiUId0uOQxmehzjz\nwmwPOf26S0x64KDy1llZVZUwJtGTx0QsRs6dhodWJndmHnVzgfkihiCq5sk+\nMyfvWqkNLNgnp9wc/pLRdsjdpXC6S6EC3i1IGCAo3mnLBmx2aGzg7OAdt6V1\nnhVOwx50/W+VZYjWZfv+PA8Jaab3fbaSxs0n3uWI5aoO/fSz/SuzJrhWTiIJ\nH/fDPqfVFrqQ8RTQydkpN4zsfU2wJzc9tkfkyfffgGehaACxmf4m2j7yRgg4\n2oEu7JvPTYgccuqJLRau66hkF9gM6qCI1cDwcONdLI6xFhIjWMpy4maxr+Zr\nz8l5bgMNq9c0P+A6LDOnllqiadB57ledUZVo+pAAmuoQHNUT/6Rz+FzcpnL3\n3XVqSdyQSc6h1dMhtzaJxUNNA+aPVjjGyILcK5kJz/wL62liJCrIRBO6SbQO\nGwi1/n0YnngM3lKMX+XcokpbyHzFHfz2wjFiayNP4IFvlbLDq/JjHZCv51i/\nP+SXT7/HyXEgdSctSwnSP1osqK4ipABVfEBM+IYT5kbQRRtpfGULzKLsDtEq\n3G/3mqgHnpSt836CZRGKQAT0hnqxTd5CgCdEy2V7h3H9+jTlucyqxMOPSsiu\nlUMO\r\n=d+qM\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDd/lAhngTHaZfT0QY/RG+/6n0jOILEUn6s8cioTHICJAIgAW3dtFOD6vmeCqAaVDRqRhmImSVwbDFRfrIeDP5bKOk="}]},"directories":{},"maintainers":[{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.0.1_1615410846942_0.8614966899738172"},"_hasShrinkwrap":false},"1.2.0-next.0":{"name":"gatsby-plugin-image","version":"1.2.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.2.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.2.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"72f15717e9f166e338ba120591e8b4e1e8a92c16","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.2.0-next.0","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-Lzv3KGQcaNjgR8UXVRZbb1E0OLipVPdGP71T+1FqfjtbZlBK+GXJgU31cGh2HrRUFmnjZjq7PKntoRKUhDjxyQ==","shasum":"aeadabd5c461c790bb3ed99c543b0053e5d4e753","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.2.0-next.0.tgz","fileCount":99,"unpackedSize":659226,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgSnnVCRA9TVsSAnZWagAAQcsQAKDO6B+xF9DTX9VQKXPW\nnttq0j1MYvArsif+S5EkLAVkFwaB5sChV/rXeRotGMscD1jx1lE4GTQ0bunK\nTB4TtRh46e3SGPHVF6qLFC7f27wpcSYViwlxZXXN/8OwU0XpJmRb5qigb6Kw\ndOEsOUUaITQ9ga7zPYVMqGnY9Dg5eiTm03MKe1sxvhhnGC0dDLWQ/TDut1MW\n2t8CwxlA9v5C+ucm2vx0pztXDdb9E+WAhs4SHpcteKJIdb3fJadCLbOTBA4l\nQH8e7y1kOigJfTDBjCNf+fNb7nQ59H8GyusX1ws+3Kik+JONBg3ECehi7hxe\nkT95JfCn3LXB3D6mmboR1wT2iUAfFTx343qL+MJv4fhKK5uqW14p4vJhkxe8\nlw9YcYjHgyEA20xCrFBx9qQ4c5tfK/BxKyqrG5iIPvTBWo0689IHJsT+fBXZ\nwQrM/S9xjHp2MgaMh/KInoRmHSJ0ntqF6QOeVjqYKjrw9c+zVL3YhYBT52UZ\nNb1eW7sgy1xmr/V2idIb2bEuyk8vl6lOD0HqPsximDu2CKw3rVC9EsPOjVue\nBHI9yGhAE/36wunfDdyI8i7yCAx4OIjZ/VSD/Kr0pi8ODmAl2fXjnJsuR421\nGKWoZOUx9+ok80dlfe5/9vgGEM5RKrUdREB6XfTz3l4qbn169hhDSEJU2IrJ\nNhk3\r\n=vux+\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCp/3ODqzoBPhAyDo9IO/5pVHYpjcQQ7LV3Rk+1gU+I2gIgEi+ge9GRMcdrS9Nq7aVqLtmUd5UYiPf6YvCSNJ/hOgM="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.2.0-next.0_1615493588853_0.24962272409907782"},"_hasShrinkwrap":false},"1.1.0":{"name":"gatsby-plugin-image","version":"1.1.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.0.1","babel-plugin-remove-graphql-queries":"^3.1.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.1.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"a2a16e4d843df361f5309e9ac82f901fd74d570a","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.1.0","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-r/nsdznnFp8Rz/gLuCKnbHl8cPHdQW6mYh3PVGXgdF9cI6CiJd9kYSs6zCFtrsl+FxMcW3VDY7h4F/1OTwh9kQ==","shasum":"cf7538385ad9c80418529024ad35e2c1f7a919ac","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.1.0.tgz","fileCount":99,"unpackedSize":659191,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgUQd9CRA9TVsSAnZWagAA5ecP/RhUTJe+EAf4peWQQcgE\nI+6SF+fEU2Pgjkn0nshYwlXRNf3yX26JPZwdwF7HHDldo+WSVkQUZisPG2uX\nkfpsC96Q8wlnoYnwbBNvxn5BLzuuY5oUqX+F1FhHqTXrzZtIkv8Giycm9fKB\nvi5sTnBqPhD3assXlhSsB8aGwyZgq70wYZnfdOxoud0YzcXBnEc91mvhgL2D\ncGxPFmNlcgCbp76FuBEZoukAKtBg1G9azCVcHX9bBRumRbqKHcxJ9EWBm4t8\nR8XyPk1xNnrYj5zhBGUBMIeBBiySJJgPRW3Cgz6+NMIOzd4htKiZ65jOsXUK\nNEbfx5UL0ddgaedWHd2s2P/uGOVqfZahFAlJDGhwiRL518itxerpocej7taw\nN1O1cIivlbCMF7HWUAcLkXFOXqkkPbija0HJImtOv+9sf1NelUK1XccY0NGz\nTP47g9dZWlblolS7guopK+HSC/vv3owln6qh3TOMZM6RAQhoXDl5x/fU5HH0\nUCesvD/IIRLlXp+7z3wbAKwQXLy1pd+sAMhNtuupzAB0Rixl1F9xxLD4Kxj7\nnOTfSffR0BIekWahWXWbbiIPGklFR8OplaBbGswAvKGXZRUQAzJQ8IMenHFP\nMu15uZkcMPxYLO8q9EdIRj5qT4GxqH2m0hmcVlUBfnpe8HOE4wkea71WNNWJ\njhaf\r\n=VVmw\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCaoeGtuYkKtNF/uT1uu6a7JXpU5tqTrGQQb25yyz+yvgIgAbvg3TnF4Y0YlbPdMlhIx3vVNWEf0XbrBncO8OupPPk="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.1.0_1615923069020_0.7861500689769321"},"_hasShrinkwrap":false},"1.1.1":{"name":"gatsby-plugin-image","version":"1.1.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.1.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.1.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"220d8f08604d9bf85f054504e0460f606fa646a8","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.1.1","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-8CIldGsS9ZQguVoIMNz3DAfU5GiQc1ez9hJTzlfqUusGbn8UdoVBnlVSVYWG0H0FKFnXuh+6ELksw6vvOGKS4g==","shasum":"b23789c105fda88196d846fc55e3fc290f1a99e5","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.1.1.tgz","fileCount":99,"unpackedSize":662379,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgU3OKCRA9TVsSAnZWagAAdH0P/1CiH38g5mNBcrhaWz5c\nExZl0RLwz7V/bjAoXwXAIo0Z8Y+UOjQK3bikM2KGNA+cHTJl7TLSSSROVmvS\nuL6YYj9VF92Y9c04DqfPAGtU0LWhDP2UI7P7shTjsENsV9VxmA4dX0A5rFQo\nhx5CpGn6j2MpO7/WGb0IXyLd/T/7bG68tl2qAmglgxXRLtALHBrT2KDAePB7\n2/lZ2taVfzMQBsogfkfhbIT5FWjQm0wwbKmtKzNHoasIM2p6DiQqzDbHlqLa\nnd0nESjLUIMK3v5sk8ofbW+VHG6Yv7iJiIEtSvLffx/GPGN2Itrh77hP59rH\nei1I3n7mcvitiHyutRRVvorJVjUebsD/s3veGyx2A5LCgjui36R7kqoiDV86\nR4NEQN4h5tYiIHhM44IzKs2pjwkvGsipzVmBtdPlitJzxF9mcefKrGaVn6Fe\ndKrmFJasHbs6e2HRtqllRCZcI5OhuMq9KQbWJnqocAlzQMdiHHQ5S2BAHBTg\nZCeo56OrsC2b9aRUQAqq1VVxfZQTgsC247+VZVe3SYH74D/B0eYueL8wYXWC\nyYW1vVfwgGhulDrjZITMw2J5HpFHlDP9aLrvcJkv28i43SuAJhnpEy/uOHc+\n5DwlIcAm8lptqTXalc5ThFdc9xC1hnIbkGPRM/uhhMJ9ht7tT3VimTHlDwQb\nXDuN\r\n=GBIQ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD7lhMvhD5/Cyy1RowiBDRdWeHqfyXQbU0Clf0WJyogpQIgJeaEXL2H9LILBn0wmWPZNjbBBaczJx7eb42D6BGLXZs="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.1.1_1616081802210_0.5532145789434222"},"_hasShrinkwrap":false},"1.2.0-next.1":{"name":"gatsby-plugin-image","version":"1.2.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.2.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.2.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"e83dce5cc027f0bb6e0924e9c8d53f50c360470f","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.2.0-next.1","_nodeVersion":"15.4.0","_npmVersion":"lerna/3.22.1/node@v15.4.0+arm64 (darwin)","_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"dist":{"integrity":"sha512-RDZVYUonQVIExV4bCNZ+C/3g2fiYxC4+QELguxnsOflHdZlsrt1dgfwdOPUTp5rCkLVhpiAN+klR2TiO96y/fA==","shasum":"9690bf19d0ee7605a22090e68b8867ce43220787","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.2.0-next.1.tgz","fileCount":99,"unpackedSize":674698,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgVJjxCRA9TVsSAnZWagAAdygP/30s8/2Ujng9uR+jBh/R\nocX8v+RXs6UxZCxCt+N1mSHnxJVd4o2u/nkkA4680wTHsSi+TXeqaDOQyNJd\nQw7xoGu8YE35wzkhPyEldh4K205EyEHLPziDeugjmsQcaqxQU9nilxnj330a\noguUOyyQ0HHQavKTf2gd8b+ec6SCbzFnVyY8JfyOmdak5nX9BH82F+cfZ7d+\n18v5KnYS9QUmHZScacNUYjSPVyslYxLoV7r3sTTNcUc/NzRD01csx4GDSMjC\noZyCdGnqaMir7sm/QLiThTE4bR7M45c8wDh9WdiGzprQP+SYfABLYmh0R/Yn\nsHwCJeaWd/KeFCk3hEGwd1174ftjTjVruhFGdWVJbNhlzBh66ZwCcLBSpt8b\nVbxzp1TgWjLaGjh7MG36fuv8/hMmSVj8CtehEJ/zeYBxeQFqvQd5v1N2Yetn\nFWzr2LYfAFGlHPL3wSrM/NjsVIyTLONIo8iSsQfA7PaNMOI4rFUQWSjhkpmQ\n+IZXtCATM+5K5yK4/BIbC260fwHhLN4uWyymHe2Pl2fkUY1c+ueRvlBGvuhO\nfuHByCc3uEvSxB8PSr87aXLMK0e/rhxbo29HudId9y+JVYqZk2OgMv0s11O3\nOiPVTWXdIUwp/KBiy/iuRo9OJZUL8+26AibC4dRgK/RCvbHy6qtr4B1zKWWo\n0qNb\r\n=kcrQ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBp3zhAMvEujaBa++gSiPwBCEUIDAaBNpn0VVk2dy+uMAiEA90Yo4brtDZfw1NDo7O9kGQSPZ3Tt2HDBMw6CofJI0V4="}]},"directories":{},"maintainers":[{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.2.0-next.1_1616156912933_0.9921160034384486"},"_hasShrinkwrap":false},"1.1.2":{"name":"gatsby-plugin-image","version":"1.1.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.1.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.1.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"6c0a7c6f1b70440ec812a3f8b52394733fbd5cf5","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.1.2","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-ijuCa/++l+J3lUuEQyDPu1CoQ9dMdjlmgXQIZZvo+ZK25FlWVvZn/tyyg/cFekqv+Ir1Dr8LnHHlxEKdvYkIrw==","shasum":"85fc4f5356bf29c2098c4371e5396e14a0ff632e","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.1.2.tgz","fileCount":99,"unpackedSize":664580,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgWjjUCRA9TVsSAnZWagAADccQAKF3V1fkO2F3c7oW2oXP\nXAwRgAs1h6V3FpkMkaFx+gylumCbFrpJyYwB43sx2nRDAlZziMWEZsBQDIPv\nlD9CsW5SfINmnTNPvAIWHQc2yE/KQaYPfl4PFxBATQrUDDjHvImlJ8In5A+Y\nTsPjeCzz11t5KTYRKN/dxa8dNa6C+cDFi1lPReVklFvpWjkxf4d8fGrm4iK2\njwBwde3t0Tj7N4RxHL7bPYSwJzlD3FKyUhQQuFwk3+A2/KaT441bDgoLJGUI\n5HoAlqDkDKAp0S+nEG9cJ1zlqgwbk8VOF8eFB6+npbxOjoOpJgnzAoDMVH9f\n3oGP1meJZIrKZ+YXx6pIwldmdco17t7DrxlATJSGVKg+2B9qG9INV6yaCokX\nUUJZ+8b0icR8HqbOtQfxObJPa35qkv4VXddHqspikI1wSKlUhrbHq5xAXdEQ\ngAkCste3d3vl/nOjUIIoj0vWqLhOs11XgHt+2s0vNSLd2dPXQI21eiQ1nY2P\npjav/P9P5n46jE6DIxwK7FQi5GUfMLRXSUzA6MEs5qnquf4ZdnsvT+0lj7CY\niHyPMwr91O/SuX+mrhYdKfKfSA0l+gYl/l4bIEw5dVUigIFSAVz1G7hb34n2\nb4S1kFg0l+iX2YzMFXWjMzmbLokYWctqWA+5ZzPK2/pJS5NoYIClgVo+f9sr\nVJhq\r\n=CJt/\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDvrTs9frqtCXOGAhggMeIruT3mFi9r/xRsVn2Y8+IUZAIhAPq9X2UYxFEMABNsfwKTLR8Uhbie6GjV9XXIT4RHVU++"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.1.2_1616525523447_0.5433506848046414"},"_hasShrinkwrap":false},"1.3.0-next.0":{"name":"gatsby-plugin-image","version":"1.3.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.3.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.3.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"835e00e1b585f083f7cd6396ee5c453cb0137cd8","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.3.0-next.0","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.22.1/node@v12.18.2+x64 (darwin)","dist":{"integrity":"sha512-/t/ArtvdJGX6B0emR5yTrLBdgWmHY0t3+JKga9/5U0tLbWExs66MJdZApDMA0UHhRVwKg0fSqCypPSsnUdPP/Q==","shasum":"508354e1c3bd512d41c8d794a942a733ac0761a4","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.3.0-next.0.tgz","fileCount":99,"unpackedSize":679919,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgXMhBCRA9TVsSAnZWagAAfWkP/jsRQVy4kTworBN1fC3y\nyL8Wk0lvdPQb9/7G4/hoJiquWsiSugWynDSM/WdhPqwEgKG/pFv2VeZW0zxr\ngcne8sJjg0CVWtRN2Qlei3umRKT5iHbvrUgOzlIiuglpXn6ik16GgfwSAVmc\nHSA5we6TknquaMiQlzP0nmgymV2P8Zh1DPUQY7t/yvgGOKVBo+1wpiWfpMCh\nHSQ3IeJgns292YI0BAr4R79gqvR1ltcqNmuk5uftu6NlF16rHbwF8eVVJtbQ\n3TGobiRzzoOu8VmnaXKn3TXCdEmFSH0/4h2hB8AGyQtjKESm4Nvpwd/mkECC\ndiUBHsPKQlA5eeDyt27nQMNsEYnZ+Mc4+dGkt5EvwNBkTp4eXDvWF72QhGxo\nIFA0g2CrzsXaHvc61Hc1G/XeZJvxTnr4tmjGvaqeVUsR9rMqqxYKHbP4fE8u\n95kYmaRiLixr1bh0KrQcWXOikHM+US4d6ECf/cBBDSW/RrS0LShSi6S/HRpz\nkcxzRHGINtkileH4RX80yztstdP6QFL56aKu+PbuR/5YIbR4bwZ1NLryHM2z\n/v7y9Ok+keAWRdtXrnLwKa2fIiRmzJSdfIEIxZU8Kb+Rcqakb41Csx5L2jxk\nc+bDce3dTWG8yV0TZCByt5WHybYR+y/ZiTqSxC5ULWPfjsjdjW61m0dBn9oa\nzZGv\r\n=lB7i\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCp1bsTjOp19uXNyiFevbfnPtbkObhDna7hXokZKxpnogIgUKtipX54XvqXARxl76Ttvsb3qAimnNW6nfPNVXmTZkw="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.3.0-next.0_1616693313001_0.832020548297357"},"_hasShrinkwrap":false},"1.1.3":{"name":"gatsby-plugin-image","version":"1.1.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.0","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.1.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.1.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"85724a650b7b1545d0ba2fffd0614abfaf2d6fbc","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.1.3","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-dssOQWdz2rUO0CwvPtusiJJDrWMrdTLegah0CPLPLIvYsXx7fGrprbQDsUbro72FH4nH6/mFW6xRi8cWE3de2g==","shasum":"5e5dbe8dfdfc54f902a3f2245993b3bf2fb951b2","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.1.3.tgz","fileCount":99,"unpackedSize":665374,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgYzGlCRA9TVsSAnZWagAA2gcP/RUuMIALZtD0lk2DOrKD\nCermPWwM1us0FQDNttp69s3ORqM6awu+kWi/ZnYT5I0LslCqFmoerMsM+HUK\nUBFXKk0+cpJWfvJSiXt3qc08Qq8WIkbUXIRcj/ATFx+BtWNRz/vFv0r5+ltX\n7SSeuMQeqYn1mnvkSdYqSjGjb+ZhUzoVzoGz8E6D5L8LbMCOBInWJ/eXnaGp\nfyWSYpcsRnZvUXFEO4zk4JTCk3cpQQM6MrhOFbWGB02zN9vI+AgAfZmOL8vM\noAPKrASxQK3qTPChQuEQz0WM4NW/w1imG5dwRN+sFLCpHy67RYVgjKb3XIPI\neqNh5LMkbKXASy6Ty48ckFP74gWDGZGQei1uHNZVpdm8zZdbt7xfDs6E4YPI\nnjQO1JDrPG3xVL4bmOE0qMs0qh7EdHsAO6WkQiUBd3e6J7NNTLkxAhMEdi2x\nouRZBAc3Ri+VTFWBZJuwgVV3WXWccaFXkzBaK7rrkBdpDanK+lGciYE1rIA9\nQ9iUKZbtXw02DaCHRz4eLmaVtopwb3iH/yml1t1AP4juY5UZAmwWco/YSPOp\nResLkxIrFQgvoBJI33iv+C1Ev6Qf3h4kRMaxiITu2pf5WjL1auGDLspNO3Sp\nIqI57dJ75y7Z2BZJ8Yz5M4hOUBTulLkLsB1VsVqqS8phoJORWNEJX2zvNFKC\nDzcJ\r\n=3R8k\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDPDcXS7guv5CS1svju3S2f6entQkpRSRDMTpRRaf01sAIgMDjoWXE2HmtLBOatYQ/fzENpLFSiHOx3DaXAnlsdLO8="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.1.3_1617113508960_0.16863084452951438"},"_hasShrinkwrap":false},"1.3.0-next.1":{"name":"gatsby-plugin-image","version":"1.3.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.3.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.3.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"a55ffeb955b3a329190c605e0101ee6cdac83e21","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.3.0-next.1","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-JZujIRnZVcSk2kvBgX1okTSwILYHsOp/Ug2i4vUBVvWnGmKCNlWBo77/4Tc2G1yUbXwkX679qVnAYlP4IyHN+w==","shasum":"7c9d4f9691f7fa6b671762626ab61171a15a136f","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.3.0-next.1.tgz","fileCount":99,"unpackedSize":686132,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgY02VCRA9TVsSAnZWagAABp0P/3YUOAOHeGd/k1w2+XLe\nF8iLyPXQe75hVsTfcF6L6EAb//L4uLkjUo2CCaglNMqF22DOfTcRJvtmBnYo\nExNJcwhcQDFLrpFKKIAHZYpOwivqBH1nHj25I1bvrO5vexR5i0Z5YRYr7kSA\nufV10Lc76dOR877p43tKSynBJHLdwo7u702ZpvbPmSvweriF1D9rdbgO999D\n/VFDTsSyMrPpdBwu/SrNGYBxyfkdoivaNfMZJqckFozZVu8QMyOlobWA9m6y\nKbdPTf9KrRmm9upI5LBRRZJOZD5R0Z1F2a+kF8CAo/D+sqeguDXl4yEPmvxq\nDJqDHPeu/Wpw/I7kWP36ZcIzgpwiXRD8TlH+Ss0e4h5bJJSujjgXcFzI4EEY\nEHCsYfHDG1rNTcnad9Cye+2emTUVtOvL9/zSI4Xwxvvgl0NAW1vFvgNVD3s5\nCfGir+Dd9i+L9eSrGXxqOjlpGGE07RBiIJR/EFFJrKGEwoDjl9x+AfAPsST9\n4f8s73F2LGHXVyGelatywjPeClN7DE7/h6KE3SwUdgmYl6U6H1SJ2w03E3Lj\npaT2+XIHBZVgpJkQKrf5IH5g5NCQG4rY6esWybfZ9P2UoHPag1ttdguJ5vPe\nOlPmd0ILS1Lr7h8HAIkkTV056Hd8QTBxtdvKRg+PQkrTJ5FvunIy6nXxmSJs\n7CHN\r\n=MWd3\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIB/oniXo/le/rbVMTgZavQMdX34jIUT/f9Ka1NQFEZkVAiBmb3zsRDvQfYVfVIhXV3UrjvbPv8rKuDmu5S8sB4iNCQ=="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.3.0-next.1_1617120660660_0.5032608916276278"},"_hasShrinkwrap":false},"1.2.0":{"name":"gatsby-plugin-image","version":"1.2.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.2.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.2.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"fa00b246dcbfede3d10c822c64f943e5987c8859","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.2.0","_nodeVersion":"14.9.0","_npmVersion":"lerna/3.22.1/node@v14.9.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-tG39QNnmld4rpTLettTL6r8BFm1rRrcionBpgUJXi9l5W4UaUn/hKdM9jV8g5aNUzo4YrEcgZcf1v2dPfrz9Iw==","shasum":"ad571ba270b5c1e8a679ac33eeccd01ac3370db3","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.2.0.tgz","fileCount":99,"unpackedSize":685403,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgY1iUCRA9TVsSAnZWagAAq/UP/1+t9YsjCIZVtDcPGCD6\nlJtIe78eZh13JvEUpWjOMs8kcCkRJm51s0WtiUllzP6nPWeZGUAKLVtIjPs8\nPxkjXxP2LcxH1mMTwmIUeT8IDLGzhIFFXI6fflw11tuRGCMpQXmV2U2uVz1m\nZOa+pFizCfU1JMXjcYBz99mZBPHbxgEnqWlH1QuuOmJBNdpkuexrywI1z1H2\ngYUjQQ5wHvVop5DQ+yOHMAt/67gnGf7ksCx8/vZaIYq4nM76fzJ/m31yPSsZ\nyP+L9MkEVbXppyjMev8F9Sfn5vkMV9J9c7gsf7po0zvvgQYq7OLO9LyeBKz0\n9fNtu+fLXneGyVCfGsA5BOTPnfpmFJHRnxVrDAdQEk424/xcnKTdl9bHxybD\nFDR9hyw2bJqGwegw9RnImvfIWnnMkwT81VerxC5i3NfNa+HhBgd5crfu9M/w\n9+TigpDXoZ9xCFtT4/eisunUBXCVJpOGRb4qJlbdTnZONTvSPjFKI8oaOmhZ\nFyUB5/0HrUb7b5apPa3dHdpUPrMkhRpLM6bTkma+Cu595AATzXdAfctdq7GZ\n6e0qGPHs203nHSrnT+7A4AyIG3hE8/jHhRgwUxPfuz9GEMvNznXHMdspi72N\n5RVWFS1eGV9GhWAY0KH+ww/e3p7gTFKAKKH4g/KUDlplUoyAlgVI/TuYbGJp\ngLZ9\r\n=9CMf\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCQcEdcHncjzjTWs00ULNI+xeA4lM2/ZLlZj7JNYr+GvgIhAI87ijpzP/DSyK/34WoxHr1tNEJn2eL5cRsDtaB1SXD6"}]},"directories":{},"maintainers":[{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.2.0_1617123475585_0.27821346455156437"},"_hasShrinkwrap":false},"1.3.0-alpha-sharp-upgrade.15":{"name":"gatsby-plugin-image","version":"1.3.0-alpha-sharp-upgrade.15","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.3.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.3.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"71e3791b15dc4b3c20bb1d65625bfeea5eb487f4","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.3.0-alpha-sharp-upgrade.15","_nodeVersion":"15.4.0","_npmVersion":"lerna/3.22.1/node@v15.4.0+arm64 (darwin)","_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"dist":{"integrity":"sha512-Th89A435+qiyvSYJ+FiIaz+ayknzXAcqdAiHwPKxwh6kC8xQijmnFCF4tpiZawWR8noo9eaUMgNJAKbzPVEliQ==","shasum":"5943562671e17310a902581cafbda76b59aabb46","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.3.0-alpha-sharp-upgrade.15.tgz","fileCount":99,"unpackedSize":683384,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgZDCsCRA9TVsSAnZWagAAUokP/1OK+isrRPpHIAb+ZunH\nIBNCzVSx717FAMmzNErE7tsT1M4XOGGphmnA4CNZta6yW5oY93Vvy/ILem0L\nJoMaSpAE3yhwRcj8R26KhdSaHFSZf7cih2RfrFPmNbEtRbFTim+7DCc4byXs\n6Ac91NL4DvfnH3I05bcM63xH6+G81+A9TF7XpmjC4dX2tBZmqo3Jw+B0sAiB\n7ugMM6tr3HtgLcR5QwP8xC8nu3NndjMmwDZxGkb6Ps/kMlJezAWjLJPS6xE8\nWIICCj9RWc+jBHba75TBXyF06RvgkQScY3AfZWNVmtvncmFbGgs1iDGJVrKo\ny+dfjNKc79nlvDYGJmbcWIHGDK+qmkEHU3dhQHA9ZulgVe0Yh9VRkBVvKzea\nk/ffOxTBeMXYrVeDG2aCJSzO9HVlSojyjduPeZXk5qXGAVVDT63dZaTM5yl/\n1UCNPt7vMjTuXHSdZ6IaCKlXg3jDto981dXEt7P0sPSokT12UVsJE9X9Usbi\n7Z5tTazEtGv/kBSD4Mkc3qh2kedOIZdFfJrSQIT45ZYonYkiwXCP9F4DI0P2\ngCDhbIOTHZqA1LXM4OuVvzKxAN18aMICo+gsRBwVd8HM59TAl315t1w8j3GK\n/FiBAaKeI2X8FoGJ6hRWseW1exnpVHbvZkugL3PF0IWFHS7gI9AtyYIiMrn1\nmvzb\r\n=YYz3\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC5ksKNJ9Rp0DfI/z9gULXuRNYWoLdaZBR7gLtK3K6GcQIgCff6tq4egFV0PtrqFNcVG2/+2o4SF7+jR0n8/IFCwXo="}]},"directories":{},"maintainers":[{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"laurieontech","email":"npm.laurie@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.3.0-alpha-sharp-upgrade.15_1617178795541_0.493327623702025"},"_hasShrinkwrap":false},"1.2.1":{"name":"gatsby-plugin-image","version":"1.2.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.4","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.2.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.2.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"d616e65598cc2fbabbbc8a610f5ba329942ae5d1","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.2.1","_nodeVersion":"14.14.0","_npmVersion":"lerna/3.22.1/node@v14.14.0+x64 (linux)","dist":{"integrity":"sha512-XXIxZdcqlI31hHd55Ba7TrXbzkYT+no3X+VOek1lTMjEuTQDnLwrpCgCBFwp/YgYNgPRV7b3QnHpjmc7sUY+Wg==","shasum":"69f220c06593e3b35d1a3a22638d113ed9d8f368","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.2.1.tgz","fileCount":99,"unpackedSize":684320,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgbafvCRA9TVsSAnZWagAAdoYP/0HR2leS6lnOmcHrZCBI\nnHY7gdLeCt55QjFdEPl7bvdzcYNKii3nQYIPaS6QNZcea9GZaX/ThDzVw26z\nQA+RObRcMhoRbnOXJAJSIwR7wn2pnFFmhn8eX1YkxFLXumY8dO4E+OLqpbp9\n0YGyzlBATMu5QFE8gO0iW2mZlspN/F7W3ZtZ2AZcCbE1QoXQSNWqemu9Cy8g\nzPIYfhuvl3ZBkUjfUSrROHvFDr75I6tl8mItC+aj8V3AZMQR6mNSf1BfyzTJ\nuRxLSluh4Mf4t5kXfM70NwWqIvd0QCjmlvapmWx0SceDUCqPHRcgRLAJD+93\n+MjzTcmwhhHmZRDwlGdUIZouxignDaCIyCrX43Tcla0iOKodGdsOacT+cEFN\n7y/01bAZYws/20dYQJk+J2uKbj99oe/Gl11UMDZYF5N3rUvUTFd3cdyB4SR6\nUf3/GGmsJzhScm3jKw68q/y9XiX09aArC8eJDkb8ZqYK0EweyKpFouYIQRAW\nDXIx8/pE4aY3uegVpY2jEv3tfyHmeDWJJJNWApBF47QvWlCMxq+L62xM1HBu\nr6HCcyeIIsUHL7ZLLQD6ySND8iumQWq3/93BHyD7q0x/IaDeyvxM018gZV+P\n58tBE2e3XkmXhKHkkUdej+Q14Plrml8Vv2d1l3EGJv2IioglGx5rw2174CGu\nNhKk\r\n=+YNi\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCUEQQR5U5aUXGl4VZjebFpWwsYIiji/xpKR0R4wT2i9gIhAKBbD+Ojrt+xVmBNT3tNZxJgJGbPNMMIPuI1gD+VsKHl"}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.2.1_1617799150737_0.6645828460562482"},"_hasShrinkwrap":false},"1.3.0-next.2":{"name":"gatsby-plugin-image","version":"1.3.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.3.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.3.0-next.1","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"a60e92f1bb4fe0beb37ffd2241afa814d265dda9","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.3.0-next.2","_nodeVersion":"14.14.0","_npmVersion":"lerna/3.22.1/node@v14.14.0+x64 (linux)","dist":{"integrity":"sha512-JB6bo1mJEI5vIGJ+b0h6XPxkOvpWgYYCXBAZEoolhdpIFBo2AQ5w2spss5etiO6dL/vu/kBaig3VVGLqP0BDJg==","shasum":"532f41643d0eba986502e8944dba7694ca111702","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.3.0-next.2.tgz","fileCount":99,"unpackedSize":685009,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgbdBUCRA9TVsSAnZWagAAoyQP/jE0YIro7kvOWgOGUYK/\nEXJuPAA1Ed0E5byI9rL0PDjo7nfNzxM918LxH14uHQ24Eu+mH4mAU6/asCaY\nolWQILP1R3qoTR6NCX0xgeGFliUA8MkHCalhme55F3vGj0CC0ttDSM54a9eX\n25GAHfWgCh8i94MbeoRWmdM6ooeMS3TVMvXH0pL0pg2uLkSsDQ8Js6fBk8WL\nTlNldH4LwCUxQYEI+SJiIK4gtws0gfj4vNYj2feFL1Gwss15C9oJEU3h5Ir6\nseS6mfMIPkj/pN6i7AgHuMCMMH8NKxv9SUakdLST2IFt2C+2iAQuSw74xZ9L\nstyOeXwZdW4Uvr0TICbNtRD1UFAv65p/w8uIquSQr2DRcF9y8MWDA/HmZeWl\n3Dt8kiIPMpHewlXp72+UIIENhoARX3QGFJzZKgHVrz9lM+q/TJmyVdpPGsFo\nRS9cJ1l0orHiF6gHM4hQbq9LcQ+cjxoi2YhEw7CFM0JWeRW/uc/w4VB8XAfz\niTNScTYcEgJ2ICqGTjB5FHX6z/RBuQfTVvvo7W0gmjD7Gqc0qBX47YM/NL3M\nERh2A/kcgXJrmtpUdEm1sUloohL+H7D98fHAWgRymbbgqgD9AuCNqrCxywxa\nPw2jmc4vN5sOqHqTB+4wojihK4YHq7LyFflSkgkcXqTQd6B2F0U0lQSsLHpp\nsnca\r\n=2sg0\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICLawfT8al1fmt8dd9bJedBlbQ/X2sYWn/4rsn89xnKPAiAiHqHqRudC0Cqn0yb74sUO0RGZxX3V72s1tJsOiMBJtA=="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.3.0-next.2_1617809492198_0.21061341535318223"},"_hasShrinkwrap":false},"1.3.0-next.3":{"name":"gatsby-plugin-image","version":"1.3.0-next.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.3.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.3.0-next.1","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"e40c83dadf5d5f506b99aa9f512505d77b92bf18","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.3.0-next.3","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-kMaEPydbVLyz1+ZeQ5bL2q2BgQekHo8guaoQWx864OQdIEOEOYpHQg9tNN1+/lreWm/ctIr17SwEomCmo1RU5Q==","shasum":"5aae239a23c3ae6608a75ee5a7d938ef068e026f","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.3.0-next.3.tgz","fileCount":99,"unpackedSize":688149,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgcGlKCRA9TVsSAnZWagAAt7kP/24AA6UnAMT9jDD9n3pm\nnognQehSvyfDOfE+IxWTMAKImCLm2qOq3iT0yRsmo/9mEHM0sDXKtLBH9suc\n/ETpRPSDMqle0kJobsHnFJ6X5v8eBIZtOU0zI3HKfhTElztXUcpXy4EuiGRS\nu4XI1Fk3zYhicKWPY7fvOw6Z7CnGtLsUUcu9/LWonJRZXNY6W/aYMRUaUEHr\njYzAKpHfMxoMV83zB7mp0VjJaP41t3hdN8XR5P2q7YmJfNxPNfCVjL88ZE++\nLtIfZNVJSo2lM4Wec0XBa7gsmQNZYmGZS9dEauA2VwMa12kuYffkDrmbjFGa\nYKlwsVNDBCeNqBEhD4DCTjIu/gN5AUqcrt5/MCWqV6SSIDxlpRa2VT0Sjck+\n+5XbAZ2KqJqUsUwidOrtz0yXnLSjtjd1Rapa/5yLlTCwE/FyswC1ne6ntq10\nBBiHPpYD+eaMVvc3pgZD3IL4KOgEQR3Li/curUYKVhzZgiS77HZ7C8MUzx1m\noohA2ZqSCypn/4UzS/us/VuQ9C2QtLhcHmVtCpV9Ok6IJBGQn7Nt7LOUB3Ts\n1ehQ0sC399Qal9MWhk+AAHwv3i62Bx3ufZrWDSxVNTB9ZqnzfQG5OW2hZPxR\nrhHPKkEdJDLgJ6Gctlvzbq60nOWtKBiU3thtDWnK/cKHJAllO3Lt/kP9lXRl\ndQWc\r\n=bj8Y\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDzwnnfqum5h4dyWxoqQCT4v0pkkrhSyBM7F0gfohfL8AIgVGGeN0NP9ccvbiNnJIGZLmKQSXx2GFguP7VzvtuSF+Y="}]},"directories":{},"maintainers":[{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.3.0-next.3_1617979722341_0.8596183482974271"},"_hasShrinkwrap":false},"1.4.0-next.0":{"name":"gatsby-plugin-image","version":"1.4.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.4.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.4.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"150af15d590f1f8ce2db093cf196f3edb6ba6f64","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n1. Upgrade `gatsby` to at least `2.24.78`.\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.4.0-next.0","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-c0HAMGq0PpZ5FVHsunqS9lx/bUI8FXFK0Fih0cfZV8kSYm4sfRxGC5QmLi3ShEWMH5Z4G207WkvdfQPMefrMjA==","shasum":"bb6aa4ecc5634a4550ccc1e16bd62860a12ccd3f","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.4.0-next.0.tgz","fileCount":99,"unpackedSize":688353,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgcHEnCRA9TVsSAnZWagAAHAwP/3KXX/1GQG9zsdOUS1Ku\nZU3BYJM0dNyZU20oji3xqAP6Mx8edeqbKJGtDlpm4MwllkAmLBzPIBhgulbn\ne9Aqj20LrekBfU+aKMh3E3EVtm3nMsPsFE4HfMiiW9IHZM3e7tVhMlUuttRC\n8ABl536pcWieHEa+Y9ZSHu5ZFkZvyn8xJ3ajwtWR5WkhTV4bOCVohu1PjfPq\nNqHgyaa9sQtGdIsRqIlqHbfrcoBOBPlm0anoHsjzgKmQ35Cv6DP35MAt4qrG\nEj774RlPzG0jrPKvP2nscQLydtGIMQcKsL6XmIJd/AXWwyBCEuVX+cjfW1Mk\naVVzYeTsdsYHvOhr6Vfd1PUcE9vccTrjf+lgBgVFwNMLEvDybpFsARLYqsH8\nbQ1jCSG7qVPNKhmNDhwDBH8lkCzGML51tvGFxutuOs4IfIF9zN311whyMlGo\newCZ3eNC8hPqAjo+UwKICN60kflJydMH8HuP9UiYGsb7261ScRHiAtkKdUFl\n8LWUVMjzG1thHIRqILtgtVQ1ahhu0wwug4qOGeT2wATgejbub+2+koiOyPvp\nnOz43GpzY4Hu2jHlbH3su/MDdQlcvoh5CSikP1nYZh9GltOML+sCwOZNcqHg\ngbfSLvQ6CaCnTR5bUZuP2roPWHQB4UxaMcug21khIzfboczWQbRD7/4kAp06\n/NJb\r\n=XGQ1\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCQ8acbUheVoM+n8eiufXBjqi0kcRTCy9R36CpBSjwLTwIhANAH9tcPVAksMMUi2Ji25yC/JC9K22jaLnU9Z1udLv9u"}]},"directories":{},"maintainers":[{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.4.0-next.0_1617981735213_0.832512841449818"},"_hasShrinkwrap":false},"1.3.0":{"name":"gatsby-plugin-image","version":"1.3.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.3.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.3.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"e98cb629f942b7b61814431da46948162ea21c36","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.3.0","_nodeVersion":"14.9.0","_npmVersion":"lerna/3.22.1/node@v14.9.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-nbz8AoZ9WqEAZbBuiIyNWXslpowfbMOWDVpHUCktGK/MKurhAIKcClo6zKQSlGWhfKUOmi4Amsj04Mom2UfEmw==","shasum":"7a661c4e66e675adc9d0b65946c0d7a060c5fadf","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.3.0.tgz","fileCount":99,"unpackedSize":688318,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgde89CRA9TVsSAnZWagAAf0EP/iKRfEfGUL0JUU0Zz2ZH\nL3Hsrkwq/Fs25woAr4cwgmCWjfCBVPCPqtMxrlBn7B6nwmfy9H1P3fDQJiUD\nGu28oZeP5u9Qy/oAnhSaYZjv3o0pUdhcbWl328yuA/y7cGZaLx2zvvvPESCl\nNFfgty/kP2HOXeBnl4l+N+io3kIK40d0n05+8efXdiCY7P4VS4KTWmPpjS/e\nbUFOwMjLGvq/eo8RT9zHOOYqc4UPJNIIRi1LqH7/pYfhuuGBmDMs4MvuGopo\nDEE8XCXN5Uuvu5SDcC98K3xtvnACieG3Zcdso4lNQNQqHfIlYfAAmbJyIFsL\nKYipfVXm+OdS325AIRy+5DvQ/Ktj8guvWACOqzvkXeIlZ6YMyS5za2kvVxdG\nxCV9xqncww9UPO9danRqr8VlmkRrm9TvrpMe8T7OH+UWaN0OmfQzztj30979\nGx7tKdaZefrr7hYWLW7wZ35yzBTBPUMi+Qf8FScecaz9FTRbPSAQVnqrYTws\nEl7Yt6ohXUJ186gFbhIAQfn1p3ITxi1GdwnqJhzl/m/YUai0cg0CQ0I+HXuo\nzx72ODicX7oB2s2zJ13mbbBMryJbYP8Nso8fh6fdndUIN7k/8LoWEXuOo3ke\nIJTXdycwA0KLD+go+hgQ5D5AYKDkanm0d6hT2JxxPbAog4LaHSV31NKPDNRO\n5SzY\r\n=Y7/M\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDFa0dhlXCgEzyDKadCVpJRpt5/Rl4kZR0ss+G5G0BNgAIgdk8/vYUsiYtrUPWoMMflWeYtMDuoYk5gfjgZ4b24Vp0="}]},"directories":{},"maintainers":[{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.3.0_1618341692673_0.9487522797885606"},"_hasShrinkwrap":false},"1.4.0-next.1":{"name":"gatsby-plugin-image","version":"1.4.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.4.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.4.0-next.1","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"800fa23de5a98e6d0a3e7d7dc3897134815a8dc7","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.4.0-next.1","_nodeVersion":"15.4.0","_npmVersion":"lerna/3.22.1/node@v15.4.0+arm64 (darwin)","_npmUser":{"name":"ascorbic","email":"m@mk.gg"},"dist":{"integrity":"sha512-+BJc1MMallSjCSAXiv26a7fc5ENKB4lTAPS4evVewuKFdEYyouQNFc3ClpwMA9n2hu6prsMUV03ANz7AZnGQ7w==","shasum":"2f89a47373e038bda51b1a51b6d14e5e10bb0bd7","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.4.0-next.1.tgz","fileCount":99,"unpackedSize":689076,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgeXd1CRA9TVsSAnZWagAAhN0P/1/3NgSdnF5rlTjY9UVl\nyasJrvzGMSVGAHZbxHKbNVxirNOOpcSlOD18U1Qzg29CFHJxVs9PsqowmTQC\nxUNgadUQ1iX2VO9IHgjpVlI3Mg+Tk1gQ0wHrG9QgfVAbnggzylmM/0UKQ/en\nJy4MxYMexp/cJHO2eZeTxfOXOZiXIBdaWYK0fAmxUm4PBKT2DeeDD8TxmjhY\n8ZoI9lzT1cXE+t59NEckiReO1dCFSkXYrXe2to3TRji4AG0xXGmSBxRayWUu\n08bE+jlVqybJqbtUHqliHc/at7Mv6ub9m+ZngKM5smJIPnpa5xMt3algKbKR\ncl1dbGAwX0dpVicxxBa0WlFP7C+wEaFxrAbLl6YlSD3rbPk8ThKti883Ky9J\nihsYUOpBhjoktXjw812lDWpHAvpTtTuzmklggfz39Ar6IciIIWH+VUfe5LBa\nMv5QpMpAUh94lfAKBE513Rjfm2B/xdEgrumPfSzmyqRnNUBRRLQ/QfVa2iz2\nUYdu5jXa2peoH3C7r+o4V+XTk2G0xXtOWcY2mzRlz4K3TtqxiFsvCSHGIs7D\niceN2J5b55rk0eeIswvivW6zUr5k0DW6aTFu8i1+2tJcUja7BmVZGgobIbVS\ndkHTmx1L2kYbUoVvaEt1/tsPI6T0cx5J6IjB2JNB/yvGthwrkMH2EmoUUaGQ\nwU2v\r\n=96jx\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGPr/4jnPEOkmLEHmvcsUZHz6Rcfr+yFxHGeH2dCGhMdAiA8+0lV+v+n34k7RmGClbRPf6hK5HWlOt07HCm+8nuTqw=="}]},"directories":{},"maintainers":[{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.4.0-next.1_1618573172675_0.6771829882984395"},"_hasShrinkwrap":false},"1.3.1":{"name":"gatsby-plugin-image","version":"1.3.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.3.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.3.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"8fab106da592c5c0df4facb63532bd0f3a55531f","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.3.1","_nodeVersion":"14.9.0","_npmVersion":"lerna/3.22.1/node@v14.9.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-ZSXBOFSYfbXGWxwc4JkFCoBMZjWLkj8vWkJ9Fu+4Gh5C4KdzveKTDJ0ypBJZU12z5qW+srnMDXVI2Ym+zL57Vw==","shasum":"c3e1c39159fa32d02bd8737fb67c50bfc51efd23","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.3.1.tgz","fileCount":99,"unpackedSize":691973,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgfet6CRA9TVsSAnZWagAAf5EP/RjUNZ1okO7KC0NklTax\nKjcUOVWT/FlxNAMI/X/L38m+xwwyFU5HjtXKvtwiZUp3lueHJUmheTFU1JYj\nfhxbi0RWM9JfZmRBbX3zR+4E+je17pZqmCsm3/yrsuJtOad6cudyNSO4u9IF\nZdAjKXrpUFzWtxD55eaTMXCsLIV61T/9L7PoEx6DwgN9S6BulGl8s/0XKsIq\ndjKN/3X527qbxI+6hL7xi21YFVg+7tl97gL8lFq0F+aziwr7TubwswcYt6A0\n3jKl1a7vI5t7HKgb5whTCi0THVNEZeS5Ef9OxrzaTAHcKrkamVgk8Da+SDIy\nZKR/IQ9UpkxT5Z4kel4AVG/hsHx/uoeWDDTZiKu+lNdT0flpCpdvLt1o8qVb\nIka8EFIlHjOLvCTUpGS0UyzG0oZtrW58BxYLQNlI5YnlQz1EC5mfFKbUThgO\neYSzwVzGM1A0cvjblgXb1U6ZPlMc3u0i8+TPN6aekSBh8JKt/pEnisZCl91u\ngVfAbrstFmvmw8BTyK3F/klm7A1gnOdIX8ohBtwXTnVAQXFUDdwOvi07RhuY\n/vyRLFoOYZgctS1/NJfp330kYga3iX2xOmtFx1swmcy7onHw6uxY64BKOfPF\nYdVjfmzgD0lJHrtmDSDAceDygG4gbLj2XAZOu0aLdj4zhqrUcWdvN2lco68Q\n9MPg\r\n=VZt/\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCLqutaqk0Fj5rfxATaRY06JmI/v3asxf5mkFAF4V+JtwIgY8NphuYs/boyf27mMTt1hzlJ4N3D//YoWIvVWHolguc="}]},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.3.1_1618865017828_0.7840262628094912"},"_hasShrinkwrap":false},"1.4.0-functions-next.18":{"name":"gatsby-plugin-image","version":"1.4.0-functions-next.18","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"3.4.0-functions-next.18+04f8369e5f","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"2.4.0-functions-next.18+04f8369e5f","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"04f8369e5f1a03260a4ae607000cd9490fe868da","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.4.0-functions-next.18","_nodeVersion":"14.15.5","_npmVersion":"lerna/3.22.1/node@v14.15.5+x64 (darwin)","dist":{"integrity":"sha512-OOEttEsWA7HJf3LB6vzfNjj6WFu1yH2c50ah22n+ygrvKbeXGCEj9tTWFRbrbgRsJv/qqv+/AD3/LQn+pZLOIg==","shasum":"e6e0bd91eca31be54d4f6e01be92959f9d869103","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.4.0-functions-next.18.tgz","fileCount":99,"unpackedSize":650957,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgfznsCRA9TVsSAnZWagAA8ocP/jtcuGqE24xF63SPMJXR\nNH5cglCsweIL/1vH2YbV1D4SvZJeFQPych3g7WTEmx4Z75MQEU4MHq1jOsrC\no11pg1yRzV0oVgJoDycPm7DEqNnaU6FjPbzx46/qxJPP12Qfq90YkTdSxKSu\nAvVNnzZcxQSQTwHEFdpsYZlsUjeCDvTus/I3AuGlCKBBYhAY0FCFu4Es35j2\ntm37dgiJJy4P+6yzeKTI/8AELBuNMW+QSoXnVBvvwp1iMRWkgopEHl13u6Ck\nPlSC8iNkZmbKVFOCQwiDyLaZP/aAulwOJ8o9hX/qEUlPaa8HOx1wV2Kw934i\nqAPyn8gQJ758SwcKGGr23VLGY8mLjrmeZd8J7FZ+db+a9ezgMWNHvrgAb/5u\nXut62FqnoH/AiawC6Nu0WC8/6O6+vSKDwXq4Fbb4GlnAmO7ocyepZb++CUbV\noiukpOdBxJm4YWlN/qNeOugl3EQziw2VJIFXmIJK9YKidTpwKhXF4K8nTKPY\nebtoR2TRwQB0lZ/qcvjjOF2yQF8PPkEUxGUeoaihKNjciA80CBYwgWFu8qgD\nV3DxQUjsnakEOqc239MffSkYI5vv9JOyYF4Bc/EjDe4EdTqNz5vEdR/F1s2+\nok2sQ4w1Qx7iYPg5u4Js/6ch/YKWsr5SnF0P6LidVGW9N+UGpCtn+AS3XzUf\nW5L9\r\n=p2UE\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDatUAM+V/CBXxawcmISIdWCLwU71+hZx3PhpuejppkqQIhAMY6TzfUHxlholzDqXCWw3z5oVHE79zCvIUQ7CYys9Tf"}]},"_npmUser":{"name":"kylemathews","email":"mathews.kyle@gmail.com"},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.4.0-functions-next.18_1618950636047_0.7053893114917706"},"_hasShrinkwrap":false},"1.4.0-next.3":{"name":"gatsby-plugin-image","version":"1.4.0-next.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.4.0-next.3","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.4.0-next.3","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"a4cecb9410eb2d15b860c4e9caf84cff7545cef0","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.4.0-next.3","_nodeVersion":"14.15.5","_npmVersion":"lerna/3.22.1/node@v14.15.5+x64 (darwin)","dist":{"integrity":"sha512-rRFiiXDkYAlq71wP/Eez9hCF0qoYt1tMvACcKINZqVvVagldxIH7YSwScu6Uhq/sK59boa9oYtL1R/jK1WQgDg==","shasum":"9d5cada0a71652985b207f63f5be89f18107a392","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.4.0-next.3.tgz","fileCount":99,"unpackedSize":689484,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgf2W+CRA9TVsSAnZWagAAG5IP/R3rofgrotxTvuRC5eAB\nGyvKrdmJdLn42/XiE2tuIMSLalX3KzYqjVN6YJufGkmwCsZr1McDTXTeTj/B\na11OcderDTZ+T3utSRaJO4S/pEMBzbnXYpSjYEaASchaS1Z5HeYBsBIAR2KD\nYM2jO3yHnQ3puA3ZzKfzf50pWj7m/trn5mfpwnSa2B8saXBjeDZTo1aLCpbE\nNhTzBoW07H5PbQo3YHsbxPx4OBIrvcVVg9hDQEtrPiT8F3LW9qPTV1La+lzP\npAXtZwqLHiun8rNMC98CRdfKogUsSQ3MwTZn6l93UL9H0vrFWJu+KciGGoqU\nfsMtE5+8XEgg2j6ArglC6RrWiwm3DVb9VEcqDFwDlU/oZkowwFNxKtT0Rpsh\n7e0BcLHtdKDvjmgZVoXUXNSuWEXh4gDUBF9XUwYGpIkH2YiaIZXbyuS/a2kH\nFFPJEy8mw2lB+LsY0vNeBDTwhv5awW6RpFxBreYW8qjgW6P0fO93CtIBADpP\nTIqVXGNClnjwH1q8Ds8TtdnU7NMqjNWba1lfXkLmkzQVlpqM/VTDyElsEy2x\nAzgV9X0/2giNJvCPizAhyiyqHVtFam+KS4ITBgaPTCI0ozvAOYz6JIlIF0yh\nkmpXI85FXfGcMCabKE5oAhHMFfCKx/bj6lVcS4R1zbqvF3uigyA9PSgO23Sz\nhOam\r\n=asBT\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBfaZjtvKjYT4IESbdqSfO+UlNsgp9YSyTczGYCV/D5dAiEA8CVs8wmb79lGxTag920cIa/XjdbsFT2N9wKjEBh7d5E="}]},"_npmUser":{"name":"kylemathews","email":"mathews.kyle@gmail.com"},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.4.0-next.3_1618961853974_0.033204468856551816"},"_hasShrinkwrap":false},"1.5.0-next.0":{"name":"gatsby-plugin-image","version":"1.5.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.5.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.5.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"df3f184ee9ea1367726bd52dc4b6f130b8fa2c59","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.5.0-next.0","_nodeVersion":"14.14.0","_npmVersion":"lerna/3.22.1/node@v14.14.0+x64 (linux)","dist":{"integrity":"sha512-y4wAEzSLoQ2aM9A1vAfssTBMoQop/P+duS3P3o3T5hzSzkRtFqTN/jQtt7B+nCQC8nF7sSyeZNKzIlOxNezgag==","shasum":"78c4e4d65069ece627a40ab8a54aae152c83c918","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.5.0-next.0.tgz","fileCount":99,"unpackedSize":689688,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJggqjRCRA9TVsSAnZWagAAD+MP/jPpXQWUMH83RPZUJ+fV\nmoQJ9lQMR+Tj3KvQfb5uuSmatKUjHqyYMTJ4LfJnuK6yQAv6PNdfDQj0pzPY\ny23UgGgMDUnmyJ/XFNNbr/Bf/110jQENMhHssstCPFb/gnTLJLCaLTj+0Uv0\ndgtgpis3g851LZxMcA7U8JnDrF9ovSM5yUbJu6lcwx7z0OHbXXQhuzFfxf5X\nRi9UqA/6zDW0NSGydF1GaQ22Ba7TuV81puzHANErkSTQ5sXomBmJr2kBVTOf\nr7aONV6MWQuYGpsLUIkQruGgo705OIZk87YWFvaEGa/Mka6ICi6baNinlv7M\njTgJb5Rcg8PSAYOr5J+uDXPeA2HB28L397Fpu6WiN5f6Y3I0YsvBFcZXbqSF\nabbyNFREakLU4/ZuzOIj/AyyrWrlMhP1ZzNtIXeGVjf7gczmU8nYUt97c6tU\nkJsOk3QhkUwHhy4TzyofTtxrI+luEDXq2NoEQl4pVZ+31GW7hbqspWee8WOz\nx9sm15oJxgjSbe4+M4gffm2J+bObG1cM7Ca4ZErHw2f+AUnoBx6+qQcTXmuR\nmQXY4xHXQ9I69W+wy9vQqwzlciYl/rB2+WmmgNSO5NceRZinM68tUE6tu1hd\njIXmKzg6VYG2cidJN1q1hhY/yroQDmQnDCz2H7B4kJPNDHcvd/9x0IHTjaJx\n5o4U\r\n=3Qao\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD5LGQErITGOx+NuL/UKlJq8+FeRf3VpBYpHDdKKASgeAIgMgZ4Q2x2pltZpvFzkiXNlKphFsFqVs9DLcSc6V3L9KY="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.5.0-next.0_1619175633190_0.3536912648876389"},"_hasShrinkwrap":false},"1.4.0":{"name":"gatsby-plugin-image","version":"1.4.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.4.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.4.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"668aa435a3f4ee70f198ea78bda83fde39fda21e","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.4.0","_nodeVersion":"14.9.0","_npmVersion":"lerna/3.22.1/node@v14.9.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-SmJcKzS9Dd2Crx4EqUC7MLhB2s3i5+datJdxZYOrqNuCNmLKyperUmS+BhSYBqQMxJ1lAt7xgziSZ5wx9IIm9g==","shasum":"4271f3d6e6824b4f631833591931fb9fd3f15aa9","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.4.0.tgz","fileCount":99,"unpackedSize":692442,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgiIVGCRA9TVsSAnZWagAAiTMP/i1fK7HzwHCv5YvzbO4M\n1OU9YzkEa0ubrJ3Yy0LgtywBWg6AnSugnyZTCDzS0DcJIZeeETDSbEwrXJHv\noCtXcyNWbHcj+MViPpQ/qcOYYkPiCDlYEq6fY6t20eynOcY0b/7xWtgXX5MP\nJUoCsxgzEt+7bh+dC/3dZr7LGgDYLtftIA69SQxru1um1L2rntOaxjQobiiM\n0cZH8KP6p7vkhNltHjWYYqyITM+8AQ+XJCbo2hhPCPMWeLuZIFJm9NBubNzO\n7GRfEvEFYereNagX8DGwgR+yzWiEVwDGdMkIBpgEyZA9qnU2PD7TaKN5Xkv8\nw4UAiZ4xRMMnX4mXrAv2CKfsZThtgqnXg83rCj7KhF94CXXz9Ib/UL7Hh7tO\neF4zUVCcHbodSgxz9g/jkGIMsAqcMmb+Q25l6+ldl2UnC8IHeTk5Kv1YXwp4\n5nJPawWLVL3HDN5wvpdtoTxEXtD8W/zvZSlUb8aAYkIb8wP8fN3uNgIA/cr1\nZoaMzpKVU7SmEi3ULJwUzGRSkFGwoQjGb5OHJelEUq2vPxhKMS5mmjt8eh0A\nLQZBJF2y40fgr8EVJYY6ClTJj4L8JiC9PwBG2/8+HVILQ85ma8E3IL6d91cI\nIjP+PSF3uK0H5gKAcaxVQbGOMFNXUQCov1+tFvgOAMQHie3R3dQeWaqw/gj+\nagRz\r\n=E3AJ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDRnLTvVCoUA4gtUe1x86N62nRR17suLQLA1qwlbjAOnAiAtEseJoIr1UGQmyc+nQuxZt40CdvU6XUwMdCMUT1X9NQ=="}]},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"ascorbic","email":"m@mk.gg"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.4.0_1619559749985_0.3760825713970102"},"_hasShrinkwrap":false},"1.5.0-next.1":{"name":"gatsby-plugin-image","version":"1.5.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.5.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.5.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"27f54d7268fcc95717301933a530c7963fab27df","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.5.0-next.1","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (linux)","dist":{"integrity":"sha512-SPobp5qJzmGBiwFQwbRgXTm9RnC82vE4wHkb3d7mkV3qkZXypdKhfz4REbm2sTOCsQ6PmGwPu8lHz9+SIOdNlg==","shasum":"aeea82e5303eb671d6b98402afa12077c113c4a5","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.5.0-next.1.tgz","fileCount":99,"unpackedSize":690092,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgkj2NCRA9TVsSAnZWagAAOEwP/i+dKjNClLxVSpY6V5BX\nhXHidvHqaaz4WiRMw9dB5GA9ZvVtYugOlWeAe/ZdXp9Ct6HsJcp3h88p73DB\nMouRhCU/kejYxi6rwja6P8sh5wDCf1DwHZb4jgp0fvvBXLDeuFdNjLl0fwca\ncs20znpcZRtmo5Z9O61dlkJG4T28S+GIVMPqxBBa2Xgs6JqBL1KAQUKWmuGr\n9E4SdfmSl2AvmF7LKDVqAJ6MRBaTkC2e6bTYoRh36Hk4bEYrb20FUxBvxUxx\nEhgLMt7A7rSNIM4+s6QwGDhR4dHP5MOwqZGOoDKpVxWQwxHMsAldR511u8o6\nPtESnaK2Er9hNLiBP+w6bYteSLW4SIVxD39PAsZ9gmxVG/Q6glSfnni9FZDU\n7ADLhF8+eCV/FZLdSD1DhrraeUv6jZfxQfy9DEj0nQm+++Q7O3vsesR99ljw\nMMRL9yeOsc9mow3xNM8Efn8D1eNtpz1H+RhBlCLZNfQELtBQ9qt76Gh3tYOJ\nP9iz/RzT+Ia315XjkMqKm5Eehf95VuINJrXR2e2Px94CxCWaJplofd4KnJjC\nv7KFXa/KV174gK7TRbDFxwbHxqs0tUBNfIyZTKTqz4hrUAlQqYBpTgE3lZ5n\nmRi6Zxp1qeXKeOIwsH++FyhNMhfFIeZXLmLHaoGmF1+pvht2oI5oRN2K0TIh\no5Pp\r\n=9YSP\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCuBJwRbxBHWSOC7GubjeYdj4ynaCXIgQ2wnlGRKjodLgIhAMSyLI/TUS2SjF9JE3ZT2JTBruIyxdnQjttR7oyRxz6N"}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.5.0-next.1_1620196748734_0.29672882605672535"},"_hasShrinkwrap":false},"1.6.0-next.0":{"name":"gatsby-plugin-image","version":"1.6.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.6","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.6.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.6.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"39f25b75661c13b9df8924b421b5e2dea3cf9070","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.6.0-next.0","_nodeVersion":"14.9.0","_npmVersion":"lerna/3.22.1/node@v14.9.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-+nYyBq4iuww+YthPs8eZv+pXeI1X4DNv7WfTA5WzRu7oYkYIqd+A8zUB7Y/C1wWY2hiAAE3ToUdEHOzjkKTpuQ==","shasum":"c8f6f7e432d02a507f45eb93606dd7a8e1fe30e2","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.6.0-next.0.tgz","fileCount":99,"unpackedSize":694568,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJglDHFCRA9TVsSAnZWagAAtSkP/3H7gvyGkVOT7xP6Xn8u\n/ZcVCFYT9uoMHk91biYAX0Z1wg1nRTCJXJwhELc3s5L06m55y2dHB5oy7+x2\neJELZEHM0zY0x15iBIkA1aO/CP0MMkC6H4As/k8sKw5ggK0uvGhoB0D/1Fi/\nbkuVfiUjEd0fOeKs3WN8l/eO1cDvGn0AD3llDAMuqsB4uHl4t3/wTQxNDLwG\n5i6felR0rHUzIP2/IkcmwTZoaKddb53wjlh9nCLw2ji+CRxXbAV2gbYLnoD/\ncJ71oiCk9WtbAlT+FrNP8Ve8YANy+Ou0Vjq6Q7fvROWTHo9edCzFKZVyuoDM\nXhUPR6RIB0zolkZ+Q16+28TBBVoZwXDPJ8NxkGiHBMziMJ06XKI7e6FkhsZ/\nrNAPVC8eynd1wdKc1398QPIMnBRtUjO7z/jKsdKFJ60zV/kjcBxOcTrjgpTB\nxnEgY95U5JnMwWJGXAB4nhVdczRzIk+Q9xyP13mu8GTkSsioGVq0rjmk1SG4\nGfZewHrrc8hSSuzzNZ85qMZ22rOWIjeGrara55r62p20Y+wclkOoxFWv7rh6\nk5/IqiozZkpTAT14olTk/fVvXQHw2koyPINHi+B+rNz5dK+TMawzYAT0b2cv\nAVCNGcAFIxdjVLi2BnhlYPfFaGzePKihM+IbDkTrPVE3mAZ7zpBmuni+m8u1\nodYW\r\n=xjxn\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBXs84iu+yR/LpmBkx38004m4aFo1gA5D7+xzop6YT3wAiEA66Jt251C5mkgbtq2wqXqDfjeEnMlBByO5JYycPEflBA="}]},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.6.0-next.0_1620324805382_0.201245832471328"},"_hasShrinkwrap":false},"1.4.1":{"name":"gatsby-plugin-image","version":"1.4.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.2","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.4.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.4.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"2d5080af829805b0214265cc2328ec09e2f6f522","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.4.1","_nodeVersion":"14.9.0","_npmVersion":"lerna/3.22.1/node@v14.9.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-7qzP+yBK5KMiBE+m1XZTlPUWdWNCUAqXXachuWxnkzNyOICMISKDSsqMEjBrxTXDr36awwaVyD6dyTvW0fvzQg==","shasum":"7be0009e44ec3f8d3e357e91d2707c6ed6ad8e89","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.4.1.tgz","fileCount":99,"unpackedSize":692646,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJglZ5cCRA9TVsSAnZWagAA3fcP/0B+z3hM2nrIlCX1PYuJ\nDBTyRl5ooA9r4VEk3w+cPSz8ACOH5J+/zeLyL+RRyBsv2UqBvUqFnsOpkf9J\nahSosJ39I5x8IQrjPedDqC9eoF1AWd3f1HrVy/8rsn0PzNKLuW27ImdbNg50\nhdxXAwadqibkIL2wWTfci6AaHYFVCNJWshFZpTPpAEsoW87zwGTnqySIWXi6\nqsA1Tf2A+PoFlVeBZM1QkMHQ/LawKiuO8Ue+GGoJIE/YrsqxLz0uR+SAFSGO\nnZBOxuhHFClgVCb41NoPRMusDVtnvaREHk1UhdOqh8Rq9dHDuMJOy8t+nhqP\n8c3xBHBBvlxAnC9x8xIW5KfsiBZ7ngRlA9FVX50DYFblm+BoWqtFLfW93szj\ncVTTjPD/uz0sF7WdeI+ajqMfuFMf90Nt06kuN/mNVdyestT6XeuCfcdepf0W\niVFNFObAGy4yxDk6o3W/1khNM+5OGAQqgDFFHE+D89mdm611e3ZzLs3k5uqc\nencIbFDcbTvMJxCRUpr0DPj29JV9ldCQXt+qsRkka1We3jSpoQorbT/IFpZe\neBKprZpxNaFd4720s8BWaEBGy8hc0iPraB7S/TuatmDcofF83Edm3DaTNDyR\nW1n7jrdgA9Yl6EuXtXfAZQcmpGsEWqsdLy+qo/ZxBbKAabX2a2FYSaxqo1Pj\nmBaX\r\n=zWIy\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEItsvsT3ph6qAB77PK4hfPP5/xwsl8tVD66KkEA2DRzAiEAhSRSa8X6oS0od91Vt5EbmoD2LdX0BCWMRAbkL9bDlZE="}]},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.4.1_1620418139153_0.29575437978375185"},"_hasShrinkwrap":false},"1.5.0":{"name":"gatsby-plugin-image","version":"1.5.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.6","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.5.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.5.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"102d92c5ac344bd82ed1767eff6849bd29dcafa1","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.5.0","_nodeVersion":"14.9.0","_npmVersion":"lerna/3.22.1/node@v14.9.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-/tEy3/Hc0W60RUaOUuU+nHXrOqBwEeDmdHl7j8GJuHCm4LqlYzBtCAXM3ypeQgoMHQj/xKN91wEdIbX8BU8e9A==","shasum":"1b965794b08df2fe70bd8add192f019c5d5535ed","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.5.0.tgz","fileCount":99,"unpackedSize":694533,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgmtPYCRA9TVsSAnZWagAAx8cP/30G5Z+FX2dG6fgCpfr2\nS2/5aEAkQqlgg9IqG667v0R5KQA/R9SopSBcSyPhLrIkOjMwLPPmV8+8YRoN\nz6nyDyzub/k783dyTqKkDvRWaflIPhBPFVebOnxcEcv9ruIPZ6AW1EkPS4Pm\nUYIHOV433YteSVnPL3Md6P+IUOL5ablUXv2ULelZA7/I8HdN4wKDwFooqEbb\nhod35DrygPv6Rb6Nnreae02meH4e8g4K0U9HoBaJkIuLncatp78MQg8lHRLH\nyY+G9VVfX6fc5ZQbOUQWvG79XJ7NdmXK4wvaqJht8JKpAl7oDSfSgbL3/YK2\nlIi4zjFvwgA2sUP79BzD2FrzTOiNMaeZ+btfv7vBzIAKbI53H+zzmjmNustf\nGP2IjT532PXB1h3C/V/GOzpBNb2p1yogBJg9+DU1UNH7YWa1J55KmT3RoJrd\n0lXZq/UqPXl3h8ylLBpR2r3muSvgCS0auNuHW9rEW3WwX+GkJLrYQYU/H7Xm\na5ZFAcYUyOrL1OiPKsnEsFNorSUfBIps1VG4FXbxKRfhhQCceyZGIypcKh8c\nG7dx/6ZQpLIy4xqG7LLH7imSSnrZeT1wRZ7vrsMT9f5iipM5Cq/gJwXcX0iH\nFjUFVsGgxY2RH4uHCMCun4pOF+xigBw+bkMmnSXBerLSDb52D1PfYRzpkGqm\nYNl+\r\n=Lcaa\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICoUqWXbsq6oSFYr3uwWr3bsBa+a6gpM8jEwQ10PVYiYAiEArvAPij6k3+nL9AV8FkEtxBdO4ieH4JpdO+AzYk3OAVU="}]},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.5.0_1620759512210_0.9887673918715929"},"_hasShrinkwrap":false},"1.6.0-next.1":{"name":"gatsby-plugin-image","version":"1.6.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.6","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.6.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.6.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"7f80988f586294d3e4984f02990e95057570383c","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.6.0-next.1","_nodeVersion":"16.0.0","_npmVersion":"lerna/3.22.1/node@v16.0.0+x64 (darwin)","dist":{"integrity":"sha512-mGk89crWBil8jvp3UQjntO9+9WFNiYYbaocVlC4Cix2sAif2dYkP0j0zKQYJJp4gjRuLXMavTR0BPh2PZ7h/HA==","shasum":"602df7be90e1f048ea1295184a338187dbe54994","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.6.0-next.1.tgz","fileCount":99,"unpackedSize":692693,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgpsQMCRA9TVsSAnZWagAAkVwP+gOQ5hGcj/csOXmYJIER\nXeSyw/AqbonpdwUHB4UAEDy8NBCHY6f6YkQ81DuJGitBw20XWBrUrEZNC6Fe\nbVjU4euKHx+PZN3Z7muapq8AgVE+ktVuF15Kq79khS/5Xik51yBZXjIYgGYh\nTd8Cv+oxcd2CDpTWFujUsoAiLsLi9h+qRMpXt5T/P7sfUYuwhqnP9BESxIlk\nxou7z8EKrzEZyi/IahIgkhYWUYUaNP7ezmTdD/WilhhzHYdBdPknjyAW3cmK\nG0Mc7d9iQnLJnd7/pRqd6Yk/hbzoPZYxu5s6JFGsTK9aofXqERk45m6vIW/d\nyU7bcqSqOE9LZZk3qEizN2Pt9JTtJTCWwKdGchqPcPMNRvjT+OuZOn/9e71M\nqtSUyxdT5qDn4Q1G3wp33EI5m+PHrztq5sgX125EcAfTjzA1Yxf8/nZH4xkK\nsaZsVETNj/gwZVOxE4ICW0TRgyfGrjED+qvEGFf6FmnuGhTqKYntW4Uu3CSw\nw4ytjyaJTrrJDI45YY4mad5KTMb8adI9bqYpzJe8SzZfW+N/xn/2EEzx37Jd\njk8Cn2tvnjEwq+QmAWUlS7Nipop36I1GFIiXa+OGA/22FHj/0l3njFqA9rZn\np7zHMYiJtaXRQ4bIpGQacvSDAsV9owYpRBm8a6TiEeYDD9IoX75YHio+hsOd\n06Q/\r\n=b3fL\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAxHy18+X3UveudfayiSb/MzACuFtHz5HjsCDKlIaU3xAiEAg/aRIUjQ+LoMKpgqy2e80RIEYH5qHqY1oPs56RuhV5M="}]},"_npmUser":{"name":"kylemathews","email":"mathews.kyle@gmail.com"},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.6.0-next.1_1621541900344_0.16594576931874938"},"_hasShrinkwrap":false},"1.7.0-next.0":{"name":"gatsby-plugin-image","version":"1.7.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.6","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.7.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.7.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"86532167e037de9bb26d67e2d4cc089e5b58f0d6","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.7.0-next.0","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (linux)","dist":{"integrity":"sha512-JtGDRQEk4Qu9MR4161U0yUtF++lGIiBSUzeny64qeZRtYq2w+V5tDSxVsXYcj010B6tNBfa2h59d1qmb2Q8dQQ==","shasum":"175dcfc3078ad39d0950ee384e3bbbbc1b18ff21","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.7.0-next.0.tgz","fileCount":99,"unpackedSize":692899,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgp2mZCRA9TVsSAnZWagAAb60P/i0fdJyyJ/qiz/es99tR\nrcLivxainC+JDwudKTjbi7RGimwFy3QD+M5X/4oPc9qxENZr5tHXaPbaNQUQ\n82sYjAIwbZpg++RVmGpM8C610SRhe3pqx92FtPK+BPuaZVwJXJCXlSLzvc5p\npNQ9CZ2XJ3CAct4PwkbRbeWmEPoBj8r1OJLHs+L3PpAR/MthWXHiD/W3OSOi\nYpK69WhWAQz3L5d4oA1xP4Es8sxBoJnkrUl2mlqm9+whEmjh/z6OMXB33kGD\n0GQYX2Z1ACXCbQlfZuqRlgpj6OV7FXOgNfhdRGQqO4QhOrvbaPQlFNuJ8laz\nknLheItSucc0CannhMso4q+I391ZLYCqhROyZEskclJ3z4yOg8oyqLRL8VNx\nutJPlSJ6tF8V52YX8k25wFAmgGtcT0wAqGWVT5vAPivwfM1v33y7kCGYAPhk\nSxUtOnnNNJnbvUXTvEUcvsTutOw4ZZSO+FjGu2Y12btWFP3ktSbczWV78zBR\n+DXz4DKWVQxCcCpXtNL3sUVliEWEXCfdOWTxYzs2xBawwSXbcn9bPc0lcYZD\ndp9leX3ym3e3w6IA6HYAPAKdFbus/WkfnhMnRifTAjAbg2cJh2lwgLvrDPlX\nfwEt6UQs09jZWV4AfJhaTTuQ1CP2fBH0d+rgcSvY396PQ4tsiaGBuLIu837g\nD1uC\r\n=3pCP\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIByXxUQNH0JuqgrJ0UpX4ExMgB6nSsU22tcfh3Fd3xqJAiA7lDXa9n9A5zxOH/gJ9TOH1wHJ80OKWTB7XrFiXPKZlw=="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.7.0-next.0_1621584281049_0.7052755129569965"},"_hasShrinkwrap":false},"1.6.0":{"name":"gatsby-plugin-image","version":"1.6.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.6","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.6.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.6.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"4ccc53ff72dd4e082873d7d29561ccc756bda985","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.6.0","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (linux)","dist":{"integrity":"sha512-AYNSer+Cj78anY8EDprw0BbAMLA0+8fEomRFpPcBh/TxN/b74q8jIfsjOUj43TmrIKEmtDiaCh8Z3i/4ZWFD5A==","shasum":"a6b2ed58179475d2f92c374af2f946d9f0aea784","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.6.0.tgz","fileCount":99,"unpackedSize":692864,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgrSwjCRA9TVsSAnZWagAAl1QP/jp7u398oeIrckuh/XRY\nhhpP3iJ3pV8dcQXsGfy/lW9Gwn6A6ghc8R3CWvCrnhU/VdfE4CcKQYxozb7C\nc/GFLWDG31cJP72sESd2IDyHQ0L6W2VloMm2If6YaNZx9jvuaZIKY4GVJTQs\ner9XtmAvMX2P4v5I5p3S5ba7o3q42aaOHEumNP1T6QK9lJlCRktE7YbB2DcU\nGWloVQ/P3hSwdBCRUws2DjgP5vCCWQWUAy/R22mOMMHhXp9AGh2PaBZ8q12J\n0qw647xYuuUyH8vpBjYMG6jkxJiBZagQ5OPb62KKLCO2aItaWlBCKQcyrK7I\n6F8w7e0fzVGO/T/ShquTExUl8C84YLOCaCmcSleQ5DdRvAswXf5Y75L2QpzR\nWqAgQt8vOUEs79U1GMw2RrEhCqnFVWBBDs54GYQNS+AoHr1YQT2Vsi1VYwFc\nLQR8PbO5lWlPzQDY0CQZLMDmhEUy6XlLicItEMzqhBAXHZglmh5FZLJlD0gm\ngu7QQw1SzdqYyjVdXrdi2QtqSovudWAtI1NSNqgp6qPpVQYacoL2g19iSHXv\nRsdmYcLpDrhjojGkZ40eTsDoclr5jH0oDUV5qNN0TU8v7JHXIiqsIKxntcUX\nb6xdIeDAWTvZVDYwz5fPJRkySrdzQd9xaQ9GDtP0EaLZuRiJ7zzKv/MHt9Et\nPcTB\r\n=Mbbn\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD4huTWWnbTc6UyZBadlu3PrwGSM6Z/H+U0bD42QKOAbQIhALUZsWMf4xUg/Ee0TSsTXA+nYeO/GzGzgGgtgm6S8lXe"}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.6.0_1621961762697_0.08911415421997004"},"_hasShrinkwrap":false},"1.7.0-next.1":{"name":"gatsby-plugin-image","version":"1.7.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.12.1","@babel/core":"^7.12.3","@testing-library/react":"^11.2.6","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.12.5","@babel/traverse":"^7.12.5","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.7.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.7.0-next.1","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"30d212d506cc30ae32a21b48376d704f362ea157","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.7.0-next.1","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-CFRtlx1GHBq/8FGy0R/3o0sNY0iTmLLn53CukiZUE3tMcVLws7tbj6qp+1nU3C8dmeM4w/IWXcjAzWmyRUwMxA==","shasum":"98e4b9911d2ddd6bac4a55335308c109c5ede3c0","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.7.0-next.1.tgz","fileCount":99,"unpackedSize":693101,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgtVpTCRA9TVsSAnZWagAAL5kP/AlVRKI7k3IWuR8Hy3/L\nb08FBefBhJtJzk0rmlJVO9hfajqUN6PeC+D6crjQgtOtnN+Jpz+skQIFW5hc\nMe9g+VKgxie1HZsHTEfOHeTmy2VSl9ODB9I+yr+IkG1mz+Q7//0tF6qUbUhV\nwNtvHH6RkZ6TozsgLjDwLatTG5ELRJdTD0yenpsUhSHrAdrK6H/tY84zUb1b\nfOfipjWgsT8JuyQg1FPXzpDuwBCc0Jzaoxp9pVqLJAkMIT47KDd26dt5pljw\n14tK0WO0Si3jUkmyOzk2zNiCv80QhfO68LQvZy11Itrc4nwpNR38JOfiBVa+\nmgWSDALDK4JeA3A2BfRlD2pQh6a4ksO4ZvOR68mER/jEUNNGXDVBFCtnCi/p\nReRDh8Iucii+tFFJCXbunlbivcKC8xoysUGC6KPtb958ATxmx9bwC3qSOYt6\nPcEV1pmwwLdAkD5dqbpliheS++hrvISAXeelEAT2DkAkGk7hIK8tVuPU+iz9\nEQReKxJiZyTngrPbqiWap5+WCk6919LvNcnhAWYkJKrOAPln+nHipzh92zvK\nwjO2XzBKZzqt/ElvxAdK3GaUyyTTkFy8jBNIOEK40Z0600YWAWwX8Xzeccex\nECV4ItYHCrudfZ0C3pVQmrThgz4Kw2JMBoWggUvrya4dufWCljBOFwD0Nz3A\nRSPP\r\n=ma6l\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICTRByIH4eq1wbqGKnRswVhbTcq/DTiy5tLy015vlytyAiAtaBPsjefxP8/s1BDdSbdDasRYmaU54FHFQZmlvug2nw=="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.7.0-next.1_1622497875074_0.8330830691843136"},"_hasShrinkwrap":false},"1.7.0-next.2":{"name":"gatsby-plugin-image","version":"1.7.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.3","@babel/core":"^7.14.3","@testing-library/react":"^11.2.6","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.14.4","@babel/traverse":"^7.14.2","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.7.0-next.2","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.7.0-next.2","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"6f8646c3c4c136b64963f8431b253bc3529e16c4","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.7.0-next.2","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-ous8gCEsw32EXM3Df2cPuJM3UmiRN9BAaMaSRqAA0ZJVITMH13wz9COPGjkMVrWGU5fBXwqkdWbXDh7SzeMcsQ==","shasum":"fb709961929753a50155880d291f3c47bda26e35","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.7.0-next.2.tgz","fileCount":99,"unpackedSize":696335,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgt4ysCRA9TVsSAnZWagAAxiwQAIm2RqqnfCIpjWaAkmWi\nk0vQW/qyFeq/OgeWyr3/68UXJk4xLpghQMuMlTqQYYGpBnFRmiKLU5RaYpwZ\nJ2rb2Hn5yHnHxIQtO5fxUSs23TO6RyQUJIgrM3dwz0Bx3E0VsS93+duzIQaZ\nxadO7lazkBgq5yTUpn/bT0BaOrilZ9Eeu6SikSdRs75s1EfkcSUUW75CpJoy\nwtpx//bUt/uKHvGffGDQZBEMdRE1GRJm9nz7Mn4vkYKsAz3HEs/NN8Wi/2v6\nnbYcJFc4ZzG9QejCzY2aBy/yE4bV8dOlNKxwuo+NkdY1CPR/53cA0OSZ2T3h\nh9B+2xCCaF5vkUcLVoAJQoTSZKHtlV9zyxkLTJda5KYWVvuQk4J0iEdLdXt4\n4DJWjkVFnMznj5WyGjOG40GOdl+wPi+xfmBvpYMN+XndvstSFmSmW+Z5m8ZR\n2vKku0iz5oW0vyLWP28IeVQIleO9fqtPJ8N3Swt9RbS6PqQvJzxYYGsw1PGN\nu8d2bXS3EY7PyQ8Jloe75t9WZ5Oh0miDCEzRSRbiVYdy7jr42CUCuumm5s6j\njxp8iZxZIdgmJVtWOlQL3wJeMWegcG8ksmVoRZ3fmNX9YOi6gCNiyxn9LqhE\nlRW0fnbndjQVR/WhYtoeVV2z3UH/PjpsBjAMvTI36i3oRfygZ4mpbVpYBNby\nmULj\r\n=MocP\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDn7X/P17r5lDw+pBFcdGnDLeuX/okAUiP6AGNE3XyA2AiBB2B4O0pg7nAKszrzaR1wYoaEXSOPE0kpfImlOXaag0Q=="}]},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.7.0-next.2_1622641836389_0.42749896894261297"},"_hasShrinkwrap":false},"1.8.0-next.0":{"name":"gatsby-plugin-image","version":"1.8.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.3","@babel/core":"^7.14.3","@testing-library/react":"^11.2.6","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.14.4","@babel/traverse":"^7.14.2","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.8.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.8.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"74c8c6038d9773fc63025733d7db8cbf87b88ad8","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.8.0-next.0","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-QlwnZQG97UtVFkB/xsPR3ltMYt6v/flAhSJwLSwufLDj5yScuB5Sd2g1+y6qnNf50xwcQ5QehTQBNzgOTcypfA==","shasum":"3fb7284345fd6b573f98ed4835dfe16c0dea7036","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.8.0-next.0.tgz","fileCount":99,"unpackedSize":696539,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJguSipCRA9TVsSAnZWagAAw8QP/22ISqkipA4fDtHv4AzH\n4ohzeVd/LNS8KvcO/MSzXSr8D8PuT87eYOUGYJSrJExj+n0Ka+HIx4MazHq7\np6kk9lqchRiyS+mfBqZToO79CdDFbw1X5gTzyt/ZLZUm6f0NSxr3vXDq7bsU\n/Bza/N+yM3h3w46GVYwmwtfNJxPTu6j47ndOkD40GpmBQYn5cGtcQlarYMTk\njwLEqVHt2Gb6QTnR1DfeqTLk49EJairS6VGmrtDuvIg9MeBEb76BiGGtQbaR\nrLIL08+c1nS0qz9xmK+AOdwKGhvBmv7n4XOgMoh3KeSciw5HycODdzKMkFsr\nBCsPPRfVBOzPd7w1W7tKxwsmMOWbBajO2yp8lGDUD9qO+bgajhMRZgBD+Pb+\nYI51Qoo7WXhQt7bwbAPgEEUB29Gr1RDWGL0oy3UVeVeeFql9nuIiF3qRd7/6\nggNqAZIYrlpWDcZuCM2BFmCMv7aY9X92RyUFnVqrNeUtof+RYehNn6GErASB\nKrr252GEIUU1I4Z4Ef/YiPoTyHmLPiU0PP3drM/sB0LSL+82jKDORqgKootd\njK71+/P4zIW92ffCxAXZec0C0mYorsPkh4Tcv4opwoSfGZiqHQ7AZ4jkagk3\nxCqnVi/dOSTayb1eCA+L6UdgM10QBmXG32sfHitx7ouFGYJb/wjtZexp0o9r\nNIhB\r\n=108W\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHH2dVdxwUFJVs4o2k5pp2T9+bu3zQE2Xwt/H0SsnUsFAiAp/pXQjAuo4P6fQQAG78oZRQi3+CfRfaSBZZZU36GoTA=="}]},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.8.0-next.0_1622747305194_0.37553274558207295"},"_hasShrinkwrap":false},"1.7.0":{"name":"gatsby-plugin-image","version":"1.7.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.3","@babel/core":"^7.14.3","@testing-library/react":"^11.2.6","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.12.13","@babel/parser":"^7.14.4","@babel/traverse":"^7.14.2","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.7.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.7.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"fe4c8fe552f32aa824ddb10b4c1dd48ea1b7de06","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.7.0","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-iXEWaZadSwwqoADkvX1OnP2E4nc/ZTz/jlxkXsnBkWwij5XSppkRYmo/JZZnB59lGCF0QtaXZBNYpwGBK+xCcw==","shasum":"b0b785b5f5a80dadf5f29ec18ace96a56676fcab","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.7.0.tgz","fileCount":99,"unpackedSize":696265,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgv6aICRA9TVsSAnZWagAApbsP/A0JYxu6wmeB3QWuSlhC\n7pmr8EsZqnmE3y+joCKffd/bmBnp4YfvB885eDuwSEkuaEUsPYTNaKZtK1Kp\n60+57DirlgObYSi8hV5HrFcOyzdTSdeC8GFc5bx7A6aZ9DM+DY9OcWTSucgp\nSITPvKgHZjDdUNpJOwNP4/rIfbpWJVlAd93EVdjEV+S0c1vXk4pyUgsvHZvO\ncPTbFVMdr1POKxcMa6OldiKcYdvWirJNC8STLSBYvs4ef4kWyaxMbf++Eu4y\nmGIzBo/ZUVTIoBmVEmg/vbqoHC6oxzuC8L50aq6o9NL3C/G3tom4sdU3sPeh\nFnU1DEfEm/Zn+XpQFL7AYpcpG/wzjwK16R9n/I/4Y61NNQwdD+iqKGp2kghI\nGvVfxESraKEwqo9MM1ex/zQlYp1EjKAsQ0zZkibYHP5HiVVjhSqIdY1/8OJS\n66KmJwB/H+ObNXKNnidRshikq7GlqrdwDr+Kr+qCIWrNWFaHpnDcf/xCnnJC\nMny4xo84opgjXpAYZXXQ529JJExABwaA22VZyGV3H7WuYlSx5uno9mC46MVW\nFPk2oxzLT2EO+l+CD8jizCTePti/SrlgryCexPTnVowg6eWa8w3xL/bTiKfU\nRbZmepQ319PGTo9/py+ieDaU606MJSH6YuRJ9q6X5CV+6kAZR0nIyZG42Ype\ngAA5\r\n=LX2U\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCN6RkDMtQkNHedhcTjj/iVWqvYggqRtvHra8Og/IgpIgIgSgX1yUmDvhHGhMNFKv5J7QXRQPdEEO5HvrbGLkGSj7o="}]},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.7.0_1623172744605_0.9267202334310185"},"_hasShrinkwrap":false},"1.8.0-next.1":{"name":"gatsby-plugin-image","version":"1.8.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.0","@babel/core":"^7.14.0","@testing-library/react":"^11.2.6","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.0","@babel/traverse":"^7.14.0","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.8.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.8.0-next.1","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"5b621bfbca9e107d05bbe609e77cc31eb64da3cd","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.8.0-next.1","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-vl0H+qTc9fuM3xD1dCfNtStNXaRAU05qdTLcrelPk2O/BfVMjYJ7zYxnV8Y52S3DTsmyH/XJumvQu0UFupGPIg==","shasum":"a022558473c051bd0344d9b42c1f6a564b684c90","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.8.0-next.1.tgz","fileCount":99,"unpackedSize":696742,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgwhATCRA9TVsSAnZWagAADG0QAJGOGVLGON/TbXnC8oh7\nW64ae8suLyH4AcpMDhafl4FQISbABWCK1hzYKUCZkC/TxoafUtlwkmuP1RHI\nlYF+V7/qpi0yNJ2tg7mjm4V1oh/o9iKBfzonrNsU0M2LGSrV19yv5m5wcC2w\ng8aF0G6d8mGX0wl+6c73hXfo/S2JYkQor+Dc8prpaFGa0QQKIMSvhUukeEjg\nd4CUnd5o4+PiIZ/cgFCben3Z2BSpAXJMaZULA0vYKPEElxE+kNCeYgcST/Tb\nl5n0J4s+ELeYYzIOh/r4J+DNRI+EXGhDo+z8YBZJTzl0+8YTbVR6KwCHtQSQ\nCv6J75YbejIyJnKFsJM7RW/QXbzt5bGnWIG1bc8TyhIwyHKDEr014Se3kxXd\nRnC+6noYauH0iQJ+JImoFL4jD22XxZZsKUaOfvMp2HSlb7oFywNqLMpYUeuK\nFZ3W7aA9ZBGog6D168nFGfKQVQvsN1v0ADY3wIfqWGa+bpXhEunPXWLHt0Z6\nfX7AY9od9HWCFYH+BOwHjOv+G4AI9/1gzd/LK7/3l8SQj+tv9FRanY6QKfgK\n5sxiAMNvl7wIIGCvJvzom0K74AkAcyaMXYtMx8rSlAjTg/4NetomdpP+7NJl\ntNdQXda4/y94OxeFNqC1Vj35MYl+DNVqlWFd0j2++1sXpzMxuMM2dDcZ1bUg\n+GQN\r\n=cxDV\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHtAWGRwAGx0VbuTavH0N8+yvfBe6UjaO5ODiptfrOlxAiAldGJaSyZt8wF90lxdFG1D0eyUMsGBiQQW6VEnLsyOmA=="}]},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.8.0-next.1_1623330834925_0.48935628835596723"},"_hasShrinkwrap":false},"1.7.1":{"name":"gatsby-plugin-image","version":"1.7.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.0","@babel/core":"^7.14.0","@testing-library/react":"^11.2.6","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.0","@babel/traverse":"^7.14.0","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.7.1","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.7.1","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"3be9c246afd928dc72a873567d5f6e3bf61e82a8","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.7.1","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-1wUgNNc4e1ySNaDgH3yEs6HYZ8W4s0IAFU945SQtASknrR9o69WpeWPBllQwDrlq/1jlzetMTCiMISHvc7aqqQ==","shasum":"07d8f14b9c37b294a38d4151dbf80e21cfaabaff","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.7.1.tgz","fileCount":99,"unpackedSize":696685,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgwkKYCRA9TVsSAnZWagAA/cUQAI8tB7/0jiMY1nsarShM\nfJN5QJ3RkIwftT4gUPmAIKa+T5Jy5SUeAQq2EjKWn2fA59cjYwTWFbyOT8IB\narruf5tMPL/y81OddDEUC42/r6zIwnw/5jgmV286/J3X9xhWNtJYr1O1XLQ+\nochfrd2x0I0Jv1ZkppAtGLmqNf3guMoVNcKCaS2+p+K0pC2UHazOU+eWfe09\n+vCYEsFO6ULoy7lSL9GhUi/ATkDH1YGEyozRKXJ1sI0h2p4k6ggipN+jN95Z\nrREVyNQx77oC6bp1jlv/gnss7g7NxX4F36h2G/N/xLVf1pbl1u3Fj1VV1NlC\nJCLyQuICtZyniZ3naxfu4MZo33V8xanTXcXPffxWBO34lO9uipoXOT1IDoLZ\n9r6/Po6KjiGr9OMVMUkqbtE38fEOTIRXX1cgDlNbRYdHUoOazHVsWRWRk1CH\nq8qA8Sq01X1N8HJZFQbiCN+ZqFd7tYNC9Mhng3N4evwImmdSoUSCwO15jlf8\nPppRSPGQjw3xzZqc5EU9gtxrhQ5R7u4ke97lLdNXVSo0IbXBPYna6e2y3KwR\nZ5G4AVYym/zdHFkYgGdupEP1Tf8CDonIZhNh1JLwPVpOQ66ZViri/aVtBswQ\nhUecuWLY92KXSSfOJk89LDH17YfdNWd7n6BUs/hM6BYRepHje3pR4ey3GEwg\n1fyM\r\n=zPG5\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC5TWz/FTHv/3R/KpGFCziqrzqe0hAAK8Zfm1VCyCI1jAIhAOJhCP6ystoueePz7oQIEPXZW8vkB5a5Yxh8YhjLMDET"}]},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.7.1_1623343768562_0.5856958964834831"},"_hasShrinkwrap":false},"1.9.0-next.0":{"name":"gatsby-plugin-image","version":"1.9.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.0","@babel/core":"^7.14.0","@testing-library/react":"^11.2.6","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.0","@babel/traverse":"^7.14.0","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.9.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.9.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"33f0feb05de7ec46f87c77aa95f15600ad50a2f1","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatbsyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.9.0-next.0","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-MGxlJTpRycietWFX2EEQPNvPFpLqi3BrPkDwZ2yxyMx5fvJIL5/Mg+5ydnCHYJ666PiY7ovGQcCIaXXXT8w6hQ==","shasum":"bfa7f11b08c45f687963f605fa7ea721fcb5d5d3","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.9.0-next.0.tgz","fileCount":99,"unpackedSize":696944,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgzE6ICRA9TVsSAnZWagAAeA0P/iFQEC2CYLUUkI5NcCgz\nQlr+ew404krO2kBoW+RjKKY6IbP5kyWE/L6wWH9I8HH/OlxOQrUDVD8KA6Wj\ni1K9eWbPzyLRdwKytLugFZjb0g9I80C9Bn7FpmORXiq5LP6t3qZQvZRH69fd\nhhMHtqys5liJDOFrvbMVsAOu8j6YwuPj+2kYMwCj7rFnlrDVwt7ejf2UBrqn\nzX47ABQLolSy9NoLgEcLFWfBdC2gphruAXADg7YtG5EvsL8r6p7q/ZY11cWG\nUVLp0tn/HYcUYWHrCn/FPWjrX4VpfAqXAX7hD27IaqIRS6EU8Lb26lNat6Fc\nGZva259vw2BFD5ipuFzN4/BnS+ZWRZgj8zp/Zi21uE4QH+OMRuJRwYeJX0dd\nlndYmUMF0Io7Omna/u0PpiDVVzc6VPx1+pqiJb4pcVkFsOHOkrGSklV5FPqf\nuv8C4zEYld93GgxH7piPFWnB7Z2RQNHV/mNRs9x5ovEJ2StoE8vMAGEI+qYs\nl0AVlrq+lZ/1STiUbIN1kYkVX13JY+OEtPclpgRJqFMaIzMBvclLgbSNDVmx\nkppuVp/YCTxZuzMZ7fIe98FjQ0Ma3JpY859XSL0GofuqKmxRIYR66SPZFTPw\nIEi57PItcZvLiR9tWNMcEg+vdV6Pmb/JSqrKMLV37FQ0ZxG1rQWVrSyFf9O2\noFe5\r\n=rjM4\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCo1Yuu31Nfd9SxBItHRPDzyL2V1x3G4IHJS8xFyWY+egIgUzVfwA0dCFoqODFpoyRo8Mfbn1T0LstUbU7YAcDsdNI="}]},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.9.0-next.0_1624002183772_0.34340948934087634"},"_hasShrinkwrap":false},"1.8.0":{"name":"gatsby-plugin-image","version":"1.8.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.0","@babel/core":"^7.14.0","@testing-library/react":"^11.2.6","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.0","@babel/traverse":"^7.14.0","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.8.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.8.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"715739c81824862bcf724ea581a9408fa357a27c","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.8.0","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-nE7VAjhoKlAEtiBmDYo7PFsr4InyrKaHg47ou2b3PG++JiZQRkeVYDq1qeBPmbjh0DA93KMVOheIlc1NuVZvAQ==","shasum":"9a530cbd2c7b8219d36bb47081e01b3684fa6d41","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.8.0.tgz","fileCount":99,"unpackedSize":696909,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg0lAMCRA9TVsSAnZWagAArnYP/AjMx8H2aauU185MhAxq\nniw2iJmsRdRJrgAuyrCV0l2Bh/w8I1GqY50RoJscTJK1cRnHvTY+7pZKjHmt\nDcPevFWSAjFKJRSFS1R33WGerAPUh4LU0FcXzZA2rOV8biyc9PDAEEwYJInu\ngoHR0oS1A9tBRL7SS+x9UTB6+mi2L5J74bfpUKI5EaxcdZMBKxt1TNETmgSc\nmlfCPo5X9KLcdmvqheHHAX2oGyvD8+5pjJPsCTQQXaYVSnbWDuGrx4C8eJFa\noETccsbN6z+tAzCjcWBBqWO9Mr9NRm5jvdPbHvG1cRXIVELL9g8mwtlIe8Bw\nuaCU4FqsuhwoAiyZV7I/r22TvI+smQD6Gzzj13IipWgYz55H7dITKI3RrBeI\nR+09j/GmKFkhmoPrBkjiRiiovOPc6C1rwfWMtkKttR/LZdQnzRqbeVpE5esj\nBk8bJXY+6iJcOOxAdPzp8Jk8aJYcXPwUmUb/uuHGP5LDS7QXl7AMY3Ducx/q\nXtyxVciMysRGpQYg/UbCkAF3gLbpRo6Cs1GfgVJ27ib9AE8XPw5z7Tvcdiv2\n9p9q+E4fsQJIPP/OajzNAIzXMpP3tSzNtm1hM3qSfLlth9lD3g/U7DpLPhB7\nDyLOTV+Mh6vo+OtFgmU1jGVQeo1FDgrcCvO9cCrlUOplGwlSK4L/f44l7oqx\nBv5v\r\n=Leya\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGhoLcYWEW86D3/IxZAcuymt2KNi+666eFnGWLPs++t4AiAc2kfPVt41VnlVJDpBGEjWmOQnr4wQ5ghLNJj9EiA5Bw=="}]},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.8.0_1624395787852_0.31923852452225154"},"_hasShrinkwrap":false},"1.9.0-next.1":{"name":"gatsby-plugin-image","version":"1.9.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.0","@babel/core":"^7.14.0","@testing-library/react":"^11.2.6","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.0","@babel/traverse":"^7.14.0","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.9.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.9.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"74a1a9b51975bb83a035e694ad6abdbcdcb79a37","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.9.0-next.1","_nodeVersion":"14.16.0","_npmVersion":"lerna/3.22.1/node@v14.16.0+x64 (darwin)","dist":{"integrity":"sha512-Eur1kAhu/N+9MP+I2jp66eYp5717nXt3MwTUwzuRljXNbwjBz9UCm8mWvHfLEHh5unjp53U2uJKk8ZbOn0tJoQ==","shasum":"0001faa9a17a3e45da3775a625378e4099ef7ca6","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.9.0-next.1.tgz","fileCount":99,"unpackedSize":695328,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg2YxZCRA9TVsSAnZWagAAq1kP/17kgh4J0QUzmxG6oQAA\nTFkIOVjulVF9VYwtwhvf5xWs1ZhCeZAy93hsoLHqu61HxTl7l8t5PNqQhHwe\nnoy0W63pv7/an43ZSpVClAwcW9KBJ1S8UIJEkb9vzgjJ5HJppVCplBA1NUvc\nIUnKOJZwaqxGiPT6EYdflsg4s6QVF16K5/Qamrw/tKMYj9zaDSKWL5yuq4+O\n8N/I4vI/QJ9CnN5QjsQlYv7mU6CXgX4mjSEBevqR+ZPuB7pW5S9oTBdSdV4k\nvRikyIs+m+fe2ZfOK/mrUe3EG7/XKO7URh9CuxLZPxb89hUq6Lpf2xYxt8H7\n1lIlrT4//84rKbkP3ICtEmM7HTN2O1kgiZYtCC4dsxpuzMCNcMAemeARQ/YR\nLxFtDrFVvFn76zusj4vWOk+w6oFKiT6AULEDFcQvo2gu+Fz01jdhuKO/ZxGS\nRgXtGeb9LgO6LhEduACxFNE+1xrGaFffleI4ER//oI6ikvq2KPVWjkvyYCvO\nUnA98M569Te1bXRTopJ3gavn5OKclI+WWoesEwfdVxR8FAFgcnpJA+btI67Q\nkcdl2+GTmlxilOGR4lnZNcvMVg26PCvsv6yznqSo3NLadKK9fQqOMN+Q+3o5\nNbsI6rpRRQc7SEClBhxGKniUJW82DYY8uzoLrVnICUG0o3isScWFrxCrf9pm\ntnRo\r\n=9Edn\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC39KKibKgFPaaNB96JMcBe1IJKV9LYt4fSCTujHRCdewIhAIIAKuwjVVwg7U4bdQqOgsiFB6MFilPmQeuKLf5J63yC"}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"sslotsky","email":"saxosamo@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.9.0-next.1_1624869977299_0.1282243009336148"},"_hasShrinkwrap":false},"1.10.0-next.0":{"name":"gatsby-plugin-image","version":"1.10.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.0","@babel/core":"^7.14.0","@testing-library/react":"^11.2.6","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.0","@babel/traverse":"^7.14.0","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.10.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.10.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"db030ef900abd051151bbcd6c9ee4c9e41f58fd3","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.10.0-next.0","_nodeVersion":"12.20.0","_npmVersion":"lerna/3.22.1/node@v12.20.0+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-8kEecpnWGJcTNpB7BImus2gHxUYknM7Td42GIxduCj0lqU0TNn3inE8GtaCnS4wOitv6Vyb79c6x0In4ArPWzA==","shasum":"7819c1de27c78720148752e53be1c089ed83083f","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.10.0-next.0.tgz","fileCount":99,"unpackedSize":698567,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg3h5uCRA9TVsSAnZWagAAZVUP/2SzolT1thU1ztv2wOAe\nKd98cAkvb8RRMoJxNPnB/iCa1jIx8qcmNrAZcFtOCRm+oc6Fzzyt5Wj51CAJ\n5fAn4OEREXAe9OWbSOme1p0aYtdKAdH/DcCl3Ux9JZ6szRDawp0nh79+yOFM\nDDT+qHZC69j5maIlx1i9W6qby3qSkO3vDeWcnaruLXqoshGuw5cbtvLrtCUq\nUautcv3FeMoXZA/XDvxVCuX0XL5KUJJR7CYwGqU8Qji2mHQNxs7t/TyIV0g0\naTmjkTxJeNZeOaKXpaktgJyQzBJfe3kN6KQCtPf0Lpp/qCp7j928oHXtFEbj\nPXSglBk3N0vV9PHv7u9w385FYlVWRsNvS3AlRuPyNX7imeHi5+o3VZ5ZvPeA\nw+MC8EzRwRxOvoPM5s9yOfBKjK8ITc22EzCWMXSaJJW8Sw8BI7xiGh4/BlST\naOlaaZ/5qLq00uJBH6Ghb7hSTEa9eWMPcWEk/CYcbSbZHEkEluIdrVsAbEHL\ncsNLFFpfH4QNADLWlGFYI8hcAMhLAk0lmRkY6+ngsW2nT/lfk1v39+tzpuvs\n4pQGlw6g4t2emFrp/1UBT2xvgIVmRmZqSZ9LfsbKbYi3CCc3fCwOwK9v2DGC\nXbotZf0/YnRLl6NWiOxRM/qIWzvJu3hm1gka/Z6YXQx/BUe04yc8Sqj1vUkR\nEX+d\r\n=oas4\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDQnOgIAFrbutj5JAcAKxTx0PfPFyiJElBNolOiHTXYiAiEA9KffrZLlfF4FsO/fGMgZcYz0J2JczzlvWLN9qA50bk0="}]},"directories":{},"maintainers":[{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.10.0-next.0_1625169517586_0.16564013207497008"},"_hasShrinkwrap":false},"1.9.0":{"name":"gatsby-plugin-image","version":"1.9.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.0","@babel/core":"^7.14.0","@testing-library/react":"^11.2.6","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.1.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.0","@babel/traverse":"^7.14.0","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.9.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.9.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"808f32ff1506297af5daeef1dd9907f3e1ec47a1","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.9.0","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-MxqXsgMpAfzm2HhySlv1enojy15BkAhm96tiVPkSO7BMiufm6eS9VvIu+eJ4cthCdJztOcYlzTlWNCI+whEUPg==","shasum":"2728a166ac541933754828ee1a4fcd8a24e1c796","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.9.0.tgz","fileCount":99,"unpackedSize":698525,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg5KiUCRA9TVsSAnZWagAA3TMP/iaI/xlI1tFlxuUi6NJq\nOSbtPay/WDepvlbrz/5y+QMIFip23UDL9K6YJu5lnkuSU9NzeDXjx5a5hgLW\nNcDy17oWaJiQMR8+mHDpgrbf7UTJmM9O3fB/D+ifvUbfG4k5PAZMRTdpOIch\nCBVa8VkuSzxVVQ1NHP2hZR6a7qqaeEPZglArUQWA9L6BjsN1DpJP0n8tZyRC\ncRiYMo/vxJkf1mSAomv5lzRkMnq0obncWmU0gCCjdvdtQQbmo7v8oXN7ChcV\ndb8TszdK34QriWRIa5IpkBalCLudKVfCZ/c3XNpQaI0E3UUsv6yKUeGt/50U\nvqevRiyx+ICx0Zq+8wh8uGhSmrnooAe7ELCisHRURBhC+xOpbPKcTdB2yX8Y\nUuqTGiuwuHdlPA1UmFZg7BXIU1CUFYMqBxicmlp4haXWlvoWQlKjzkwRB7yv\nssXc3VKS1a2c9ld2sasdTtKpGHvUuZZ24MMksrWF1WDTZjUN6fTucqy9rPhm\nqxGZbq4/3SxmlqOP0j43QpnMCQHX2XdP0Mc3KlH9vG9/yrEf9UtElD83g3XM\nEJ68qV83pKFkT0HI0gFuuNpMPss8odwTqOey8FShhwxomVz4tNfrSqzpKs9G\nWQwW2cNg/coEmMkpphCEXlRTYR06NALDtHk/1X10Q5fwXo8QkG/F9FQVgNEO\nG7Up\r\n=TKKE\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDzw6vCC7GWStKhiuzJYGFlDEjNRODxbq8OshI2z910agIgFoDp8evJ/RDskF1RoTCZJzr/WhMirOH8h+T97L/tOu4="}]},"directories":{},"maintainers":[{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.9.0_1625598100140_0.8321361935013127"},"_hasShrinkwrap":false},"1.10.0-next.1":{"name":"gatsby-plugin-image","version":"1.10.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.5","@babel/core":"^7.14.6","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.7","@babel/traverse":"^7.14.7","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.10.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.10.0-next.1","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"ec0444847b2d11ed29feb656c9c7f32ab78e2dc8","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.10.0-next.1","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (linux)","dist":{"integrity":"sha512-OWqlfpwf0IiWHUviPTbZrlRI4/in3tkZz0w/u+UmcKyCnDm1ayvGnWH5iR6L8MV4gwqm3+swbtxMKKVPZ3VN2A==","shasum":"4a31148e3512de01c70e4f4c8d0b7f7b28419e7a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.10.0-next.1.tgz","fileCount":99,"unpackedSize":697503,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg5wy5CRA9TVsSAnZWagAA+IkP+wbKAWmjB4erbBQ2pAHy\ncUpIamRfjRmXWrB37NlhndB3sExHtUbcLm8YoJ8uR61MX/KwE8HUIEQFVF+C\nPCv3Gblq2ww7TA5uervi2HPxt0yvDexGBo8EvXjyZxsPhyxAJCQrUrgGOg+h\nOU8J5ca2ZohbrwxWuWqeqFZ0GriPx+shMJtCyIqGTyuQus3lSadO7TeNMRgo\n655GRacTeCHug4suUjv29GIPDukXYaes9O8aSGIHdADm0LQ4bfk4Ui5zXOeW\n2CaqXthzqtExSw6dlfWRW9xgFt5gT0hv7GeE+710JEIs4tz0pErUqQO3YL46\nhI/t/iyg2HVPpsPD0ajhd+pNpiGWnsQKfQmn4m32wEVbVvXDQrzxVUoID6hc\nLtR01wKVqfQStswasgCoyq5OPHVP6y65vrzwh3TiBzqDxRLQ/wksm0UZ+TMR\nbf5q1Q9pHPKyhJzGeRJUiS15815kU2qOc6ZL+a7FcyZvBk2KV1iLyNfzyN3v\nISIHm/6I9O/LC8HtPPPkHDCvRAxHV2PHIsETWCkogAokAjPNWLCUAebddxXS\nnDc+EwGSeMtRZZ8b6p/BCA2Yh6PZne3s+BBptDGkm9Pi83dY6mCSIezC2xkn\nEfSdEol4sF5MtJ6+CQlGlKn7qQNFvsmYZgFv3U9rTq4CbhCNr1t7NXEzunml\n5Lhu\r\n=S/LK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDXGB7IriuyCSixTJmCjMWQgfmmlTvXw/geVj5KFKhnNgIgKGkOiwXUSggxv9lpFTkVPw3THJI8Q3VA2sJHJ64OLvo="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.10.0-next.1_1625754809239_0.6173043101512214"},"_hasShrinkwrap":false},"1.11.0-next.0":{"name":"gatsby-plugin-image","version":"1.11.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.5","@babel/core":"^7.14.6","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.7","@babel/traverse":"^7.14.7","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.11.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.11.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"62997b37a7bf851e67e89c7440f88458978e787e","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.11.0-next.0","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (linux)","dist":{"integrity":"sha512-Tcah6+N/Rl9thVl2luhQBVPVRYffeuVJZ/qpgGxtetLytm4ii7vHWnLkzf6QisZZ9EJWyXjkjSvyWiTM4xRh5Q==","shasum":"7f8255329f577e178f364c26802c60b431c086e8","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.11.0-next.0.tgz","fileCount":99,"unpackedSize":697710,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg8Fn+CRA9TVsSAnZWagAASaEP/0S9dJSsJDM4nh8pdYha\n8k3qyBrOzqwLvJRAuRQxJ3uYwAIeM1iSmb3WLmtXtzEWoq2TPuu//u7GeLAH\nF4ChCXrPLLvT30z+gr9guFFcURBKkm6YrMWaDXEbHfD9doH4S8/THPqMYRlp\nGhAF/qf0NqLBy+pw57DLJbIa23efiDmgPTixwYjiaaMO7PHtaxNlAB+lHcEt\n15Ove3hz8aWwLFs84GD782Y9xLRMODDIeH0BdHaW1y+16K1pcoE0N6LmQZXD\nlc9N6W0Ktf3UpKAxe9MSTavHM+H9a+BxQGI5MHG9/VYdBUMZzKX/6Eyj0hde\n6ZjxQxMkJoo97sLcBpr5WcRmcGD0fAbiMUMz/kpsTsMucU5OUvma+Ukx2CEx\nbdXEpsyZ3MhSIqL5cT/kiaMXDIeUl7sSTAlQIcd0H05nc4EZgSxNy8Oh9F0o\nTZlps/NWbCPAVU0mr1iCebyOLZhd0HIrEyAzzQN5V7/lRec/kpJsxCiyqUS6\nYnbuIpNgMi8ma6DAuNyRLV5itAWevMGwEvIerKvViATgehqluNqf8SenzGTy\nJF2Mz9F94m9gQH9I771ENCp95zVfgn+ho9bsnTr/JGxqGc3qaxxnEBAgcN4W\nmXL6qxGwMRk078PNjyG/vRU+Lqf6eSIyesyalIKd4fIj5W2uYuW9RZplAYrb\nJoCK\r\n=sMQo\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDP3ZmyWKNojgoHkoVTTQu4puata23ucDVqCal4k+zWuwIgEQkBoLRTs6B7e4xgmGGyJExKZr0VwiZQD9olgc1XON8="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.11.0-next.0_1626364413906_0.48259421827418736"},"_hasShrinkwrap":false},"1.11.0-next.1":{"name":"gatsby-plugin-image","version":"1.11.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.5","@babel/core":"^7.14.6","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.7","@babel/traverse":"^7.14.7","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.11.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.11.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"b7a2fa368d7f3baa6a190893201c9a1ed4bc6988","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.11.0-next.1","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (linux)","dist":{"integrity":"sha512-WS2VevUZaRREW7FksN7W83XLw1XgJIWyRyUHaTGNJTYyjxIouEon1oo9lOL+ffcg3MVeNULQ5x17wG1/EMvqBA==","shasum":"25b03d033bfc713d2d0bd939eaf6971fc344208a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.11.0-next.1.tgz","fileCount":99,"unpackedSize":700595,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg9WtDCRA9TVsSAnZWagAAS8oP/RUucesgap39NPg/5LpR\n/RwXFbhQhxJhSIsL5utySa06B8RBBWqxoZsNOlmT1vVdBFSUbl03Uq0pPffY\ntybyTpeDGi0VF5jQSxr2k+LAsAG2gwdqAJ0hBrlSlgehz/WDbpRQQAv3mGmH\ndj/RfQDHQASFjlT3zy19Auad9zmGVnOyCesNw3viCkDqt+UAl0dqUdfo/LGE\n0ljqOD3QyWy4CuakKKgiyddV23lGWvy1DKWllhP9eIuEOp35ZU+/YV8vlOrl\n8JxL507J01K9/q5ZNbrc4Uz1p55TizS+dv/X1UsL/gd4uboO+jndxeXFcrxF\nVSlN+G0etI0ZH+3jYF/f/kjivf7sMcuWbZ1QjuKHzFMW7H61/f95VfPb0sQw\nEyFSuqBUBqKe0DfPCfec9HpvoIhT8EHPfrtvAQZWr0g+H5EryW4UyF/ls16y\nQawhUylEdIv+oQogAe7x5zl3AzxmOI7K7MD7r4/83kI3sskCoZlWwdjcMDHG\nIu2RswN93taMXuTyoNRBGID02BNIEMqzWe2qkF4qqravbfaeB2HDRHRZcdKI\nqSbTncXvicTq7EkJnvpUx3ugkipr5Pelc7zRgDNti/TsAmQqdWp929Gxp1NZ\nmCCXRm4y0ZPzjjh5RgwAgK4HV/YCFYdASoFIAcq5IYmVnTl4druFrBs/9a0X\ncHbK\r\n=TztH\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICZY3TKTMv8vnEp4AwVY95vk3CJXBhDA4t5WCkMbt55DAiEAjPLOgDuRO+hvDB6DDDL90u0q6V/MIIgNh5WilURkjeo="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.11.0-next.1_1626696515776_0.5100186024342681"},"_hasShrinkwrap":false},"1.10.0":{"name":"gatsby-plugin-image","version":"1.10.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.5","@babel/core":"^7.14.6","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.7","@babel/traverse":"^7.14.7","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.10.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.10.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"e77af12aeb672cf074719e0bacb7cccf796ebaef","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.10.0","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (linux)","dist":{"integrity":"sha512-6/miPMomGrNSwobZT4yg6fqYQfCQpnoveCBK5SoK/zFBOHHNpd+08137lqF6vKtX+OkcfDHunGOAMU2W2iX1Og==","shasum":"d70cf48f96ddf8540eee1e19acf0ee4e97a4b7f1","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.10.0.tgz","fileCount":99,"unpackedSize":700413,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg9uaZCRA9TVsSAnZWagAAmMoP/0Ipb8Mhj0EoR1BUyLlg\nncX0lCJlcdu6dHKeq52Mtm/7fV4qjeeQ6u3WqQJaTBUmiW3Cp5AKPjj2C6gl\nIaKfiy/eixU8nHWM2RPLtJamIchAu2+dsLb2iJl6vLxEDSe09HGk48ww1ZG7\nTqCjvdgki2cijDCB435OuVuXmb5zFTWs3BIVQJn+kbJ2BwXVC7ecZFrOPiXo\ndtJ3otYu/SnRM84ld8DUegxDXeJbQfG6FvkY1NSQCsRPO8/sDbyXz4IAgAGy\nEqptMqX1Le1+1VXvXP1lVWMtuR95QWt5bIXbQcUHdXHB2lqul4AS38Djp+8f\nxTi9vPAKDhSM1/mZASy86A6eG1kIL3ta3JpPQSFty4dQHFi2p5WMHiht6uus\nCdUyf8UG2Vxi+odMaqq2thhZvrK5tFXYJuEXjuqvEoSHoLnn/om+6Fmnjhzw\n3N3vRXMDphQ9OO4Qo9o5+8Wqzsq4alFOTjy2PRY04DHKE03/oLXKP/7c7kJY\nE8+uLGSxIRV/B0yemAQbNJR5TJPbUTpQKiiPoJl/pZJV3/8ojIigpQvDQ1Fd\nmkF+KOWtwal/P/oWs8c0kxNz2kAIr6BQJaQt7I2KMOIPnFA5gCbl2HJ9vheZ\nQ5dCCWBPOs3AMUyHFOt2B5JlZSQIv0lDsWZv8WiTJwlTyIy7CgTqDCPpgGBG\nk72O\r\n=Frzq\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDKQEYsWNmDLI3DdnX1mh1EAuZ3dNTb5b1qrKLSD16GGAiEAqM42frg1rbHJ1aOklRKaGiplk8h3UVc/ic6Z2QRsEOo="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.10.0_1626793624792_0.033168352082092456"},"_hasShrinkwrap":false},"1.10.1":{"name":"gatsby-plugin-image","version":"1.10.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.5","@babel/core":"^7.14.6","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.7","@babel/traverse":"^7.14.7","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.10.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.10.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"7b464beafbc8ebda31de6bef25f352d1b57fcff6","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.10.1","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (linux)","dist":{"integrity":"sha512-0gbp3XqQFOAUnyN1GJOho1Eng+rQEMy1aPhRlb1s2xdWW3zx2Uqt9N7ZRsBMo1PIxBSFeqBKzU9GDux2RVyUCA==","shasum":"27a5eb2031f16d5b7320c2399266decdf295618a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.10.1.tgz","fileCount":99,"unpackedSize":701661,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg+Ab0CRA9TVsSAnZWagAAZs0QAKJYheW7kwK7eJvHjg5F\np2PHPsudr3W6rs5+unb80WDyKr24gFzYEZ3GAQfhBtj9L1+TXRJPgq5tnYXM\n0bOJC9DTNxkJSDG0u2/3TrHAsFhWLkCIBDziIbsXHUrXZlwn1wSOyj4NdTa6\nKfWFhDy4FKk3NhIaG7uuQi7SmiHW0Lm6vcP3lg79HHwtBnT93f2cQLha2VVj\n5MShq2hZSd55QXiVAwrsdAoxpU+WpiKIji+EcD+2SwyKW3CGXsCQBymvTeQ5\nb0G63o9bwQ3HRW2tq2ctweGjj/ojl/lrvVqLf0QQPKzo8v5408Xez4P5Wed+\n70xs6Wr8KPfFzhChrkW+cSg7nMYdDOl3SDrTcNgoeXQibQ6pdGV+j3paRi/1\nf6gUQ61gdYiaHEo8AFDyczHwDOKZwKT+uhAKPCtHOtQ7E2cO3Y2bEjQUCsR6\nHPBmJNm5Xsjtp60a8BfFQycdkhC8Aj2BXEHGfAVS4XhBhDJG7VxLf/aBpWcH\nWW8l/2NvHbtYfr8I60jueCgUUXnQDmN+IFNLOAbbzdawauDzt4R4pY1jVBGW\nQSXGjnPTZW0p1Edq7vgIZQ55l5amYI/d+Zyrxmw1Mynqedwcw9IVR0mthUuW\nZMMBI9/3wpE6GgEUqOOhcSeoddYaXbV15TPCC2hDHm+SOk349CrsvIAcmxlq\nFQnU\r\n=v8XP\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEVy+8fH87E0EfC2ZEDOCtwpJfFojnGbGrdD9WF2zi5+AiAQjQTvTOlYvgANnRSab4yytUoz4RmQuY0/3jlZNWLB9Q=="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.10.1_1626867444676_0.28337240516928053"},"_hasShrinkwrap":false},"1.10.0-alpha-remote-file.48":{"name":"gatsby-plugin-image","version":"1.10.0-alpha-remote-file.48","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.5","@babel/core":"^7.14.6","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.7","@babel/traverse":"^7.14.7","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"3.10.0-alpha-remote-file.48+00e35eebb2","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"2.10.0-alpha-remote-file.48+00e35eebb2","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"00e35eebb22d38544ef9c3e320a7cf56c576b738","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.10.0-alpha-remote-file.48","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-fmy8dpc1tpClR1yQPxN7IXEY4QSA1K1ShXbFwHjx1t0OpxisB1WxzbLgoQ0eE4oPU/k10WOi3/EEPGoISyrIEw==","shasum":"4da6cc6da3341b331549a7585375492bd6c369ec","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.10.0-alpha-remote-file.48.tgz","fileCount":99,"unpackedSize":700016,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg+V3qCRA9TVsSAnZWagAAGIAQAJLMCgl717/HS1Bk/WVZ\n4uXS0fDFH9bCOSD+6DnOuUvJ40aQlfY46GHl54uU+uGsMnGWICpWbEKtoYjY\ndLF6dFfHFdRviOu/vWSExMBGDIHwt49fYw6fOFvjG/JRV0WwDwbSBfdgkeCB\nXdHORFyZ88pBcTm1YgatIqqRERpJNs3xEwvtnOIm/Zol9Vc2iu73xID8ysu0\nsCBNNgz/upr+PnSQYoF0yNZXbhHflLXpfdRog/2dtwU4AULqqYSgutk/uLC7\nrcIc7Nh4PAiEFIE9gXaV8b0bu2CCBaz/HronOObsw8FXC/YVTyhu3rf2y08P\nsWp4pg02nigdK0BxNNGDnxh7EbDJbaYTbP+R7QEfvri5F/RIj0pwGfuMuD+b\ne8vmcZXaiJRcPC89m5JeXCV4Mfl7PSmih101thWhXCSRvd2QZMnKBMQecg83\nEhTXyiMPckevR2tIjvYBqhYNobJ26tCXsLFO7XWNknFypC91iu4K1m0J5m8z\nBooTb8zEyhGoAubIQszN+hOmzmHZ32TdXzH344qZya0u3G70wG7rOdfhuq5V\ne+LxwcAUwmOf+lvlFEQLTLABKFWnW98+wADRZVMfCqIbanVav9AslUzZn1AV\nX/pWzt59TikxT4ALEDRPC3RpZ1W3xttm5dx53xQT561zPZpD5PPsJLptLkt/\na0x9\r\n=y2b6\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCijtcI3OGiKP5bU2yvo+YBElgOAWgj2BFjA4ce8+orQQIgcf/V+OUvws64VM2X+QeSnR7aKuVz6S4xFKevJKNntyg="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.10.0-alpha-remote-file.48_1626955242228_0.33619322954659325"},"_hasShrinkwrap":false},"1.11.0-next.2":{"name":"gatsby-plugin-image","version":"1.11.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.5","@babel/core":"^7.14.6","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.7","@babel/traverse":"^7.14.7","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.11.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.11.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"29f272ca36a43b549a7d45cb41b01a329c5baa27","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.11.0-next.2","_nodeVersion":"14.16.0","_npmVersion":"lerna/3.22.1/node@v14.16.0+x64 (darwin)","dist":{"integrity":"sha512-Fhvq7piimGFbmvzNE7y5WhdrljyPqrdOfmdTpGxFC3m5k/efE8LHtoLUtYS815GmVqUodvp15f54GSN6BaC6nA==","shasum":"beb2dab5b81391a941fd2aeba43eadbf373df969","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.11.0-next.2.tgz","fileCount":99,"unpackedSize":701571,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg+WxSCRA9TVsSAnZWagAAyhEP/1Vvvxehqdvl3UZ1LwEg\n+561Gd86OGZ+Mvk7NqOuMZHbV36JtGdV2D7WfJaAvolkla1uGXRWgSndpRvf\nBGVxX7PytoleZ+Saek5Q+XpngokbHERskFJeISFy+QaDueicPoVmCUcS8TJi\npehUnYysTjQcV+kjy0fKjqCGOZ36WDVyY34QK84dDqfaXtkjONOfjhf8bKUy\nWGeZeGalkaNdA2xFbR/PXWRsO6uVonI/7ik/nutXNDVIKGoKY3GDg2EcbJ+C\nJw9XwSxswQRHpTDVWYZyAysctC0Mhm7Dia1NFhYk6XvRt7aT30VSFZeaAcRB\nqlEnS6VpHY9pYauF+vwWMBxRtQKrlk8sgn7fOfrCUgdwOLnCIHrl7+NqZkYB\n2TQJfTH0+aFB08OwHFw/lWIOVqdZrWBK4Yv3e0nhhkAosft4CNRzQY/kID1R\nChHhr0PlrlJMb1a8rJL8SAcqPRSQm497l6+Af90TzaHQcl6dlwoR+46fznDW\n6UWBFSYJXeM1wzVKmmqwAn5C+AKwWig5/upvWmvGZmhkAihqxeU+9hIRGJlU\n7gWnpM3SMKrgBrqVZAaQsEu4Z/NhWMUdfPd9t73LR0H2FFnHHrYC885hi7Yb\nPI76aEIP5QCtvmnOJ4cYRiWwqocuKzPuqu6H/l9aBVoOQ3Jap0tNh20Wd4cn\ne6ZW\r\n=J23z\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEMCH1Hb/yQS/yGrFZxIgploiiitKW2bU7zE+TW1mgnpuasCIHBzZG6GCxl5osbdKAwSegWWf/Zoc3sTKgdtFn6rqF2F"}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.11.0-next.2_1626958929929_0.5112734328309507"},"_hasShrinkwrap":false},"1.11.0-alpha-qe-sm.25":{"name":"gatsby-plugin-image","version":"1.11.0-alpha-qe-sm.25","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.5","@babel/core":"^7.14.6","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.7","@babel/traverse":"^7.14.7","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"3.11.0-alpha-qe-sm.41+f1ced5fcf2","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"2.11.0-alpha-qe-sm.41+f1ced5fcf2","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"f1ced5fcf2883e8029ed041a88860c66abfedfb6","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.11.0-alpha-qe-sm.25","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-aTuQmavfr97ERpO5rbq3fl2/Oqr6uys0xKDux4Sq6pNrcMuO73TURb8Z/93lO3zx0pU8K1ViRaAoiB7I5+UspA==","shasum":"c28b12bde046ca5d4cb9b6d50a1327c1b51b46b3","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.11.0-alpha-qe-sm.25.tgz","fileCount":99,"unpackedSize":701628,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhAWcuCRA9TVsSAnZWagAAGD4P/0HH6XmXsihu7v0okW5M\n1hjbbOVKaCDc8GrElXufI48C80xj+ztxqyEkjXSnizBACu1y+kQL7QGAUbT8\nf9NqJgTuqjILF06OFf+JLS5iLVqTIQ7zHo6CoUKmqjpUIftI/XgTaJuclHD4\nqoOipoZlAWu2gmn8jRDzkVJ0a/sGwS2pXiDfwwzjnBsURK/TCop9pCf+zT+w\nDmK2KcnPmPoKyWC/AYa1VaOQxhP0qyApG66GnCe1b7iHjmVLrTks0BRCAlnW\ng1W/KQweFRnjbkSYYyxVolgsfCTo1cOuCtqnM+FKzsJG+HaNbtyo1Cmlefbc\n4YIwxju75b8iXF6Px0UxfrCARflw/uJaghIyV1iXVKjOCOVx6j5fvf67/c84\nKTkueAJwgQ69pbQ7b1i9StxvoXitUpSBixnB6d1LSyMg/yxNfQk+1IbesTmk\nhNEZxK9nVXQYZxqkG2U9cB6ixppBcvfl3MmETGvyLBBd4NCw/KLdRpnF47p4\nIg37dPUdLf0mXZZU0K2TvnDfIDw/ruKbHR2Nb/TwjR+sTv945FvCkaEb3LpN\no4m/NKznTEM0q9yDloyzweXjC7ACY1CSp94uHhzOFSbbiwH97irNnI7LYUxx\nFCN6HWOoRI4sKUlZOEgjbVrUPKY5+ox/WTcp5mSRtQIeEx/0d1Kb65CsPrQf\nzXt3\r\n=zi4S\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICgZj9DplrIbSc3Vw8EGge+AzdLN5B6vtddXzIC59PlMAiEA2RY5GRxxJPUvpdOrA7xewdsZQjR2Da831PNqzbuCJdI="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.11.0-alpha-qe-sm.25_1627481902083_0.8849234194854425"},"_hasShrinkwrap":false},"1.11.0-alpha-qe-sm.26":{"name":"gatsby-plugin-image","version":"1.11.0-alpha-qe-sm.26","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.5","@babel/core":"^7.14.6","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.7","@babel/traverse":"^7.14.7","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"3.11.0-alpha-qe-sm.42+96295b92e6","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"2.11.0-alpha-qe-sm.42+96295b92e6","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"96295b92e6ac26bc60f3de7d2b138029e2f79172","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.11.0-alpha-qe-sm.26","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-FoBfxMKfe0BSnEwitVL7AZ6sOo3eyA/FEUWTaJ1iGhXZdl4P5SzERXuuFkGIJ8xrU5aUOVZci2C5sz5527LFzg==","shasum":"435ca8340c15d5f78430616263da72fd26ac06e5","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.11.0-alpha-qe-sm.26.tgz","fileCount":99,"unpackedSize":701628,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhAW5ECRA9TVsSAnZWagAAOBQP/jR7YVNbGxXZ7MuG0KHT\n5i/PQUY5jdP5drZczv/CfXMI/LEAHrS3rN4YxpYJMdm48yZnqOXsDTJ4g6Pk\nAtB5onFFDTbEZFOnHJyb2vLCpDeqDlpFn4m/SUCSyVZ17anAm6iml4k6hUVX\nleJk4A4m5q8oUAzqMMI+lkodq2X6qlNmx68a7m9vjkka2YnLlbEkGzGdZK8y\nUJqZLYoHgDuSdEIc3yRwfMWn4toBw9OGWVoDRzmGOS+8vtM1RDV0GqHuyW+5\nFbs5kz2fQlKJrrWgGBUFYri5vw8fvqnKFArUvTgdqGt38F7gzpQ3FOENFlS0\ncIIyaBwzHZMhO/l+9kTnYMUrg0ldekpY32pn8PfNv19OR7jF7K4QxQ5KtfZC\ntcf69kvLEl1ynT85XmWTTn2COdaODEMDa4AMslh84mcitaHQ8l+jkVGCNTAe\nK4qD73fl+evoMda83K31aIMBLkQ7EVTQcqC4omBGA+Y+8AM+VoADx0ppHu5Z\n2+zGw43chCMR87IfCWPVXn5CM5fbxcHzvMWYrAf/3IaaciI/bRIpmx02giQF\nf7/CY7gInF8D8EuOmZc7VOil4liK5Ef7hra0Q/Zr3T2PH94StNc8QYWvVbji\n7SLnBij32nUUWoQdjNL+EGeyW1fDexwxCXPjm+GbIBxehl0g57sirUw8nrJz\nsiVi\r\n=xyYW\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDiXagUqh+ZHPj9YqXcwY8SBL0KpBpC4VuqLhg2rNh+KQIhAMfpWVrtyqnpM9qMOY7HeGDxzu1IYFlIx/jUGBVkK9wS"}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.11.0-alpha-qe-sm.26_1627483715737_0.25341383541626294"},"_hasShrinkwrap":false},"1.12.0-next.0":{"name":"gatsby-plugin-image","version":"1.12.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.5","@babel/core":"^7.14.6","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.7","@babel/traverse":"^7.14.7","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.12.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.12.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"d8479b2fa64352c0cb9f1c8e870812e75178695f","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.12.0-next.0","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-hAc6Xmv9q22I0uSNuf8tMs+Ox3lG2aYWueVgTHKU9j3GChUf0oTpIEdmPdWWcL7qm9IUUJ7KPfepLaHi/Cps6w==","shasum":"da9369ba595f13d1819e9cb97a604ccb2c2b077f","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.12.0-next.0.tgz","fileCount":99,"unpackedSize":701778,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhAtZxCRA9TVsSAnZWagAA6TQQAJ8OWEEFoydAQ7mqB5ak\nx8XjS04QEyGxo61cnZxoNWVavi1cU/Wvf+owkHLsMEbOIS2JHDUGsg9E8jkU\n/StY6Eyh9sjIymC/JAu+6Mm6ACdZoJ/2Gfk6eBSU4C4nbLzgGiwaDvL5NxIZ\nrj5ceN8WNdZPWYSQIIUs1mgbD5CiTgnlzoadzKEEl9FIu2QagGhXlbSQKm0B\n9y2DDGJNIoa2D9L4xwIZQTyAHqtEryOGQ8M4zy+4UbIZpYuFQ3ZlSDYb4n89\nT0Cko65UK6XF/8bH1iqksofFB3j62cAfAwsMnqKUin2a3XmAfjyDJuPUosXU\nylpDAuLGP2NYu0c73l0eMHamAESx5mhv+lFbX7gMq/uyR73Htkr9E0qRyQ7a\nbAxG84dZ+jmwP/O4uUIfKbnOJeWdrQhaPdDbRF2Bdh4h8zhGIt5Ncs3ifcFX\nIUl5B9PlRhIxopm9ew61DyQaiobXQZjkTVGMFGSZWDHoWFGde4rMT5lRLoIl\nKCQoRCQ0yzpmOQ+AZzGLEWTTjxChmLEPtmz4BEsnqx60i42vWbFdWzA2hitr\nFBgHx54TMVST1h0h+JfKceJtG1eK3fPZPpILctKcUjUw/5TcXyI9iLOMUFqB\nu+HiSVZLCekGVTwccAHiiKGWkutPqrg7cRoYK90PawaNvsSFT8pVHr3aOJ/N\nNZfh\r\n=q34T\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICTAavaEMn0Qd3tMSakeduLABSFGiTDZM4qkhAaGmDPQAiBs0d5zSZunY91tUnS65EEG0tE+cLJyOtYtZ7jROuVckg=="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.12.0-next.0_1627575920931_0.6356126123968882"},"_hasShrinkwrap":false},"1.11.0":{"name":"gatsby-plugin-image","version":"1.11.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.5","@babel/core":"^7.14.6","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.7","@babel/traverse":"^7.14.7","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.11.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.11.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"115e63196bb09f09446e7b57123e1178d81a7f40","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.11.0","_nodeVersion":"14.17.4","_npmVersion":"lerna/3.22.1/node@v14.17.4+x64 (darwin)","dist":{"integrity":"sha512-hlbGHpGTgHOp0QTWE9jF0IILRbzbbDPkjktCjXR43Pt24L7/Df4HqdFrJM7hB36O4d7j3vY1GSW1L5OUEPPkhw==","shasum":"c7d2ffa79c6476e1fdf305a183bc02e99f31ec12","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.11.0.tgz","fileCount":99,"unpackedSize":701975,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhCtbuCRA9TVsSAnZWagAAMI0QAJ2xnNYwFzTszzGxLi/h\nYojOo6jcZhewo7vsIIB0ZLcvJXxIPj5iL0tbxA3RnXEnmWOuW5TvZPzgUBiK\n0rUuSx/tAtyiZRKmbWGlvwKDuCgr66PZWKHAIX+YR+RRtWjP/vS1AM37wLQ3\n1AkKkrcNHkiJ3kjZQUlmvNSpzXEAvA/FzyIZrVansITeLx5U9evbHqmAFCyg\ns4ftSKUhBofL5AX7t+KPOhN9YyQC7xg7tUGx1O0yEPo5wUDy8kx3+CLPlrLm\nk3RyJm59SXS9r3hyRcTHY15x4yHQ516/6m0jdU1C9gi4sqt/okDHzDLruaDA\ns5yegrMvseK8PF+rg2io9AJFahyDjlzaeneFhcqfsEYYEbpiROmwKqKVhUkg\nVQd3rJoBkSvIMKxoofPamfMEI67HRZn4kcakXw7k2FD63m3IQNnRZTUMWctl\n+2viPO8O5iJ3Gh0xfwx0AbkhqbDyuqNMxZZP3PUXBSHc3c10vS0RajZZdi4o\n5nxIS49I4RTMp4rsjrPd1rVXy+iLwFm338BQTRHlNosK0lGQTkLrsaU1QU9y\nZtsU51oSxbTKC/ljN8KMYK0saMAE44nkGyKzvqtS5zu+Azb8mKRhBu0Y5asI\nU3HooMWYAeqThjZY/KblnuTGcgibV79VPZXFWIf2pjEd1OpwmkSNquwCVy83\ntyH4\r\n=XrbF\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDWjVVxDMNFQU015KeiEgJLPvhMvM7yevZCnI510DA6cAIhALiqn0I7EcqgasHqlfEh3rXvNDkhngMmp43WxRsDKIvl"}]},"_npmUser":{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.11.0_1628100334412_0.8706399076333928"},"_hasShrinkwrap":false},"1.12.0-next.1":{"name":"gatsby-plugin-image","version":"1.12.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.12.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.12.0-next.1","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"9f473965567ee2c1f8309484c665aa2a37e12836","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.12.0-next.1","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (linux)","dist":{"integrity":"sha512-L3AUbqseoV1ZeqMY2NGy4bS4QnwOCeTGzAK0kUjQ3iL3fEESucE1mQH78lmFcTdB3jF01kGTBXVFTPz+KHC9zA==","shasum":"c037cf2e2b67a63b4dc6b685c8eba0217b20bf80","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.12.0-next.1.tgz","fileCount":99,"unpackedSize":702217,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhC9FKCRA9TVsSAnZWagAA0C8P/0Ffdjkn/agL2lLadyYP\npCEHmNIQGV7B74JznqfMxt5iu69bxqc/TAqFtvffiDrgXd3tqmZz2nG/qYY0\nJYpCXdvCymALXbnn3Ay6LOmQ5ZD1Ii1rfx0DpF5QHjls/Ie/oZN6JF96P9jt\nhv+RSiolgAzB0nQJcE1uCvUhEr/7cTU0s0tjO/nJRK+UqxGZt4fiEsJ+cm+s\nsZRkPZoF+ko4o3kwxTpXxnyVuduX1xgXmcVMSa95kmOnQQ3hxQYUGIDoCp4o\ndkrAC9SAC5M5y8VVa6nG72k7A4UREFmajunAKxCV2N9hmaVSU8/wYZt4MDa0\nsgknN2Z7D1JogWTpEBktafMz+sdOa0LqBYfp+dST07OmPyOkhWuv2cYNIXzh\nHI8YCWiNVQEW75dmYp04yx4o2z3i4UH38DW576bjrSW2/qnbwXZ0QbF4mcJe\ntStpAUSrSLBuYUVVA4D2cHACfU0RYKJGtw74lqH2xxdEk4XXKUxM+cf3L531\nv/i2csMq9Xni4Nc3GXexEUg01u741rhtiFK4B31UA+WmJW9oDInl/RtDRJy3\n4aMoTtxdsG6e7ezzcjardXiNkL1oWKYQ566UOxqxSus0DotHub4kepnTsswO\nMwxGhyDzytoelZhE6zkujjSS/StJdRkSQkriP9z6JlQ9RY6nz3t/l7ndD1gI\nlEja\r\n=oZVy\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAj9iuH/xdWzIRTh9Rb39xdUmnDZSntBzn3eVYF9rr4kAiEA8qh/yWtMDM+5hJAemu2DsBuvW3pcTG/rKegMwE3v0eM="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.12.0-next.1_1628164425971_0.9455857924849542"},"_hasShrinkwrap":false},"1.12.0-next.2":{"name":"gatsby-plugin-image","version":"1.12.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.12.0-next.2","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.12.0-next.2","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"e0e2ecbfa3e6cc074410f4889183c7f64a8afbe8","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.12.0-next.2","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-hj/PIg+mKdJvGo4RTebxYUMDHfOc0gqxznAmcgmgXfDNVvY7eW9ji3v0iXpl0bIwvRDMWMnKPIT6g3yp4v3ikQ==","shasum":"467f7decc0d9884ff009649c6700c45f1d9ec5c5","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.12.0-next.2.tgz","fileCount":99,"unpackedSize":705232,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhDCowCRA9TVsSAnZWagAAtM8P+wU3Epo9nz+UBQbQeHk1\nFkmGlcUljQBbI4vdiZ8Pg5eO2X7p8KtZvtLioAv3fevI9JhwxTBMoiJMNo6L\nsRz6UaJohb+wCqpw94JMC0tojUmNUbonDzJZUYd5d51/CWR6003laeHuX2Wt\no1YHTilybJYWcs7o6s9SWMYuPuLKun5x2X23wrmcYP98/QwzurnG6dXKekAy\n7NhNbkYSdVUeNeX5cAl9R0X2nIafxml2WCZgiH0YBzRVcw7jcmS3abiUmMPz\npkIjgtM6vTjCZMmf+x0sLzVcjacxJHNH2KDwGsz6LuzoH/TTN79nlAwczTLL\njpneBtglYVYD/QS3K5bNJLCsjawLYYc1qIxAFKBtLyfXd0xlihsJlYMJdFHH\nGH9DcE/ztyctmiw83If+GS/a+VuB+XpST/bKKQlo9G+Vnhk6XUrvnaFm0MRF\nnZPed8e9wYhI/+V0jtMd8oVPr38q6Bpq7us8kUVksYoJR8511kUd9JoCCWOJ\nRuUQDXVUIpD1YJDnGizNisaSaGWigz1hrG7YrazXuBLIthYlH3r2cfEq7jBU\n3Qy0II+e5zvJ4EWnVed0/RisTKJsGdtPf2f3XNJk6obD7T21sqFvfFUhYIGi\nDf0XVRcwxODtem+HuG3EPaMokA6HrhBbK/CDqmgyvdGE3bJyBNiVv4h8L9LN\nZDGZ\r\n=zmQe\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFK6dcmxCSJtfpxWQiFeVqd8J894DTz0luuo0gWbvwCmAiEAuCumbtu2pYtVIwnSV6pspMcXcYHrKJnhIX+uT/7nBKg="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.12.0-next.2_1628187184064_0.8234221578478567"},"_hasShrinkwrap":false},"1.12.0-next.3":{"name":"gatsby-plugin-image","version":"1.12.0-next.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.12.0-next.3","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.12.0-next.3","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"2273a0551bd39e3c3cac129e70a8b9c83962bde8","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.12.0-next.3","_nodeVersion":"14.17.3","_npmVersion":"lerna/3.22.1/node@v14.17.3+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-JvLZ2QzRJDSyyeuPz2A0yGoJ18DZb98iogFbhZMiIGpdsah1NvokGKI1C9XwuW5Qe4HDQ0QqlAlnff5d1ycI2w==","shasum":"07767ce5a8fcdb9875126c4e83b128b9cdc8314b","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.12.0-next.3.tgz","fileCount":99,"unpackedSize":706566,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhESo+CRA9TVsSAnZWagAAuUoP/1o77WWK/R5M5y+b8ST/\n9joniepPWrYl5bRI2Y4YWYXXH7tceJmfPit4V2DglqxRfBjJ4AOu8ZFNYEUy\nBUNzX5GkXvKsdDm5gxPQDdHjnBDTzvWKckOhMw9OyRAY1UqJk42EivINMwol\nbPxC/feJmtUJa508sSq+DtuPAqItVbv6yONTjzB7tTjiZcw5Di4BnJMA40Jm\n5WsjsOlxVDxewevuLLPtwFcZ+nsYSDc9unAb0//sDWo59Cd01ijrwPgc2fGc\nSgfwwMAQWLmD5+jb4gijiXVNp2QJfDrtQoAWZyvm/JpPJjzg23VRXrlakAf2\nJRAfmzkLMnkPEeFJ0ZkJ1UNGPkhTqpY5/BCgwYvLWWsfbHBZlKXdMlhQW8Xc\nPY0eTg5zpOWiwwIbIFrVI8/EPif6OtrZCIhziaQP6HsTym0uWEb279fH2KlP\nackHr7eSaXMuXsotyb+3o3FePUY0jmKcw3+osW3wETkZP9YD77zI3hz5Ue/k\negQJOvCcqnlOhMVZxK3NT+p1f9pllaNOS/G3AuuESNoYLz46a5zEBZ3H05BQ\naBASinPAPGtutE5ZAxDwLO26qT+E5oYDiF/gp0qGA+pX4LEWmmFikddpzTP3\n29uExGkk/Jhta+vpVjS14kvQVGRPbbihihA8bHEvTjHt5wfJFXhsmlU9Mlt5\nG0qW\r\n=wyN+\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCReGHIY7UjTNh396Q/U81or0rHRdItlw6C0ijr35kC0AIhAOAaAqmlYTUsvGniCn5nheZDAGiIVzlAsg/FZCZAomeH"}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.12.0-next.3_1628514877957_0.16841407030004585"},"_hasShrinkwrap":false},"1.11.0-alpha-qe-sm.48":{"name":"gatsby-plugin-image","version":"1.11.0-alpha-qe-sm.48","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.5","@babel/core":"^7.14.6","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.1","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.7","@babel/traverse":"^7.14.7","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"3.11.0-alpha-qe-sm.64+15ae291e35","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"2.11.0-alpha-qe-sm.64+15ae291e35","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"15ae291e35deda4ae698da323b02225e080e6e60","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.11.0-alpha-qe-sm.48","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-rXec7hehPiKIWtfSHtGi8MUBi5L1nYuBbTorHNtOIuYd6RPGEOR7X/Wm/4+vMi6EUxcOHC18IfB7XsD9TBPh/Q==","shasum":"695353323cc980b20bd9f2c60fddf7dff1c80938","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.11.0-alpha-qe-sm.48.tgz","fileCount":99,"unpackedSize":701628,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhEWUxCRA9TVsSAnZWagAAwocP/2iYQ/cM8bIZm0gLTx63\ncDgHPdMUpEEnbT18j+JAUGvqP29ds06uoPbjp1kxLkWpW5MDOq3bmZ5Me6iQ\nTteuxmwQUIsbGxwWkgp01RMQnUs4qXlGaGwnQb5mB7ue2+CwcwS4Xh3brmZS\nazZQlFc83vhDHjpEj0+hBAoAqRX7qeH+wNVMXJ2lUEh0mUPEkBvZPtbxeqNt\ncLCkefEOmxirgOxluFsfkjAb5cyamGmmuj4nzy2lgGyg4mGfdQCgkv+LHkGl\nbTipdCPed97sAws/KUBNPCy9dT/E1QEoAqB5txizrDmMqWggKTepD06P4gZR\naLjwIRYJmZWojP2xILzFah8Bfem/sMjtbe5TNIJBPZ0hAHYaMr86J0LQlNMd\nyDgd5YNPa2OXtHGqjHxr4OGPMu5I1yNIGu4OrR6Ko9KElX+z5T9KXOACa0ev\nXXsa0J4V2Xn6QvWZwpgNl2UV3GehkUQSqzZ4lhtNtvQWdJfOKwAkLHkPcrYP\nPeSQBw8zLMrjaXN5axejInHIE5oy6ZIMW6OVQvQ3EL3f1XDmdR21Nfk2/dqy\niWUm39LSLJimxsawbyuLKhhNLOaN25C2aQ082zXDx/Yd4LphW3Bnk++rg927\ntd/dXgwiyF1vqXsIgoAd/mP9xUBnR6bD8MH2JZKvCuLtUzPzqBhn3/WjRGBh\noZNC\r\n=rsxz\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDUHh7imXJpl/J1pgLi/GawOeOrWWOLXLn2gZhfuEbG+AIgPLBjeAp+27fnUnIuwUK3+8ITNQWYfoweZISqOXqwVa4="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.11.0-alpha-qe-sm.48_1628529969431_0.932321685147542"},"_hasShrinkwrap":false},"1.13.0-next.0":{"name":"gatsby-plugin-image","version":"1.13.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.13.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.13.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"41f0ce7ad5010b94c635ad9a08a7f4c4ba564df7","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.13.0-next.0","_nodeVersion":"14.17.3","_npmVersion":"lerna/3.22.1/node@v14.17.3+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-OpbrUdy/yqnb+8DvMC6KuqlO+E3R9m26nUpWEqET0ZSnOsP+tSi38iG5sV9MOk5jCLMYGroCeVWjsr9JDU8oOQ==","shasum":"1d6d868d62cbfd010a14bf767c23a1d9103f0026","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.13.0-next.0.tgz","fileCount":99,"unpackedSize":707279,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhFWDnCRA9TVsSAnZWagAAqFYP/0NSRZNquOEWKxdGqZZZ\ntIaS7vupU5izAdKjLqY4jRlYeN6+rmRH5K9hSmA9XkJ1/SkIJ4hhX+vpxUeg\nW7fpSQsoUz+6Dv1Pgp9UjSXVFfzJodeeHF6jlAtbmyKhbieElumOCsAFKNLr\n7BN5d+YcWIJ+S8Ij8nwzAUbc0jEC64Hsr2Yn5tYn5l6ht8QGeM7qtrvryk+7\n1iLSBWfsyIE0u1zDFrw5OGVtn6SkxRngw6JNhYBT1ngt6IuzCCbJl3FciFRF\nunsTlqiE++ZWu5bmrehiHsPPgme35ItCEiz0bBmWX3NZzYnnisCDPodE/0nP\n6P8lygxkI2TWfmYigF2GHZJ/s83ujh1ajomscZkVmFrN4K4AvIBcOmdrAr53\nmPK4VSPSL0F6Id+StVoQJwmECgH3oeHKHSBS1hs3wAyO2cDeCUKwZZuLImPX\nWSJ2vJuWKXQQOBk9y4E1hQ7mie1ESGptvHS0baMVo1y/JE/V0jU52UhmbiHI\nmYA3eiv37nuE2+BmYnERckiiQaJgofXKMDxkq85SNxuKh2FfHoCEnwlgCQaw\ngNf9jutCyQwWBHRhW/YwGVSScem6Tue4VOyhjU/gJhDmGagaO9va0KqXvqNk\nsg5fVAat4NKqk9+P8ZkFF8ALOLxM+yyrjchsBhpXKuSJMZEWXr6lk4VMm24C\nG9qi\r\n=NMKu\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAJSYlDrx468t9Bm8Roa3DRo38WKDO4OsmGuJccj+yTJAiBr9Ok28R3hvr6QK28QoGOijH2/80+vO8nqjHNOgUSKwA=="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.13.0-next.0_1628791015579_0.9691080896778403"},"_hasShrinkwrap":false},"1.10.0-alpha-remote-fetch.59":{"name":"gatsby-plugin-image","version":"1.10.0-alpha-remote-fetch.59","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"3.10.0-alpha-remote-fetch.59+e01c0f01ed","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"2.10.0-alpha-remote-fetch.59+e01c0f01ed","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"e01c0f01edf639d172cab2b678ff1cd966b713bd","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`\n          quality: 50\n          breakpoints: [750, 1080, 1366, 1920]\n          backgroundColor: `transparent`\n          tracedSVGOptions: {}\n          blurredOptions: {}\n          jpgOptions: {}\n          pngOptions: {}\n          webpOptions: {}\n          avifOptions: {}\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.10.0-alpha-remote-fetch.59","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-VWwDd2Szrm20Y9mmrp2Fsl158+3pCPI8DuGl4HNl95DVcb+hEmB46rWhIj9mX9COwn74+KAAXLVZMxiDG5kHPA==","shasum":"bced0aaf845a96682df196e7ba33e832a7de7a08","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.10.0-alpha-remote-fetch.59.tgz","fileCount":99,"unpackedSize":705101,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhFWM8CRA9TVsSAnZWagAADyUP/100CWhKdxy8egbLCTgq\n6RKVnkjiyHqNA5rLbDLNLrrdiHuoXnySX6kvQWQSmtSqu3Sda0BCX24nnTL6\nb1b2sUnATHEKlKRoG8+k/7r2o0pOjB9C5IgwdAQwd3gSZ4e8Ukz2AhsBJg4+\nyijH5x4S9KVVXxIXRcx4nOc6v8adfib/2PobXDRRh6sVnqcIL5h5McyW+FkC\ntZcbjosEV0jyar3SA50Jd37nzdsTpGc3Rkzv1gAZoGpfD150MZpUIPKBKQwi\n67QNkU+hiDKf93AqpRxB34kLIfR1s1HFd9jxfObBIsHBcwCNjLjYTYXwywYU\nZoG9UOxTRjyOm/y6tFHc4a8ZQT8+FmvUS5WjUAMGvWSMOIXJMrK7lRCO/Eij\nwWOaxGGVxrESjWaIgpue+oCrs7nA7RrDX5yqVrSYROHBAB2EOkDeZ0Tjoc3M\nizC8jHOekjCG1XApQTzQ3N9/XZZw9mQjir3d+Xg4UGYX2NofW8uGPCze3gub\nG52rSJLAs/X4ilyu+iojC5f9gvNju17+gGCBJrr1OiySJ/VKMNrEYidtzjQt\nIknJqaLMzjFhsL0AVLA98hYfl2pvuyb2J+T06rQorDtEl52qIHj7ZPqKQfPm\nMq+Jq87qs3LviwJMdQBrya6TK722eowxuakbzEGjhCrg6TzvVebBtjVDvCCq\nm2y5\r\n=2r/M\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD3m7Iwv7SNeBsWixg6sq9HmoFNukRha0Aac+RAjJ/7oQIhAOzMV2IrsSGFaLVkXAe1uUNHNTO7ko/UAA7csL9Xv1Os"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.10.0-alpha-remote-fetch.59_1628791611823_0.928589460150427"},"_hasShrinkwrap":false},"1.12.0":{"name":"gatsby-plugin-image","version":"1.12.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^2.2.0","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.12.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.12.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"a87bfc3263e37ae711d626a0f6df657dafb88d0d","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.12.0","_nodeVersion":"14.17.3","_npmVersion":"lerna/3.22.1/node@v14.17.3+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-eypDaUsGbJ71XZ7j8eBA+rmErDEIR08+/A6ql0OY6xmX4ssjmIFQT4veOAzFxEbq/ee5DkNNkvgBVm8wKM1J4w==","shasum":"43b4eeab0673e4e52a359c0c45c040dc43710d9a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.12.0.tgz","fileCount":99,"unpackedSize":707242,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhHMvpCRA9TVsSAnZWagAAeL0P/jfwlFltPvvDWETh1w6f\nEEtK4Wp6oIjcp6Kmmmxn+DLAZ9OUVKHipkhyzJNt2sGjEpYQIjnBR0UAYvFA\nafJ77N3WwjYMVkKVCKZitR5MtXMOZE0r8qSJEEU+1xcJ7QKEcGhQ44Dzll9u\nRZyo/Igg8SdV8xYg5q9VjGbhl7xZfrZiFCtz9qz3RO/bG1uNtI9fNOJQYhOD\n+KLMaCaETm65/BY22hBItn+C1S2OvVCyQ1jCZMbgjADqnXnatloBKx/wCDCL\nfoSkJMT+ET94o8gsNSbBV6fRcIkGIewuCzpnXse+39V4NevvK3C+NJDkraH+\n+jdS3aD8ZX1Xu6mM4M6OmmhHjCDOFtNHdR7lHw5gti1YqGkquV4YkCWmgr2l\nRtPB6pyT+jIuOh25U1PzWEKKY/YXOPhQkrZxCGTYAQVqVvDYHMjiMi8hOgzc\n57zKFfTzI6/m0PcR7b3BpzZ74i7w5FPXPWwVbAZSyH68vugRFA6jFq3NELa8\nRj/uIas7WOymhFvxnm6Au9/Te9ufleR0g4mWY1k50CQLUyLpzHjK2s2u8o+B\nm/zVi1GD0JTrsrui2vmiacV7CQoBXH7wrHLgfrtnbhYcdzoBl/zk8T4DmoFx\nRvKQTKdqttz50aovxzsMF3rAHSfmgZCxtyeEX3iFvj/yg917j66S9os2ngx5\ndO+j\r\n=llcW\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIH2F+2mTmUdwWYz3KsAj2cqo6J0Lw6anqGUq0aenuR7FAiEA/wEerdwjAB2vTbDDhkXU+HfjmtibsPbVA1ox9508mDU="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.12.0_1629277161452_0.6969600598296901"},"_hasShrinkwrap":false},"2.0.0-alpha-9689ff.27":{"name":"gatsby-plugin-image","version":"2.0.0-alpha-9689ff.27","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-alpha-9689ff","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.0.0-alpha-9689ff.27+e37a439cea","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"3.0.0-alpha-9689ff.27+e37a439cea","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"e37a439ceaf011f19ad0d3678a91d06a2b05408e","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0-alpha-9689ff.27","_nodeVersion":"14.15.5","_npmVersion":"lerna/3.22.1/node@v14.15.5+x64 (win32)","dist":{"integrity":"sha512-0JhKnXdjld1xzZvmoQZ9ib3R0r8hjyfH+r4kgAzMp0R2pZ7uAN9/3YouFPpYfa81plj3jkIF9amMmOMyXAvaeg==","shasum":"d70a9b9947f035d96cb8e87c7be74d40a16f6c28","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0-alpha-9689ff.27.tgz","fileCount":99,"unpackedSize":707341,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhHQESCRA9TVsSAnZWagAAkG4P/iYeE8j/2i+JzA7NRbDL\nqO4WQ6rbSNfiZCUstIKZNt9FtmLpcVX//4mOyUnciYBEXx+yIZqfwstclDQr\nc8reihh0bHqHvBHhY3hCVQvsaMZBEGjpjJVb68CCAiiZwtUKlbkYzBjcEQkw\nxDfsgywM46C4zu1O3MnvmNgTQho3uAEkLA1iZmHcWIvbz2Ca/PLneNsK4RAD\nsgP8ehbSa1YKZFG1D17d7AbsbsgG0yis/clF0VNI1ZuZo6XrhHPLrtBFJm05\nTkgrxZF6+X7FgKYpp6UN4d2PcN0UY2iQ0EvWL35VlA8YPA04BN/PsAKFqClF\niFbfA8gWIRT5rQweGLoI9O4sOCZj7HN4J74xyCU/Vy7WH9J80vvhYwBORoTE\ncXo6d+RPSt109XCdvu/ElHk7rPkRCbQiEdF1v4tP+iOiJJoQbEdV60SkZmA9\nFuUwe7uUvmqfC6i8AKZgGZyQLfmxubWGis+GZ61iVOiphvsfaYFKVFiLPqOF\nnjI3efh9tylIrTJm6zV/cSFGZfdkWMlY57Q7IVJBFPK/vvMqf6YDaNFoym6U\nzQGShhUoxcEWGGOpp1VQFNMoZF2VZ1VpHPN/UDIFhZ4FiEG5NVsRHKip0tV9\nKQet0WFwUVncVh/V3zCCKjbmyXHICDNaOTnqlvznFT/MZis813kl1qCocK7k\neqs9\r\n=fbDM\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBi/pao6sl04jhVr6VGgRBcinD1jYjN1F5w0G2CmZNg/AiEA9gSU74+zcdIlk7znJTg0RPC1lZsmJcjdHuwU+C5G48o="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0-alpha-9689ff.27_1629290770289_0.794781597324673"},"_hasShrinkwrap":false},"1.13.0-next.1":{"name":"gatsby-plugin-image","version":"1.13.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.13.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.13.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"13415e4bd66c8dbc6bea6da8a8b62f62af673afd","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.13.0-next.1","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (linux)","dist":{"integrity":"sha512-lQRzZCm0njYWRKJX7XTW48YEIpTaRoomW1XiZYKOTHRO79h8V+Ayq3e9QJyuh6kLNhCgq8CorGfBsNMmvzH9fg==","shasum":"1fc54421d750744978bf61e86ee5a94a93270676","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.13.0-next.1.tgz","fileCount":99,"unpackedSize":704690,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhHmMyCRA9TVsSAnZWagAAGUAP+QHXXaV6et2gmU4j5Rx5\ngwtrHBaLauiWm5Yz8dUbrVt4jbwaw4qQk5bohWJXmjAML4aOeMb5v7tBnCuB\nzQhhBHRHrkNVFF95EA2MyY8D5LvHp7f+ORxcG0Ie4BF+Xtsw9sPRpVE6fxuf\nv90H3Eb0+Tk2UBUJmXSPJAzALzgZQG8mQgDGQBE4ae1ueBzoXyuk2BMLScUu\n6WKFHA+ug7hc8FPwoVWrDZ39UhdI1iFGHIpPYy8LKgoNOxHt7IUmE+5AmQF3\nmRlj4gX9tTczz3QDaLsQYiUHt6Z2hbMH5HSQiYfjPjZ09p/sKbCyhWoFCG7H\n1CiSD4Zp3IMFR5MTMDtHx03NT4FzPGGFFghB7kMR2kfa+jk4/9xM1VLmUBI9\nD9HrXw/Xq4/jTNHPGBbM71lCes6s0pICZTYuOJnKIAf08zFRbvuTq0pldE+U\n2fT9uuU9GYv/4pamE33OwNXRyaAYSgYUSrN8xYsMUiBweKzNdr6HmvCHX6Au\nWvgPtvccmYE2NAzqyGur7tQDA2Wii+RrvAFUvD8/q06lmedy7X2xc1vvd2AN\nd2HSDCh/qdWygQ36YDcbm84HxQ9LxHbBcD4W+rkA15r7O/EaEHO//h2QcXEc\nwVM8jsqTeVi449nSevHFHiurhgdc5fZbYO2xVKXdZ1kifXychrDFXH9qyW3G\nqim+\r\n=Sp5S\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC6+C2wtysc2B34mEZTb0wy5S2Qo6MNjJIHbMW27PjbwwIhANISYcbegWDh1bQrd+nZO7Yhv4vV++UCkpd2tvyYJQAN"}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.13.0-next.1_1629381425989_0.7760912774166668"},"_hasShrinkwrap":false},"1.12.0-coreutils.29":{"name":"gatsby-plugin-image","version":"1.12.0-coreutils.29","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"3.12.0-coreutils.29+8fa770da4b","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"2.12.0-coreutils.29+8fa770da4b","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"8fa770da4b04e9e74634d6620b976573ce157b81","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.12.0-coreutils.29","_nodeVersion":"14.17.4","_npmVersion":"lerna/3.22.1/node@v14.17.4+arm64 (darwin)","dist":{"integrity":"sha512-KooSfuGjTs/Mr/hLN6lzaep/EeQ1ZV5bgHliFdjv4BuYaQJVv8HJzNMvc+7XBtH+W+xsAGvQH0FK4lIoTqwtVQ==","shasum":"4d79a545a7508dcc7886aa4729ed7f51e400e7ae","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.12.0-coreutils.29.tgz","fileCount":99,"unpackedSize":704739,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhI6zECRA9TVsSAnZWagAA4gcP/RwABwlHYndjLqrhCKsz\noOeJVGRB/pr9xL63wm+EIEkSl9qvaPD97MEdAkeHETHHJ0xbxBVduLo7L4eh\nbHFa84EyUvjBkdKNKnx8jt0nyfNYGagvtSmYNssBaHp8MEFKyzId0yD0mkdb\n6UR3mfozeBcGsaBE91g+gNkoee2BuYIdAh6ujZgHzHOZpX30blJL/25LgiDP\n/AQbPo7i5saE41704Zg5mmk7K6VZpO7VYymPmDrVGzdUHUhh7VQCB30k2oKa\n53zCEQdGOx+iWlJU2ctIgah6gJlOoLokkfrE1IMdApvYARZEKYqB0mCx6YWI\n+2o0xa4MSeIDZsuJUeKeMj6z3Ee5mfHvIv7ZneXWRjlD0OyvhQJdcjjJ1kvm\n+Zh92342XrXVpIly+td1So2AyeJCy4hOa0AwlAyADUOIE7AvTtKL/5JqSeQP\nxORWz8s9Ml6kx0QPUH1h2t72Ho8jb2BtvmyQWjdMMNFzcnhHMQyLmibh5bYD\nCwuJTYFThNzOCkCLQfN1ePXgi4vhjRKpfdQ4O0wwcqY6aW2c75LMHxQIm/D0\ntJ800c53frK31cGCmFoyzLEp6XrYxpfvhpjNYw6MzxgAIisPrlrC8+3/u1es\naPD5iKeMXsqpKVAHzQ/G+rDJAjVQ+oRPi/Itbpuw+m5TH3j3voLjuRKb5LSb\ntEu3\r\n=ZROn\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDFtIr3AvWOx7OPiag5E/ZVkqA9RBCzkaW7oFkhJ2ZOwAiAx6Daq68un3GkF6QNe86ZHzErFyMG+TQaiEP0wlCtebA=="}]},"_npmUser":{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.12.0-coreutils.29_1629727940664_0.6843443302469039"},"_hasShrinkwrap":false},"1.11.0-alpha-qe-sm.67":{"name":"gatsby-plugin-image","version":"1.11.0-alpha-qe-sm.67","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"3.11.0-alpha-qe-sm.83+5b70425007","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"2.11.0-alpha-qe-sm.83+5b70425007","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"5b70425007ff77f5622e714982ebd6155c1a2e7c","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.11.0-alpha-qe-sm.67","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-ZSLgBO3KXTDZWDAL7vnDBrSq/QmGYCYov0/LrJLsbCG7M7bN4G+xbaRj+kAJ6sRo6sUGMYXC8I2YjJgtBbAyag==","shasum":"36cb0e869bdeb2af8eaa86917b708eb81c01abba","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.11.0-alpha-qe-sm.67.tgz","fileCount":99,"unpackedSize":704515,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhJQX3CRA9TVsSAnZWagAAQq4QAKIceL2iIDFNO+iphThe\nfvtNWe9i90BFHNpBaoWcz3kJTbRaSBcNWkNN1z75a6pnLJk4PUHicfFIW+Qk\nzph4Tj5UhobovJZA7YAnHwMFmfZn1y86N4a+QN6Cn6/3mWh5hYp0me/f28NK\n4XXCRPA1CKQN1ICnlwnwQ5Of+HxlN/TDhIAR79ss84US1RJIz532OkAGeW7s\nCSFRtaMRGfhhPYfp9d8/zX05sfeyzygAqP6h2OsYZiI6dmBoZp5rKIq1RnPL\n9I8Zqhq672GQ0k5plB3RyGzYBGyShpzWisZM8pMBVx83sNA+YpwjKK/c2PYD\nL0itVQlAgYNTvwif+OkzsrnOgKsNqywYEt/AdFHMxzemrbxvDc52/TsCGDGI\nVSXfdkJ8o+knDl2/e+VoXkStPTLMGqw4q4C0MPJLEabtIYvRp/H2xv437X1V\n/rrtU77lqaaC/eBxpEe+EYZE3YNP2b8LxRol7qIWnKP/WdPSRop8EuN+lEo5\nXVqBjHsmoEPX5MHIURfwTGV4RMvQZpnmgwElI6CgYPoGRRYvZpxhUTiYN5Bp\nj8YuNRXkG9VqNzr+Us63DA3xtzea6D0JxiTNV14M5ByQALaq95tT2jjyshza\n0Sds8UXRbtPWXipHF+v99vXbC67M2psiq6BLR2yWth/76ELOS+P5mduFn6gl\nRIIl\r\n=iRJq\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICSYUzTPT7CUkOq1cXdF+bpgUGMJ6MeeanRpr00z8/BiAiEA6y/PHtdPWkUqy6maBGDwWmsO/dn8LXVnLtsu0DEL640="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.11.0-alpha-qe-sm.67_1629816310934_0.5882331261624596"},"_hasShrinkwrap":false},"1.13.0-next.2":{"name":"gatsby-plugin-image","version":"1.13.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.13.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.13.0-next.1","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"7116ab5659edda69033cc9758e53b7de5b5e098d","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.13.0-next.2","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (linux)","dist":{"integrity":"sha512-BxNQKNv8YK83X1FNF8ItZxWPKHv481newTH5xVoMtJ0oMhqGbBADAXg32QAJwkWK1SXERUCSjbOqFWn3TSZwFA==","shasum":"ee74f1a6bd76a3ac8536bfa174026dab7a3a53e2","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.13.0-next.2.tgz","fileCount":99,"unpackedSize":704897,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhJgbzCRA9TVsSAnZWagAA3BYP/RE6dgNvw1CyPDQ7u+Vy\nRP/Tb67C03uNcoBgLGVpsoIRUbcIatAzl7Ga65pFy6vE8yTtEs8Z18AoMFKP\n6lrMzDu2Ze5d/aqMgTecfcREeMlXserP2Xi4mOd9pL/1gL6na2D9cQouj80b\n16Op1pctAONhoxZazzqP5toF2KUVgT0vXBoF+hpsyF/U+OtVj5owXlBti9AP\nZU7rujXgTHsz+k/B0strgx3uf5zyytNZCyLXMArZ/HxVIAT/OObIatO585E8\ngv7yy09x4dT0mTunpfzKIWzRdySQAUolcPXuSXVJb/xsPJyuERdlOtmnGpAQ\ndmdGgUepecFWSS6StxYl3IEzBEUwsLONsJWJ7/CU/jX0YElB3IbC+OEDtSok\nBuHLbdX+i/DtshLUnk48kQoMO4rcHbL8YOZ4smcFBYxVZcUhRLBs4YaWU7os\nuu355TOmwOftKMn7nqzBvDJxtIprwTe2LNK6CjIWRcK+BUbF5AImMd5wuFen\nsi/a9ir8ZDTb1iowAIhTfAbdRTvy33llEfRtj780SMMKgrRtHooVYWNPKUtG\nhmdLIctVBA3H910iVPrLLZrZftQbF2jEw5Q3PbVXitO9U1tFlFHgnE/G/hCU\nBhQMwk35E+Txk6LviVldEfk5Tn9TmQc/M6Z1oARdBwLZ65xvcCjKnTOGG//J\nZPU5\r\n=k/79\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHuU0KrWYOvVofCncy1adOvwoqhtQqul1uLvdJQx/KvEAiBVC2XWjg921YNEGpSZAB8kwzgPXEdJrvHx0E9sTrQSnA=="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.13.0-next.2_1629882098848_0.7503650601143774"},"_hasShrinkwrap":false},"1.11.0-alpha-qe-sm.69":{"name":"gatsby-plugin-image","version":"1.11.0-alpha-qe-sm.69","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"3.11.0-alpha-qe-sm.85+dd0e9dc519","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"2.11.0-alpha-qe-sm.85+dd0e9dc519","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"dd0e9dc519101c40835471f065b55f7a86d5e83e","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.11.0-alpha-qe-sm.69","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-3f+VRcoTx9Mi+3Gy0+9e5dxyTuXUdSG6QnDQMAY9K66rxui/eky3BM7LlmNG5zeBzDr+bWdLCL8bWh9aL8S3cQ==","shasum":"01dd0f95096f77ea401d6fcdd212eead103b5a98","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.11.0-alpha-qe-sm.69.tgz","fileCount":99,"unpackedSize":704515,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhJmtTCRA9TVsSAnZWagAAl9UP/2B+D+VnOWmSzlkyyaTw\nicyRy/zcEnftL/Wibiuv4PhrCYEGFY8Pvdqf0Od1KHPG5ZEyAep9lS2rueG9\nQJ7f8yrWK4xY0YMLhdx10xOc4sJwZATQR2Whr0ztD1N+i8uk+tgCR7j+uKlg\n/kmHqiBv9pC7BG6V3glthrt5ZSpkXKJi2eiDObjL3hQBbDSpGMPf7kbDnWhk\nZHD78y2Z2pe0wVbmOk6IdYd+HU710CHxxE5gt1ZeJdqm8ZKrm15KB/VnqMh1\nm1EQ5MqBPJF0OK/pkx9BfzJeDP1NNIvwMMwa7rUGJpdVwhW41zCkTupJQwgN\n6s4S4PEboPbvJKXkNmtX5M/ZxTMOfoU4WOWeSQZ3sL6y0wSqg3W/2qkMqyyt\nqk0V8LoWzMqqMTgSFMPQeet0NlpZiSFp918cD9XCEGnyfjFUg1INYNBX0di+\nrAo6k300TPnjpxZit0y+eQm1bZxtOh2wqJhfA4UAjA0Oy6ELnuGhlAc9ul6v\nEBkOctkMVeo9m0whxoeeQrOSA8Mp7nd7igEXLrJ214Og464wNqfNG3rZnCsW\neakhPYZelRc9ti8Qw/fKzZ32fBoQm++ISEQJwdFLEJG/BDFDs47CSdlZthwG\nM+v36VB6OXJt/sk8Hi2YRXsAsnQh3OTsEB9fwXT5EmB/WffY4S0vIXTBiNIs\n836F\r\n=M4c7\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCSPr+7xv56g4BTX5r49gASOozecrlk6jYftUCk61fFlQIhANVxEI19T0CmvDKtt5jqlo4abmVwymQy/nyGBmUIlBj5"}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.11.0-alpha-qe-sm.69_1629907795038_0.8765994583829397"},"_hasShrinkwrap":false},"1.11.0-alpha-qe-sm.70":{"name":"gatsby-plugin-image","version":"1.11.0-alpha-qe-sm.70","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"3.11.0-alpha-qe-sm.86+c62cdc8f15","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"2.11.0-alpha-qe-sm.86+c62cdc8f15","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"c62cdc8f15978718f3c4fe8dbdc251e0cf0e6b2c","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.11.0-alpha-qe-sm.70","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-xivgmP7zHiqxRGDQ/Xe3gVmSmAkoHpEVhC4CpnBhAqK5F5EskcvO4Yqr+mIH95Wo3c5tuFDLM1YaJc74xfj35Q==","shasum":"5860288076b9529732eedb2f9abe1b466ef45915","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.11.0-alpha-qe-sm.70.tgz","fileCount":99,"unpackedSize":704515,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhJ5feCRA9TVsSAnZWagAAtZ0P/jPsZyCCEAegt53WInFn\nxTJhloadEUYyswjfst9xGbf7VKPN/hRXKRY2EIBFrfnlIA+4D8BlXX8RTXwj\n4Qxh55rJ/5YNED8rqlNavaTJJusxmDvFu5ZclDFQFDXkqwDYW82l52q3152g\n6rKf/FHqDjIWIQ9fQdLdP2wCMsYoriNu/fHfIQqHGsWM1jsi9JfDupvVnfiN\nfSc3v7qklSyTKjLO3PmUdws4S8J+k6qpdfVhWcJFr0njDYU4L55XQI4QLwUU\nPX/kDJCjhE7yAr7KZsN/wGfGmGYad17RumWWffrxCYR3Kdh1QJGABLmPYBh+\ndKLEtu7LwD6b98aMBnqU6IFy5feDLJmJWT6J6GVjEU/vwlr4sMW8JhV5ro4d\nJ/hW3o6DyeeWbgVFUZ+Ff5O6MH3UekC5SE0B4CGoiKf0gtyUur87F70KKjRU\nzlUrQ8Uv30F+qf3LobKnLg2v3Dcbc1tZ9IDbePu5b4A44tV8mFBBhIZQ1ZR1\nGFp9WW7U3RwNwIW4DSFgFvCO7mc0FxqmdRZKshElsTa6/+5LyCSTbfJb6TTP\n3xuJLCUVFP0EWUlDkQDFdWU8gpiEt00iSF1R0Pdur6C785AESuc/00FcJReS\niBgbUJ7fmZjQH81KKKwQo+0CjethKLMwGqQyNhsNh/k+RxZ2om7lUoSNTvKP\nmdgx\r\n=T6sz\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC7hl0GWVLX2147BuupTuIVfm8hCSSBEjUPxu22wwMRdQIgAtaqz+WlX9a6cTehKrd9bVdDImSYwfW7z2qVVCOA5dY="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.11.0-alpha-qe-sm.70_1629984734531_0.8680764714074718"},"_hasShrinkwrap":false},"1.13.0-next.3":{"name":"gatsby-plugin-image","version":"1.13.0-next.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.13.0-next.2","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.13.0-next.2","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"944e3817befb64b3c7863fa990af983337d88d0e","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.13.0-next.3","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-pgv4X4HL4wAenU9gvBEbDO1GjtrMdVfLMv+gVzc/dVcfxeLFtA2sXska+0F3FWhgDC7mxBffU7C+sdXYqdzSug==","shasum":"84fb3b3c82ec206628983e0c20e8405cab50f643","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.13.0-next.3.tgz","fileCount":99,"unpackedSize":719130,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhKKcFCRA9TVsSAnZWagAAl3YP/iuDG3Mb3zgECWJg6Byw\nXKRMN8DyRedEhm8JHj5bnVYdvNzB2EAKSBXS7ZU1xIh9Zh6s+mdoetCGlbzG\n+rXUk+sTsnc9plo7vLPONK3AQSJp1ZdiatSj3VP6FzjZk+J8fuFdtvmpKsO4\nfQf/pS7A5Q9zzg2AnQzwQiiy/uia9bQSdE1UZj8AKWDf3oEUvOfIBmnWWju6\nxBYZFVpEyyQObERfCFJdruQgIv9ZdaiLc0GJvDg0RFVIg9fL6Ke7f3zu4mzv\nfclsM92bHfZnQIL3yTmn+xoXPkbdlKyznwyQF6zPkmlLGdR0JXA0EZe63Mt3\nQEhh5bd+5KgzcfhISXS7yOFdCDTfJEMw6qh84x12niQ7lKIoZkwO7WRRkN70\nPVsPdqNlxjkvWYgitRAntY4gTeJXuNYvwV68B83fXnftOCWaFr4fGudknyQ6\nCPi4WUCFTg3eOgOR7XR5CGIt0SQuM3DhOm/MysS8X/FzhsXekovwr4nVr5sC\nSnICHbdmiMOGum+fwTMm96QjbnLYGySM1A51TfmlExY/kknsaukvUEy1i+0U\nd9Su3aqgaQzemK3QFeKIzAtIRAbuhqlEp3LbEPBARGjRu2I48txLHU36TUaR\nHXmJDyjeMNa6m3aZufQDmsqz0Hfsi4Xj2aJ6WuFWBU2a5ywMx+EJncuezyDu\nWMir\r\n=UeCw\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCTnTYR104ZkK15JXgftIZuGPCWhKC1avU/S0uH5n1QfQIhAIjBskCsXtw9nA1ndJY+pW3nQloHmeFHAoZ55poqcGj3"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.13.0-next.3_1630054149679_0.1618877889054935"},"_hasShrinkwrap":false},"1.14.0-next.0":{"name":"gatsby-plugin-image","version":"1.14.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.14.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.14.0-next.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"d7d08508d3eb88eff87867fc7121c617cd02ce8e","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.14.0-next.0","_nodeVersion":"14.17.3","_npmVersion":"lerna/3.22.1/node@v14.17.3+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-ZnTR1kSAejdvw2qDm/LNUar1eORV8GDp615eIzSRGXRWnQLXSiENgJqsAOjAess/yjK103dP5aJMM67tuU5xJw==","shasum":"8ea58a2585c4b1f60a11b9998aae30ced037bc95","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.14.0-next.0.tgz","fileCount":99,"unpackedSize":719128,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhKLxPCRA9TVsSAnZWagAABJMP+wapt6iclRb3gu9Uzgvn\n6JkiUuYD09hM7W+OzmruW9Gv4nQKJ4pX6KEDAo8IB2PYB4yWIj9uFkRArOES\nb+4H8GQ+l0Z7qyZgPymTkvPGlBGWoUrWINIA/PgeMJk1p3Zv/jb55rQ9bK+I\nTx8bfi2LmJs06ROSgnD8SHQZTtp1nOQ/fMxx6LEFlhlbrvKDHYZ809kZLVqr\nXUu9LehPN35R1vT5Xs7MVN2NkxUHrOkig/OXs453kqZRHRidQ79YNYqlAE2M\nz+HuCqwOv4w9yMXtMkIKzdFXwFHluLGji839F88vDUY/tMFmviQp4LBcX+J3\nwVCRpf3ZXMva3VzGnnweY8CqvTok4ovYViriuaf/2y+nISOo02M3KQ9jfT8u\n8Q5UnP1KhVv56GAltU73htPCeXJVV74mcwJ520ujc6m6Ft3OeCitycs4Jxeu\ncQaYdaDHnaTpeys7rBcPPcPBTMkRfrOwRh5hNt5tDq8VA0Q6P39u0SxpuCbA\nc3e8wt3BHYW+YoZqfg0jo+3B4w4wtTbwOiEERSdZqIL4jJCprEeRaFBogZi/\nNbSj12/DStwjGedONqpzY7EASBFgjIjfZWR3Mb+P8swM1z+H6lGfCFfmjTe7\nnMpnPAj7bAqBc6mgOlUPXIVNkHnc6QrDWGUo+DjT0bGxevq7M+4Qkmareisg\nQumz\r\n=EazD\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCID+wj0DhIbn87dVJQrK3FYKBpIhGalCM6lhd8grrMwFhAiEA/SsLV5PKbJ4CjgDMiCvGW9oEY3iN8mFT64zd0g/K+F8="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.14.0-next.0_1630059599681_0.6322380116880082"},"_hasShrinkwrap":false},"2.0.0-alpha-9689ff.5":{"name":"gatsby-plugin-image","version":"2.0.0-alpha-9689ff.5","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-alpha-9689ff","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.0.0-alpha-9689ff.5+cf4d725430","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"3.0.0-alpha-9689ff.5+cf4d725430","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"cf4d725430bb62630a91336af090c1dd2c40984d","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0-alpha-9689ff.5","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-JxkTufKRz2x84gb4QHrw3RdIS5A1s4iepKNM91gteP5mT1NyZHPODo0zrabrvDm05qOGT9raXS0DgasTawGy0g==","shasum":"b05d0c8501891686cade4483490f4565e7d0ab6d","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0-alpha-9689ff.5.tgz","fileCount":99,"unpackedSize":719188,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhLKULCRA9TVsSAnZWagAA+XAP/2rkaPQHBy7gI/MsnMWl\nbPH6sziBXLOuSfo/ho7qHJSJ0xzWNuqLfNuBD4Y0zPfDXjx3Rqpeuj/AqMz1\nZO3wtHMc60plySz9AXXI2k472rZHRhHv73zGut/gexWTempMrJYUgibnLdty\nwfit/Yf5O75QpKspmCMC2VNZAiuyPBftVFbvOIl10GuEv5XK4rgKFkN5Lc7a\nGjEfr41VuVgbjHXHbqj0XqeynQAl9/9Tl0ekM0HIph3vVF+V/3aZhSjiMK3R\nZOYLOB/4KgBL/ogx5yK9JDD3UECArjdPl/X+sJFQcM11Qy2p81L5v1exILtN\n4MMUuthIPjjk+h1Iy8LGS8moxHQxlOtSkTidL3/gF+7HjvawKPCZsgcuP0Lv\nhj7615C1mxKKzobT437YAYY96TvO51ym+7ci9SoiENve4PlUcJnROMlI4CNd\nWXHESWWOSyclaouEPFW6d4XjXKHZBM6dIDej1bD7d+YemgGTiTrLu0admIPH\nGJSgIHV6UJgr+KKelqbgHBVimfTAU6wSCDp9g4ZpQB79pEYyA9CaO/aBP9NP\nTDuDQfCVNEVtpkaNzmHKPXi9WsypRLBmMteo82PNs10XTlfsVxsb+wXA/RJx\nd0sT129ZdYDSy5VSdUM3NyQOnKiGwZo7b0M5vrnuXdYammugrc5yFa6Tt++n\nUJO1\r\n=Tu/F\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQChBstlXJ+ElB3oc8/Jgy0qv0v3XMsGwxwTcoREUYg8LAIhAPka9k++fAPwIrqKgeCsYWiF8Rnb0kNMwe3f3M+K9I02"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0-alpha-9689ff.5_1630315787543_0.9579834678394898"},"_hasShrinkwrap":false},"1.13.0":{"name":"gatsby-plugin-image","version":"1.13.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^8.1.2","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.13.0","camelcase":"^5.3.1","chokidar":"^3.5.1","common-tags":"^1.8.0","fs-extra":"^8.1.0","gatsby-core-utils":"^2.13.0","objectFitPolyfill":"^2.3.0","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"0a455df964ce0ee46fda1c053617d5adf22a34da","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.13.0","_nodeVersion":"14.17.3","_npmVersion":"lerna/3.22.1/node@v14.17.3+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-ZJcModngwC+2r/mQRz03kWpEpeA4OfgJeyCKC3wBjx3dr8n5fpYRmhnX21U6Wh9QyjdVh0sHykmYEgs2vrPa1A==","shasum":"d4ed6a5ee1067e90a6225b48e5ab0653345e6edd","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.13.0.tgz","fileCount":99,"unpackedSize":719107,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhLnHaCRA9TVsSAnZWagAA1s4P/1wgcAp5FbRJBl7a42YJ\nxhLCKY/rvhBy9OCzmg7KtSxRKrI73TtB4rgxhMvf8R3pnEoJEAzrH4GhreyD\nuGwvdCR7RWaE294wbVwiqZPgfiBUO7n66twjVOUi4S4IxRsmCpJZRtNs5sVg\neV6kbvNvHh3Ua7gJ80en0hnPBDZarOIjxqmbb4TJEd70DPF5ACy2mFTJxMAf\no9a9hdNmr+uJAyFdZIQqICwtE//VjjzhtasL67JXsTr1jTKOX5aAnzC9oWVw\nlpppnXSLtmm8Z3f+mGl1+JRfJVgYn0Ym+NkRAKA8TdCmyqGAemFGBlNB8EYU\nLq3b35Fbs46l/BJRQGy1T+FlSJZ8TTWvEE/p4XIMxRsN1X71Suct66xIRBGx\nYJmGDRXall7AgFFqejVi+q7fbUsoUQykShB92gWnE7TMTwdwuC6d7TLcOTls\nGf0B/w/1j+he2uHQmSET5mH4MH4oyfkpCfLGfVPaGuxi1mgDUhwfXylR/7xH\nGheRhmOoVU1NOd2BhyDA/eM4TsNaNprujPqfoofyiKatLgYyz31Np85lLO2n\n7UlIYJxqDNGlLZojCAwvUFM4WWXQJRnnHhbvZ7+0L6whDrIUFov7icdCMAsG\nLQX6hwq1S/mlifjVB5qIaYJtSNERz9qsLrZeR7ozI8C/KJ6T/RZjM5AvVTHO\nkCPZ\r\n=dNnB\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCvFytF35x7vHC97gDmG9/nvaVk7EYDcvGTDIH95yMfKgIhANEBsBnoz2AGxcqrq2xMPLVpigHqzCkPOxC/so1v41ca"}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.13.0_1630433754683_0.39612550631856425"},"_hasShrinkwrap":false},"1.11.0-alpha-qe-sm.92":{"name":"gatsby-plugin-image","version":"1.11.0-alpha-qe-sm.92","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/runtime":"^7.14.8","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"3.11.0-alpha-qe-sm.108+5fd1d58d3d","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"2.11.0-alpha-qe-sm.108+5fd1d58d3d","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"5fd1d58d3da17a5e9b21417454aba4227d0f5223","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.11.0-alpha-qe-sm.92","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-e8vTnbYZe7tCGdO1H7ADW2t5rqmWV88VpEiY8fJznDYFJXa+qXPZrMp9h5i26KFFPdkXswvzidFypf7H7AlH6A==","shasum":"24162d60d9647dd06a94eb3329a950e0e33c241d","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.11.0-alpha-qe-sm.92.tgz","fileCount":99,"unpackedSize":717340,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhMMQuCRA9TVsSAnZWagAAAsQQAJd4vI1lu+1QC/dAPKCB\n7Cb9QPoXrUMAJWWsRRcttBMU04kCGPpPV6xeJhD4/vHby6qin3W5uGEAfHvC\nvCtGmAS3Zr/O3jEr4ZPKzo/W/D0VWo7Q0o/v0LK0Oj1JbKsVSzWQ9HAJmXlT\nceitwIxyEhXMbUv/JNNGEiPv0el9QwX5+gJ6K96rpZZzh+aPOXtLn6EO7moi\ne0mcxvfOr/HLzi85lhKG8RdymOWACH026lPfUdAUZEI7F0hkVwWBHvXMc5JF\n6Ry2FOgkX0Ar99JLSfU/9vgCuuuEyIhAFdAWUxuAaf/FdgDiC/q+NAk8rHwa\nx1sO8gbh9BHf4JMij/QU+GtnYNaS+SYygotuvqb5gozc9gKBgAOr55BYI2ib\nLB/E86qbAmhO2TIiMARsswCTKZFx7AqZRM1LLsLVTf1NG/RuXyaVf0y+Br8T\nJTABD7gEQB/O2unvcvvzZTo5svUS7NYDB+kr7TUY7CfKox0jqunTA48i10Vd\ngWqBKCrp5/sxA+uwAdKKPZtgEj7ULD9MxhvCegylDijGbfDxgjHffg5qs+g8\nSBTrUicWMKcYABcHATOFcAKVa7BRHrH7veUbHvk+YeTvCbxdmuZh2Lobgded\ndGtYqK9kRAl8ZGKr0LSLpZJlKfL0/tLkvotbddoChWkl90NCkHWBVhJY+CYN\n/HLQ\r\n=sKqC\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIF9vKmNSP0IZs6mNWwMoNONUKsOXDI1ZNj+JBLdJbjJxAiEA6/itMtzsjlTpMnb3HdjRwFOBMN5crMHLLmom4lwnark="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.11.0-alpha-qe-sm.92_1630585902631_0.519570287354413"},"_hasShrinkwrap":false},"1.14.0-alpha-remote-fetch.78":{"name":"gatsby-plugin-image","version":"1.14.0-alpha-remote-fetch.78","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/runtime":"^7.14.8","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"3.14.0-alpha-remote-fetch.78+2d319b1fde","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"2.14.0-alpha-remote-fetch.78+2d319b1fde","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"2d319b1fde3b6a161afd8fee669542c94c9fad6a","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.14.0-alpha-remote-fetch.78","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-hsxQxpPwHDvQzKMVCLbqlpms1rrwa0g4WjZ2zpmhYpwwrmPBeNUq+f1o8CnqjXs8rjYh5znM5YGGCkdwMiak4g==","shasum":"8ff0875b005e3af1b58c63e0a8b14a06b05c9b93","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.14.0-alpha-remote-fetch.78.tgz","fileCount":99,"unpackedSize":720387,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhMPKECRA9TVsSAnZWagAAoPAP/j2JkhlKvsqG8Am4tuU4\nRNj35k9n7VehJU7L8SQHCWxIOuSFoRxw40jGEbFIDZBQ/ti1Li9MKT42JAWi\nHRJrQytD62kBj8mVfvxpsYP5MgcpNWgNDUg0pG+W6dt+yS6seRO68IFJhGuJ\n/E/41dUMDFnWSQE2WUG1YLWkz9hSfUuWDVCGrr6fcWHBJi/LGvGGFtd9hh/D\nYidFAJmxZmcKhCrNesKwB4Eii4knzMzw1FzNpxZkap85YyZJdGUlI6brGI6N\nYucqpl61oufl+JNoMrd23Uxfi/R2wAoVyL8QgVaN97sO15Bl7K1CDJjMD5Hn\n1mchPJz1JL7dSIFgL1krnpjtGM42S8M95rsZQDfMhVehxVqV9gU0+IgfJmkm\n/LVVphLO7/fiIKQtNNB5lpxxLzDU5vAt3Me0jrNWsT2lz5NkmInJP+Ahky8a\n0eHvxt1aLAXNR5tNhhrcmqwuegGuH7zYhoVy+X5QNTXekKEOGuVc+Rgnz+RK\n9OmJe2Ew3etbSHMzZEC0Dku3qAohqrAI+kHpCNfGMOpfHr5uLpj9O8hat+4v\nZGS/yBvWs4VoeOX3t7Sl+BJFROOjWV1a4RxITxGSPUVj2fBlhStPzdH0vR7k\nYyVOhIjbyDxI/hCBCZZ8slIjtoQxucVqcr39ud1H5o1zJLxq5kRTXhjXoOGt\njp70\r\n=7ndX\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCDoPp3sQ+CPyc3Vjc70AzLWEjOjDMmaP0qIjZwiVbBMAIhALSqXix6mBegqdtdwIVRp8wONfF6Ojsfw/giaY3DBEcf"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.14.0-alpha-remote-fetch.78_1630597764505_0.10893631108588608"},"_hasShrinkwrap":false},"1.14.0-next.1":{"name":"gatsby-plugin-image","version":"1.14.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/runtime":"^7.14.8","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.14.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^2.14.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"f8f1666f92787104bd1c248deb1ee3357ab9a653","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.14.0-next.1","_nodeVersion":"16.0.0","_npmVersion":"lerna/3.22.1/node@v16.0.0+x64 (darwin)","dist":{"integrity":"sha512-bla5Qg5gW+N5bY/YEH6UcRSWDENi0ZxG740ZwkbWKfX2MqmUUnuh3e8eAFBJUlinCzEtkFXixQJj0cJGYfDP8Q==","shasum":"eccd1a1bc4acfd9f28798cb693280b0ffaf5f868","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.14.0-next.1.tgz","fileCount":99,"unpackedSize":717281,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhMQXCCRA9TVsSAnZWagAAIygP/1KPCJQcWbz6+wZNDS7U\nMN+J5gMMTVbY5RP16apv3DmJ0PTVi7MGjqgO7FGVUnpnTjCAes+iIKpcU1I2\naG3M8mQRJbHnBPNiv2MdyMIHQe+LXxTT9/PQWkUchq//nF1wOBeMNRQoE8py\n4+dtf3s/dfxiShG4VfmcDctRhPjOAMUSq9UMLW6eLcVFrgUNcYqsppQr5Fhv\nhOn6nlRcKiqySg0+3qbh8kj09e2KcScpKScFLRg0ZJh/nAk1KQtslxPgqZMq\nrzTa/Jk1LTTBYXJKcHkuwIErLOLX7BiXoxHdpOkriQfFR1mytryiYtkX7An0\n9QjACUcKMmBNNArrJRJI0E4ppAYMCk1PSEXqYkbEOpR1sOAw+YUDirN4snAI\ngNb75ATvxu+b9U/F5oehgPcZo2cD1rXiZn11oSnDeN+XBG4QagQVwb7Io7H3\nkdSXPj577wCpWg52H7lQCMJ0Rh1AdgxQiokqdOXSZDYw+TCP33GrYENJP7sR\n/4KBb/bbiKA5Ei2QprcztFiuGfWqAO23LSx3W3vYQi544uwTMmUabSKn4HDu\ng94wtROO2AqWgstFkPrxRoXlW5vGME62U+Mh/uENcK6XKZEnoKwkClTKm+8I\nYz5BBsnV2JmXv2SSKJOR4LX2V/bRpSa4z6gHpsvVHEQFUP0PEfovQ8nZLtK1\nJ0sR\r\n=Bmi9\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDzgnL2olDHCrnP14rgHdlv/YE+TrPtHiJBwZu0lMqwuwIgVx5KmiMgpOny+iKxfFAx/a1IEWHnicWbSd7DvSPSqGI="}]},"_npmUser":{"name":"kylemathews","email":"mathews.kyle@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.14.0-next.1_1630602690298_0.6549998407147068"},"_hasShrinkwrap":false},"1.14.0-alpha-remote-fetch.79":{"name":"gatsby-plugin-image","version":"1.14.0-alpha-remote-fetch.79","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.14.8","@babel/core":"^7.14.8","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.14.9","@babel/runtime":"^7.14.8","@babel/traverse":"^7.14.9","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"3.14.0-alpha-remote-fetch.79+dc2c74acd7","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"2.14.0-alpha-remote-fetch.79+dc2c74acd7","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"dc2c74acd7166438e8c5773de38eeeeaa5b4994e","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.14.0-alpha-remote-fetch.79","_nodeVersion":"12.18.3","_npmVersion":"lerna/3.22.1/node@v12.18.3+x64 (win32)","dist":{"integrity":"sha512-YgqmuslPZl30jSuLzo3IkTKE68WGUsCnFp/PVeBS/P7sHwOABbswb9Y5T4sS2aU++068/DxiHRKYlMRuorogcw==","shasum":"e32b702cd228dcefc23bc39d86160b9b056530ec","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.14.0-alpha-remote-fetch.79.tgz","fileCount":99,"unpackedSize":720387,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhMg6bCRA9TVsSAnZWagAAG+EP/RwUrO4+9qk2SXoCdQPB\n35PqlQigbgregwoMX3n1b2vXxTDk5OK0csqhdwZDVZcgURZCcugi2ZnpOHRm\nZaWofxL1VCjMyEpkA9oNW4c/BQiwtjLBSHQ/+6iu3le00splP8/R5dBmm8PG\nwrzuN4tBJ240Q5vgNQyqtahHLBKkkJK6n/FEe5xjOW0UnWZhZPQziI3RVsko\njYDH+9KXcNTSv+bydQmgC2lSj3+n5Ztf9nEiVvRf9xg0LIDjAFGv0mdKTzdf\n2PAzAK5fq6njuG8FoDWefV7ll8OL5nSa7l7Qya9jxSu35xx56JjxRXfI4EnU\neJZ2tX3zVoPopYGIY4SrvWLLd4kmZ54I4Sm973EEU0Bbdew8GUe+A1/Ny6eX\nHjLMHqCJBQfIV/GRuq/a67Xu2Jla06ZC9JjXFvNkzV7K9D/YYQoRsoaQY+Vi\nExmy7j29ffg5hbIbve0sJbOFEoj1L7QtkpoIzJfMakueDb+sCzhUAvFVAUDT\n3l42yeKd8OAfwT6be9f5WwBFht6UIODiPgFFCthotnwCQggy816GzfuZzSha\n69elZwmdcrXmXWcIGkskcVP8sF1SM2cUiJ4bee4yjLt1zgNsD+Rk/kVdvmZD\nT4w/ZyLMdhAgOfbxKorEJl7S4N0NuMKn/7KGanWhStUCw461QjuHR+2EgVsc\ny+qF\r\n=uwOS\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDIcDHxoQ/2z6bF6MZSyeKXuHMaHvyA95fqiP4OtobgVAIgDFFQ5lx7r6dulAgCfxTTBIMZZYc7QkbRHV+78StrSF8="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.14.0-alpha-remote-fetch.79_1630670491365_0.4181078873322168"},"_hasShrinkwrap":false},"1.14.0-next.2":{"name":"gatsby-plugin-image","version":"1.14.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.14.0-next.2","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^2.14.0-next.2","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"9e09fb39ddf929bb8751e59bd65de9f98a85dfea","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.14.0-next.2","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (linux)","dist":{"integrity":"sha512-x1lvKJTDh12Y28AcMpp/2UbpTsZiJsLbqVA4c5fI6mUbj21E0YeZ+rOmE4ox1Nr3/ltVdrd1hU0Kf27zKxyn6A==","shasum":"1326ecbe126e8fe72050100a7cdd4145adffd4c2","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.14.0-next.2.tgz","fileCount":99,"unpackedSize":717513,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhN28PCRA9TVsSAnZWagAAk9wP/iPzInSVpMEWCj1sZBzs\norl/jEXqskcK/Gr2Rxk+spt6AzZnzrNjqcB0Oa9oL4tnEIQjx1ZYD6cys9df\niKDk0XHwBtAa4iFvDHhbbjm9U5ObnNTAmo3cOhHAPeteRmiY0UtZFOQZYXDx\nG3WKoKBGHHFA7XXFSA4NcRVY1gWmRXx1TOh7uqlm4HXfuDvnW04UJnPKCE7r\nGlkW3W395JA3a7EkDsoCYn/6dnIGueamNb6hoGNxu7iPNejwcQxxdxmJUwqB\nqJv2e3BwzJbeW/XK0/fCDvF2h9/VmkcNciVWfMnFqCMtAQWAP41HPJtCWXFB\nUkQM5a3YrIWT6LgoS7RmHRZQs4KG4pu4La7Iu4s+lP3HHIIGRzjo6wzOKCAc\nq91Ny57d0vKxHT57dpBlq6YGCeDoxCGhTY4hJTrO9gpCFsCaYI9QYU9aYtlb\nLLOL6J8REq6U7U3Yd175G5wTZye+BHINsbs0jFg8FSiLpGX0+FjANGdRWpbT\nx2ThNtj0mrkP03k4vSZ37i2/A32UAtkqnV0vy+8PtqTmB+C7gzioyvrE2aXz\n5NRRU8wjY/98S+s819iUaT5viJ3Ym8mHW0hCXBQyKs1YnajoGVQ5fAluF4QK\nwsL/i9IlIU98KVjB3SVpv44pnCxI6CgK/lY50BTMHhPFsIYFz4WFpdoJ7gN3\nIf39\r\n=Irm2\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHZVqJ2ehIlIR2RFzN5VHTL5lT09qhkXSXJqVzNYwC2gAiAiZC4aX/BV5sDHBUNCRY+/c3GiY6Vi+gFDturVdjo/2w=="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.14.0-next.2_1631022863241_0.9397753197280074"},"_hasShrinkwrap":false},"2.0.0-alpha-9689ff.8":{"name":"gatsby-plugin-image","version":"2.0.0-alpha-9689ff.8","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-alpha-9689ff","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.0.0-alpha-9689ff.8+d8175eaf95","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"3.0.0-alpha-9689ff.8+d8175eaf95","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"d8175eaf95b5be567f9c8a9453e955e82edff1b1","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0-alpha-9689ff.8","_nodeVersion":"14.16.1","_npmVersion":"lerna/3.22.1/node@v14.16.1+x64 (linux)","dist":{"integrity":"sha512-EjK7sfaM2WOFXbDmv9AhUfk9KuliJ/AKkDJMF1fP2Tr21LY27vn+MCws8C6mq9/bepMkaJfsFit2fkPCadfJVQ==","shasum":"7625d79081688c05527397c06207621aa00a7c16","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0-alpha-9689ff.8.tgz","fileCount":99,"unpackedSize":717571,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhOJNkCRA9TVsSAnZWagAA6V4P/R7Bo4imOj/4inj8EL4l\nF6IC2njBnG5IGaZQIJ3tlQnLwt3cMwvATxDLEdUQYRMUZ5D6zwhRhOc70QvM\nooB5tL+5/FPI+Tg4xobz8lJr2kIm6L5q1oF67XsKGiArhysLxhIVUUyQp0Bz\nJbfOerE+Xf/xaLUGjDz1CRfYi6nL+tWOtabWWWYddOnE5DQJF3KiUMOM+WNp\nUl+vanArKSsjDKg5ZCF4NDm06iQubtIwQm1uIXCG6+ea+VSZ7pD04gTHhA7T\nPKjWj+oOsUzarARHw4yarXVof5BCOgD3/XmhHqMOJ94KO6DmaHdacVxJCciE\nEjny6CQoP66xPLwdKfWcEAZJlqd28KEmmgkKDWoGf0l/nW4+kuOedPiftmTo\noDlvzyA34xcUamGxLn83/028ZbJT1lGeipQjtgJNzvOKiRWlQcehKSKWU0KL\nNc5ZVB41e1hE8IruX/yxe0Hhfas7tHMhERbhr1wO4KRHT+olb4ch4MsXdNjr\nMu41uWoMSAbndCEiaE6C+3cO1helgm390yYmKwRnwEZxPghkIteDEUOxMFAY\nMes6zIUrDWIWfCX/FIxl6XW0B1ul50QCFRKqETlYOLHrjz6s2tFdPalR8w3e\nTxcyu4VBUdVFTXvAm966NImAB7f5uf9FsN4tRT/6J6C1u2Td2ZxXm55a8EHf\nlpwX\r\n=uN52\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCMxX0hfTk8+9f4wjyKZ5kOpJzTzHlJ7bv4S6d0VDCM4QIhAM129X7lmC11nSnV3+PsqU6vxZ5iZ8XmFfWnM691VfgZ"}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0-alpha-9689ff.8_1631097699953_0.6844459012333193"},"_hasShrinkwrap":false},"1.14.0-next.4":{"name":"gatsby-plugin-image","version":"1.14.0-next.4","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.14.0-next.4","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^2.14.0-next.2","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"32eb09da2e5eb3ba1b7491859ced493645607554","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.14.0-next.4","_nodeVersion":"16.0.0","_npmVersion":"lerna/3.22.1/node@v16.0.0+x64 (darwin)","dist":{"integrity":"sha512-Ch1I/bTJBcyFV/jgNIveNTuBVrh5pF0Rd2X/kkJpYrAmpj5oRoZwEfuW+efdeCsYsZwDiQehsMbSEpuuOmqk0A==","shasum":"dc19577af615ab9c020750bc0ae03303fd9adf90","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.14.0-next.4.tgz","fileCount":99,"unpackedSize":717281,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhON5RCRA9TVsSAnZWagAAnkoP/2/EF+r3zFAyn+nEeN83\nwTtaldhFzLUtKaAOnN5+J2Um4H05fQSZ1ObSkoz9PQ9/o/vd6+vLslCUz2M2\nZXUmEH7RMbFkWwg7+Tm+2S1jjKDf/6cO8Sbpw6owZwdxwBkxrFnRonFEzivA\n7IJ7dX8TjVKC6WlB5zNStoiMyadq5C1NduIOh+fmMe1b7ZUnBiokR02uxBWu\nZfQh5NMLz+ISAS2l11mKVzEcaIZJzjkMgpKfGVN8B98WzhuUqAGZIabv/bgl\nnc9WkEF+7jh9mq0WxuNklNZRwQ3x8ICVeArJE2lYNBAGOvAuKlgCMGuIj7mx\nH4eBp2CsoRA8KyWviLPZN8NDlXu+aa3IUgv0bZSGWiIjcRsVlsZAMK98IBuj\n5M3E4VMrcdpEpZE9oypKj8axLsMWsWx5XS6pY9qaZxsDihI7EgcnWnghXFPn\n/8HzBpzohJnRAH1DOIXBtiwJ98XgXsIMD/1MYnkJrBzsKOfH5toU8bPfQ5/e\nRtRJtf60mpOcDDmLeKzXb6sps50Ccz66Q2wbzkhhgkjTQyXnFh4JAQZgg2eW\nY0WQ4fHb77jF+pZYld6dPzudtysU2KAM6bF4SmrFIZdDcoYcbLxdmMR3LTTM\nhdXfQ+1M5X4fFKzux+cod7siwbb/PeFf9GytnLo831BJHRgrvSeXDwSU5qeW\nsDOM\r\n=y4HF\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIB0Xt/LwKipfaxCxQa5SNK/tXy2zbwqtLTbjSSFjyNw7AiAEeXg8O2XyeMQGEqFDUhKBuH/ztau6/nlcjnfdYrMQDA=="}]},"_npmUser":{"name":"kylemathews","email":"mathews.kyle@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.14.0-next.4_1631116881252_0.9045007370202378"},"_hasShrinkwrap":false},"2.0.0-alpha-9689ff.4":{"name":"gatsby-plugin-image","version":"2.0.0-alpha-9689ff.4","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-alpha-9689ff","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.0.0-alpha-9689ff.4+c61e52869a","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"3.0.0-alpha-9689ff.17+c61e52869a","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"c61e52869a35abcb739dd53004585e553e8a2302","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0-alpha-9689ff.4","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-5sC045zrmIWx1tZjFyH56uOJmGGGh4LhbyohycFvks3GPhcK1kmjrB2gqCVo3rwjj/bC/R/syluPeeN6l5JWCA==","shasum":"f487670491ff050e94f8830cda9fe52cf25f5640","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0-alpha-9689ff.4.tgz","fileCount":99,"unpackedSize":720370,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhOQ09CRA9TVsSAnZWagAA/kMP/jDfg92ataARr6Fuv0WF\ncV3drNQrfMbPZl3pFGOw4FLbslgj89ji6yuJ2I1U51pJw36KgrGOdAUN6qod\n0wc61I13n4abCs1vR+A+V5iQ5yaEYw1yFBukbVTA3Ql/pKGGIrXK4FQB8Rka\niuD0rsvEFU9yA26nENpQea54tJg4Hx7m1GPKfujjiw/sFzLlpKtjx90cikfM\ngVbJRB2Hh/bxXOlLg/ixuOsuAbqLtE33WqheWZ2v9L0Q6jOMK6X5TwIJIMkK\nMwfYhFintKBRryka3LdBbNTVX9Zh8i5hCdLtcbOkkawLdkDtuxOXaDzVYzCB\ne5xQj7hvzZiEwrxGvIVRLSF7JoE39n8XIOZX7hRPKiyPEfd1Od94oWmHJvaw\nYLNMKgTXXhiBcrCIkuv2DGYHyhU/0OEfy9A5zkY11HD2/rq2DQcdZqIWzvBB\nWmWgttoX72MwYi+jjmFZRs3bjKsR+ADaftViRLrMTkJgd4CveuHh6NdyyVc4\nnKCMBkNHdrsNKYe2mIlyGf6oMw95Bq3WwDZSapw9m0HO4NHM+TBAcZNXbpBj\n0Sjoc71AGMCy1Zu/ZrBsZa0chfAMv/rL8GIf9b76Uw6t+XcNBcObmpfVRpvq\nTZxZAcPD3X0L3a2x2NotEm3f+opsgNa4KHBQ4ReTq69bIFlsr4HDziOoMEZQ\n6hKo\r\n=Ykz/\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEwf4VLsWGCUZgNGR0spDXIFTKHxCtqueME6Kgwok900AiAQNWz+ZwpyCObuUyX2kfbClj61JNIkVNcbeS2gPCyczw=="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0-alpha-9689ff.4_1631128892733_0.4141192458462948"},"_hasShrinkwrap":false},"2.0.0-alpha-9689ff.9":{"name":"gatsby-plugin-image","version":"2.0.0-alpha-9689ff.9","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-alpha-9689ff","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.0.0-alpha-9689ff.9+97544d9c20","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"3.0.0-alpha-9689ff.22+97544d9c20","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"97544d9c20a18a5d5356c894113d84144df275a3","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0-alpha-9689ff.9","_nodeVersion":"14.17.3","_npmVersion":"lerna/3.22.1/node@v14.17.3+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-0EuWMKUWRT8hU1VjOY8CPpAIqHNdkVJR2f0PklhFR5kKGZbib4cXAjtG0hzT24UWDfJGV/JjmZu/7Z48j7dUkA==","shasum":"5d6a46b6b28538b2203f431e2d15bff917997ce6","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0-alpha-9689ff.9.tgz","fileCount":99,"unpackedSize":720370,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhOgtRCRA9TVsSAnZWagAA/78P/1tsxtc55T9AhYXhfTTF\nDT/3hkZgTnnKXtbW3Lh+efXhXtHF44mtcM2cMd8M6F9RKYIcn6JtWzelSfoR\niUlSheJ0X9ltvmKakqEfgnMV5jn8HQmrwjos/4dVBFZrpO6logKRrpuFTXlQ\nLa5e8xziw5NW//mlvD8PVIwSku86ljcfEHlT5AKNzrUw3Cz48sB3c/sIMqWa\njf9EEjMXd0xKTmZX4C6k3D8+7w4uTu+Lo6LmuiZNw3s50jVWbGc07vOUIIsw\nFTCzmz+r5lvXwx+fvCOBsWApDc0USfZYHtwJcfRypSGAOhWZDzq0aPzoT12A\nXczGCYcYq4BKG6I16Y7v/xkx6Np/WGtW/QrNig6vbM6ZOiYPqOYFl77RGZbM\nZlzxEwThyvDA9porP9y59dhFjZ02qeRBwH97zfjsALjE8gj2oIcZuYR+6THP\nMMFmxSZM2/0yWeblZR0J6MH5Ue8dEwO+fAVbHVI/AhF5/Ap8ejhvSwfNqWLt\neYmwByQRqFAqc3Lq/riCeSjXhSruzkg4n1SMW8jJnkUF1yBo2liZb/L49VX2\narIgU8T3TeKVWZcXiKYEvcMH1QAO6gvvtkiHZQ413Y6ypNhR6ExknYsLeXUK\nVUcpf6oB9iQj3vEFBChf3v6cZ8wfG35YF/A5jelG/NeJYvG/ajM9O5WgyEKe\nrkUs\r\n=qfWu\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCANdOpi5CE4y4tZyNuHEhO/wLrABVOvI2HA7JB849nMwIhAPr4zweCZgX5k+bEErMbOyhdHOuUMQK1xiZhs1uIRtjf"}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0-alpha-9689ff.9_1631193936912_0.7437343873604791"},"_hasShrinkwrap":false},"2.0.0-alpha-9689ff.11":{"name":"gatsby-plugin-image","version":"2.0.0-alpha-9689ff.11","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-alpha-9689ff","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.0.0-alpha-9689ff.11+7d81b99b95","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"3.0.0-alpha-9689ff.24+7d81b99b95","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"7d81b99b95d9df79ff1985892aae95b4f187b77e","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0-alpha-9689ff.11","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-AW6svCHYp50MDqZMw+0mndPqnFNCQO7VExdQ/4kbDAeyWyGQicsmP3tkq76nSkGqKB8jALFXd4tLxEL7/hx67w==","shasum":"f5267fad07a046a4f4690f3f1a922b14aab81c6d","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0-alpha-9689ff.11.tgz","fileCount":99,"unpackedSize":717342,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhOiTSCRA9TVsSAnZWagAAxNEQAIoA2bHpFNp7Z9hbEl29\n5mrxhxkGqzlOkpypxoWs79gFujQfStwMpf6xSqbvnNbwgcqQoFdqLAxVIIy4\nxan4Cg8eXLyuZo0TLB/Ng1NfH/9R7NSRuw+opVl0FjVSc4Zol149u4DWFLgi\nTR1ii8kw2MJrF+I0oOF5mTjgo8OTsiOaujllH0o4FPggOpGasvqnjRbXwsBA\n0Gkxd5aV97iI0K+bNJk+fRCoo+8sp9uILjSjnhF4I1szaQwiS8eof8fMFqU6\nuYTqciz/SprgIqllAlXqYqc523laJmbpRFhewT1LS3THXJKp6lz62Rw0hqKE\nhuA5gFgXWLBzhM3ZhojhQApkjIqtxuIBRuHfXT9S7N26CeS31Q3O/dKKDIu5\nXQOKI/DuAcJnfLtpClmro97Oqw+8foylQmg5Cs3taAoK33cWryJJRbUJ91fr\neX0WeKOpZARYr3w1csKbt0wYw0y+h6NwV9jg+pVFTNnwcNNAUWcRo/Hhp1J3\nyUhDmQxZ7RBADQHSF9a1DpuRf/bJWSL4Cp2y4W1VtLEFtlPtc+y9smQryLk9\nhbBOv5yJq8U0M0P8GhN7hqvvlvi8oKeZU22/UwUcXjIqybMoYodPNdWH14jZ\n52dqDsFLcT26ElU8gAe28ZkHUg04OMyANJI69nzOcESxkVQ7nKg6TjATKL/c\nMAhk\r\n=Ia2h\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC3heMDpLRbkG0OQE56iTU1gSZaNclPc5Gl6huAhcHxNQIhAMDftcJ/Xylp9OgUDAWUJDcN5AJh8Jv4niADNW3S04Kk"}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0-alpha-9689ff.11_1631200466395_0.47683973161737314"},"_hasShrinkwrap":false},"2.0.0-alpha-9689ff.21":{"name":"gatsby-plugin-image","version":"2.0.0-alpha-9689ff.21","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-alpha-9689ff","gatsby-plugin-sharp":"^4.0.0-alpha-9689ff","gatsby-source-filesystem":"^4.0.0-alpha-9689ff","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.0.0-alpha-9689ff.21+dc4dcef474","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"3.0.0-alpha-9689ff.34+dc4dcef474","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"dc4dcef474beeb02dceee17aff81a72c8b875c88","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0-alpha-9689ff.21","_nodeVersion":"14.17.3","_npmVersion":"lerna/3.22.1/node@v14.17.3+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-1OWamxnecNAAB9HbrRQZPtLNs23+/XvpVnScj17tMIMHDrxafXTDM8LvWgEO+zandGSnCTVWRoOVSx7K8rb96g==","shasum":"158f39d6856013d0beeff7fea1d4a676e3be5f51","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0-alpha-9689ff.21.tgz","fileCount":99,"unpackedSize":720384,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhO2mcCRA9TVsSAnZWagAA/84P/iu/MFRs+q0BAT7qsCyJ\nKHPDG0mLTITpDXaW/OeGV7lPbBAhu4UyXgEb6Tj6zmI8T1K8Hwy/lM16jnje\nnMXGyU43EFBfvvWCJeab9OmB1RCyPOJsJabOoZA41FvdAp9wBd/2jllKoPcg\nrJG+8vpUSSitGclHXiXy23RvsfxReb0C3PkCyhUB+ffFfAki5ttr/46Cz8h7\n4v5YK2UIdasKcEcOaF+JkZ3qzUvlrombjgAKKn/3N3qLDbyjkwy2QjHciS7L\nq+zJBDOW+mHAHXbKjrgEAboivzG3Jr402/VDLhHjrDq0BYz7t80b7pF0IPkh\nzyx8HmDFv5We2ffzU2mGZ5hpj4ZGj3BOTj43LfHeb+grMVfH1Hf8YI26+AJ8\nPr9gOpRuTkIW2AGFAgHXbkN/zwixQD2715JAhcPl9aKGuo1bQMOyEujMFQC2\n+9dSZMxflHu3FlSCRN8EH8Mq1Gdjml8bt2rxnAJ8U1RlonNxCJBygjQ0BJUi\n6lKHW2YiLyuSjj/kSwEbIA2SkjYD6Jrt103ToMcdYvOwM0PbEE3vHunTQ3oa\ndhi4y7UdMKyfekrL5ZAZgOCGKV/OIhHHjTJbzzfXA3tGy6buCizKWaRi2Fxs\nc+MXuMmu73SkJqVZ5M9yMOkgxjRpjrrBS5VnruF2cnxplutj7J+M8be6B4Jo\n5pV6\r\n=Xjcq\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCPQ1hF3wn7JrvKp52cXLXGGF1KavLOx3Lilw+m6cpUIQIhAM5ODb4abIPWswcKUuAjvrDd4P2qtK0yBmEy3It7oew4"}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0-alpha-9689ff.21_1631283611640_0.6234926182442704"},"_hasShrinkwrap":false},"2.0.0-alpha-9689ff.23":{"name":"gatsby-plugin-image","version":"2.0.0-alpha-9689ff.23","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-alpha-9689ff","gatsby-plugin-sharp":"^4.0.0-alpha-9689ff","gatsby-source-filesystem":"^4.0.0-alpha-9689ff","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.0.0-alpha-9689ff.23+c494730972","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"3.0.0-alpha-9689ff.36+c494730972","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"c494730972f0e8113537f37b2b61477b96e9348e","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0-alpha-9689ff.23","_nodeVersion":"14.17.3","_npmVersion":"lerna/3.22.1/node@v14.17.3+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-6VwevlpqL7WWmR2G9f6Qj0tzzp1E5e07nrE1j4xPCMp0Dc1IhKBgQ9BeKHV6acRCDduNMJECFWQoFvg2DyKZng==","shasum":"2a2bd8d6ae7779c57be1408fc9869efdc33253a2","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0-alpha-9689ff.23.tgz","fileCount":99,"unpackedSize":720384,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhO4+KCRA9TVsSAnZWagAAMFsP/jUC5o6rtx/Qx0VHD6dO\nroQqoG91r8yUb7lGlsJNTX9UE5xLrNSSj+y4lUqD41VMrogzYZ51wwI2cTYa\nb8SQOIrEj1CIJUwOSPM6tobPr2fbhcHa/+zLSWNqOs5r37rYri35Ji7988bS\nU6ubbWvB7J8dFjtmfzShGJF1eH6uxNbnuda/VYL81vqO7mmN3oX7Q+tZdWI1\ntCgH1XEa29XjqrpPFOvDyDKSEEJuYXVnfm3etBt4ieSaZs8lJn8OTD8rSDqC\no20az9TuqXYwxa2CUwzsUTf18la8PqDWVtAObfZGtSYoOig0w4YSL6dl5Jrg\nuXih/9vec9DDsowPXkT/SxY7O+RHzl7RPac5079WDuxzVzikpdyPen9PS2v/\nJYv9kiZFgU/Jnampv8lWIGpz6AE39MFY9+phW+TFcGAwEOxdf9JLjZb6r0hJ\nPOgT7igX3Gd39EnHWk+vm53lXahohsJlOe4IRhB5KKAIt8A1AqbxuLH5at8H\nbMKNQkTxi534P+ISIdklI/SFpfXAZCO7O7urZLgF0sKl9/Iqrx2LEvjm7F/z\nlZph90N3ZCnXekBKfgtb/mL9FQBU2GInr5HZhV/Ej0dntWylNBTJ6uZBoAy/\nROsfLtVChOGkqhji4YLS9QBkbKb1We7bsbblchaxSr7bXoqz0sx0R0rDDOgC\nYDX0\r\n=4ChB\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGUu4FCKY6olQ7319x5HwYArZ1yci9umBGPZTmZk8sGZAiAc4np678WZrOiVRpS2Vit1rQ1jlzgaodYV/1stwLvsKw=="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0-alpha-9689ff.23_1631293322508_0.13396782963557485"},"_hasShrinkwrap":false},"1.14.0-alpha-qe-sm.33":{"name":"gatsby-plugin-image","version":"1.14.0-alpha-qe-sm.33","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-alpha-9689ff","gatsby-plugin-sharp":"^4.0.0-alpha-9689ff","gatsby-source-filesystem":"^4.0.0-alpha-9689ff","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"3.14.0-alpha-qe-sm.33+e26f3dfe37","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"2.14.0-alpha-qe-sm.46+e26f3dfe37","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"e26f3dfe37a8468220e7b5f446ea731bdade41c6","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.14.0-alpha-qe-sm.33","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-JB/onUtXbdkcFiZ96gSO2qPyUKxH5tYUFijDm+CfhXgZ/os9zm5xyr6aajR2NqK6ja+lrwAs7A0hvCzI9OcFfg==","shasum":"9cb498f181c640779ffd21a3a9813d0317364d0a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.14.0-alpha-qe-sm.33.tgz","fileCount":99,"unpackedSize":717356,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhP3N1CRA9TVsSAnZWagAA89UP/2ffXKX4Uq4p5x7qWDXb\nw1JEMvjpcsIK6MaEJ53CpC60oAjvurZpLgDL6G1gpAe5VrHP3Zij8cP3OcgW\njkO/MrbyTRh2UD29ndRG4zPj1atfFIhT11JR5ElUG4HBf+zz4P0LHLQP5guW\ngsekPakirz4kqA3VI1IhVfvRd+/odJWxRWY0sSKkhNth+vvlSfISn+1EogjJ\nOxowIx95OtlU4Y2uzeBWZydoH/Pj4TEEwdlkkDamO84q29OEQRPrYO+ya24K\nsmIDnszDU9+UDIYt4vI1B3G4t6rtT/4ReK2A26w9vGoBYQl9d63PYxJ/QfA1\nZsGlaeSvC9ULb+SA1EJdlzBnQ8iFtyrMMGBEQhR00l1QUJjEoTgHc2bLKf1g\n5F5Fs2AfdccEwmZ05kU1MTJg7Y/bwkzSqSyjO6Vkpavrs9uuV5AAokDxJ1Vf\nbVA1NvQEroIyjymA9DzRCMLm3hvubpAHJ2bzEEuPxwuJZN43efDApeJZKILm\n1J4XUsAqah0+n2LPNrf3Zg4fgIBlNyvNnmToO68I9G0DAILQTzBO8k8j7TCo\nuXxXriTweUhCfJXbw1vIIYv9QFWpx1cl7BnimFRzoSfNNqdnFVMQC2QUmymB\nuEufIxQE3jEzLO1ERzgAoz4ODZdBfeaEJMU3j5+I1BgaPDSmyhqRu61jBhzY\ntuU9\r\n=MWCq\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCaqVnf7UYWnplvXnnBojRG4Ji6enf357Vv7hhCH09l8AIgeBdunoPanFP8PhbOxOJ+jTiPGbCqlib3tDm2+OHZZRU="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.14.0-alpha-qe-sm.33_1631548277387_0.6584982577315202"},"_hasShrinkwrap":false},"2.0.0-alpha-9689ff.13":{"name":"gatsby-plugin-image","version":"2.0.0-alpha-9689ff.13","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-alpha-9689ff","gatsby-plugin-sharp":"^4.0.0-alpha-9689ff","gatsby-source-filesystem":"^4.0.0-alpha-9689ff","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.0.0-alpha-9689ff.13+e9ea177732","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"3.0.0-alpha-9689ff.13+e9ea177732","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"e9ea177732acfb87110861987f5dee8f2020da6e","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0-alpha-9689ff.13","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-iKiFafc+XNI1UAKCyCB11nHQ7Sb+cQm7g4FujqJBuyuuM+JtHIT8N4bqBRIlf1ZGEm0ZK1TIhHZCiybRouOhYw==","shasum":"5aba65ac29c3e5b4b7616a995eda70dae9c83957","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0-alpha-9689ff.13.tgz","fileCount":99,"unpackedSize":717354,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhP6kKCRA9TVsSAnZWagAA80UP/Avwk8bh9mbTQhyX3P0n\nPnY0H1ozzlDJAr+SvhRhMf4YzIe6m9myXxTMilwc3Xaw6kfqElWBy+mkbRu7\nqzvQbK4JFhk8Ky2oetv+7FdfG1TB4OAbC7dAHZFlNKYAqPmOQ6p8Bh/sDNDk\nZxjPX//TSaNMIT2EmGKkpqp7OLeqmCn1WgmPl5kvxJ53emj41ZhdPQzvTJMV\nivGuGqey80Jl7ENSAZzNXiiCIiLMuc+agtkqF5Xo0vveTvn6Hx7cfT149kT7\nPt8BlK4x0nvhZCHkfH8j7eOTU2ZYGhn1tU2ehz5EomGChNonMhk1iFHaFi3l\nmEb1WwfIuIaU15CsrcSs0HncPGfTJc5h+GmC8eSpj+w3Y4ldu/hJWwyvt6Pi\nf8N64QEpUGAq+Am9RA0GMbwA1WZLdIFCWYOEdjpm6GrNXhgwkGaEQOa6yek7\nhvRiQuS/t/+sUvYnoz0MoGwE0c1iUsf/x5HnGmgpkFK0J89NgBCCNOtXSFC1\n+LHWy8JvUYAVztoKGi+mdSOUqOPk4NE6/zdh5otk7J0jj2rTYjFpFpSVO4h7\n+/HvlcIWsNAUYoN8raMkQPPLMPIbfOa988ukdBmjbRWoAgWrWJC7xb0J+6BU\nQL3REXvlmB1oX8qwL+PWpvyRsj7bL5nCbXM/107mMd5sMugZ9xycoedXdHb1\ncxeQ\r\n=l9Q8\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG00L3/4lDersTOBnyGh8EDYEBESqMJwEdpwZmZ2XifpAiAih57ym8I3uzKhz1cmf7ZCD9fmNe8XYkuVmgZ6YrlXcg=="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0-alpha-9689ff.13_1631561993818_0.48096793210166755"},"_hasShrinkwrap":false},"2.0.0-next.0":{"name":"gatsby-plugin-image","version":"2.0.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.0.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.0.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"00a968257c0a73dfb06f81a974297f7ff76443c7","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0-next.0","_nodeVersion":"14.17.3","_npmVersion":"lerna/3.22.1/node@v14.17.3+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-2pkWvkXOzzBeLu+LfBWwX6FCf3yuq9oVS3s2LFDmeS6NuqRFBfNvQWBEh0erI+n8ihoCDLraetQLak0StBD9Mw==","shasum":"2a02cab3c25f376d49ae6ecce4586aed312bf9c0","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0-next.0.tgz","fileCount":99,"unpackedSize":720302,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhQHbACRA9TVsSAnZWagAAPaEP/irgdogV+0y2gkGc1KjW\n80JbsTBTq6Mz52Pql+v1qAWyhFFXHTl2ohKdmNPlTd0xlC23kFE2eoGvz8go\nbuF/WC1oX4GBI2mcrlMk/juaiUOEr+Du6RuMKl9SgSiD6OpFsj7E0Q6K3ccP\nUJEYnIrUy/+C53fYFJZJAnIA9z9Flj/3S1qINrT5lLz843BN1IZzPga0JhLW\nEFQkjNpoZfDUw+hIV8hNsC4uyjYJX4FaHb19soSOc7ssnkUlIA4AJhgyndvA\nQJ56/m9cngscOyhqbtryM2JiWEYGITWM6/MQpCZ/ug4m4KQ1twOm0oBuv1Lw\nio1BB7ib3TRL+eLLn5BNjNk9iK9OhUwzDFqDE0Mv0qXSEGhN5YqyHHVL4T8r\n9ZDDjAnKewErYC0tCwqVjkA9vInI1KlF6cwhUNx+u9HYVKoXWHIgRrcRX2ru\nysZwh4pDlnWeQAerzy5Lf9J2IQA8VuyDbapn2HiFLmbiNUCzxZwDWjZiHijk\nQT4sIAkYBbAxFHhFm10qa1Cs68gQhxdZTCEyNWfsQ9yriEfA9mCukwp2QNEJ\nS4o9pRqI02YAA9OAjSI9sde84sRzJvTZFx0NVwyOMIQUlQWtwp70fVBjkG+l\nyRRuFg5MgrE5eb0pmxF3YQJCSskVQGDZ4YiXi58pxyPLkn8q9NagWrBbLEzH\n/Um1\r\n=6AQN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIB0oT2TNeXKSXJoTA400AummUt//QIkym17mI12LjNu2AiBlxrMxiKo48uCVC6sAhWrL+wUknt8CeG9JoI7aR3erCQ=="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0-next.0_1631614656735_0.5434215577661439"},"_hasShrinkwrap":false},"2.0.0-next.1":{"name":"gatsby-plugin-image","version":"2.0.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.0.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.0.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"7c726ddfce2529352d6a9cd0822c8146fded522d","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0-next.1","_nodeVersion":"14.17.3","_npmVersion":"lerna/3.22.1/node@v14.17.3+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-yLP8c0Z//ljG+zM9qVplfUXSqhV2f6Q9sfLjPpHgxyf7ZADWC6tTAVu5PlqudUWqYZNCQUFQKTzPjM30VBm8xA==","shasum":"9763c3a1d87b252bb730c43086ae11dab9fa8f9e","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0-next.1.tgz","fileCount":99,"unpackedSize":720302,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhQPk+CRA9TVsSAnZWagAAS0wP/10AHhfUnVpPcdZgrUEI\nNRU9NJqLi6QoLBHjkMVE/byvU48e1cp08GHkuj5qYJZbfGcpdzSTdxfawHcv\nlYW1eAsVYg8EZSHmvhh/roUFYjQW1x1wYuekwF6qtMELBYLKUlBAt5X43wT2\ntOjrgcyhxUHXgTQD8JF13/gWxbbLW3fK8kNob6vQm/dV77qIfapdk4Jktbtl\n7Yv2Niu5xSdwE961N6THNZ+CYenfLm8M44VsBn/09rzrDyWQ44Hu3MWHXXNc\n1KZZVvDRpQtGTz302MxVDpS445DdDICTndjCD6JZdLumWSzCEtMonoVgkPR1\nxxL97qXpYeEMh4NM8bthDE5bOKwGjvO0tR+/ZnE57CuFSsOcUmBrT7FXl9tJ\nMAZGk6rIlpriKXhI9rjBiitq4Pu/9u4KwPI/qfC3hjyXmricmWrP0FW7PDPC\noDbogajxe/As4ty0NwaFzcUGVjfz8Z6ZM2NIKtgOAFYMw5jKdwq4bLmsUaWQ\nJeBxnr0BAW3z3BFJqztnhxqdQMb+DRxLPyPi4/mRZWdgUcdp81DGdOprPh6e\nMZzVEnJPgq4US5+JSGRq4r/xxSaCepfaKCGuVvsyYodGNkJKtXbvnpapck0K\nfUazmP8zAsVDznool25hCMVAreuc4bDGFcJGetfOebUUOaMhLx57L+U1VV9h\ndiHr\r\n=Z10v\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFrPy+n9H9dMyboubK09Pa7Nr62AjxFEs4cZpXU17l/zAiBVqDb5ccWlueEALNSXLLmWdbz8IaXpkzF8Edy18AugOw=="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0-next.1_1631648061728_0.4663825228179743"},"_hasShrinkwrap":false},"2.0.0-next.2":{"name":"gatsby-plugin-image","version":"2.0.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.0.0-next.2","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.0.0-next.2","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"fa70491bb6413797266d003e2fed7b680e964fd7","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0-next.2","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-et3f040ZHGYO3/2Hh32HwrCMkYKwzo9M9BlQpYKT9pJW91l+W6/G6gRNLSWoca3eRpHqFQ4cuqcaBV+a6OwjFA==","shasum":"31ac7fc4cc13f200dae5e0e4048fa6434520fea7","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0-next.2.tgz","fileCount":99,"unpackedSize":720302,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhQi7TCRA9TVsSAnZWagAAGSMP/iy8iuuEkiC2VjV+0BTa\nm88qzP3l6oGZMCObLbj2x46ToM8RJqmiM4gXEcTArq8yQj0BWzbZxhGDw9T7\nw6CE9m4kggxNAI0TOatBhT2o0BjTblnPvkI5Z4pkJOlnwjy8/4mRHPOHwdXG\nTd3oUe9MvCY7fz7CfUTe0l68KwdZ1O1/twiY6M9KZCD1pS1pF3qhDsdogWSo\nRQFCUL6g3NcvJYb9/8OU4I8GukrmzGlENbZ7x9pgSed59RBYtZVQ5GMgPmlz\neAUeegNc4RJf1khRvoQiakkRd7L18fPVXuVnCAtX9yoZgtQW08/MYmkounJq\nuYD+9q9mWlq+9X2njZTUVGeVxMtxHal5MlzNMIiIKDavA8JwYciVxuimnvM6\nXRCECbn9HLbUdtzONaqUlVEzVfxeUCzbATX6laDCqnZXXU0QIUan4hpwUifO\nkIvQXRAIqt7GI816w6a0RaFBS4o3qTGBHQ6v09JiULyeJSb4jtSEDrkNp3js\nrCKw9B7QX8vmgiSJfHx87pCHihRktXnnqyoAn0RdeYSrXr6BnDSI7HGFcJLa\n7kv7wfHGICvFpohB+WiSqxduL1xr02GQyBiwsXa0Z8D7QyA8DrCwaEOvenPo\n9x+L1Doe4Cy2vXwAegJS3EerdbQlF9UW9/iczA8fdVs8NLGUqzfNb0OCykxL\nbKph\r\n=Drbk\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICqvwVFsWeILC2ZLOWyfbJZSm4FAZd+4bhBJgS5KLN6KAiBjbrr+t9Wp4kMld9q5TYXnMMyqoBNi1gnvAAGWHduG4Q=="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0-next.2_1631727315197_0.4123435055062512"},"_hasShrinkwrap":false},"2.0.0-zz-next.0":{"name":"gatsby-plugin-image","version":"2.0.0-zz-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.0.0-zz-next.0+fa70491bb6","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"3.0.0-zz-next.0+fa70491bb6","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"fa70491bb6413797266d003e2fed7b680e964fd7","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0-zz-next.0","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-zzrT5GP9KWfv/8Cl2WAVkBtFoK3k5UtM+pITRK/qxW7AJR7GtkLZ2bNFxpzPKWrfOKTAHCRRsI5hZNMzYrugOA==","shasum":"c57cc3f8c76c19078e39838c30ef8c229a30937c","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0-zz-next.0.tgz","fileCount":99,"unpackedSize":720342,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhQkdyCRA9TVsSAnZWagAAx3kP/A1I4HqwZ3Zqpwt+DZ8w\nCGqZ9CY5CcS6PG+ThrG4JrssjGc105QVUkV7NIy+h9S4sV4c8QKN3rto2IOT\nQ53dMk/6o3BvpFcxkQZR8NtNd911p3aFiLEUvv2/H96LmxmPPTsRUa0oeolA\nllf7Gh6nC3FK9fNjbKY9tsLOzoedZl4J6D98HyxPZwpUcOUDfAecLXQZ6tDt\nd2fJYgfftSWU9OlILiBbT6J0u2pVSQxtay8ySf10bJcvO5KUKAVUnKZRpqOi\njwOAjIDca9P6QQw/pv6xRuvwP9TH6D5KwS6PIdDJgemMO/HRcqHMS2YwljAR\nMTpFXaRJq5zLyp6tbMyq6fhZtjEUBkdvaM16T9YTiJjIX8Yebf0Wl1iOIgU2\n5uA7mhkSz+eRPvId08nJbqbYpfaiDl0BmBL101gHoI+L5w6X6jUbddCFuL6Y\ne3wPmcesdNfNLdVMUqu6/e0F1WtKdcFK/uCVBu6Tw/z1Yd98+zgxSAt0r5KW\n/1bKLB2W9gmv4jTe1xVNChClVT42NcNSy/gcOjy1gjErMj7JrXFATWM+ZQRY\ntkWAndXjCWYr2lMPEeCYURMpTsOPLQ2RsjOwjEZY6t5pXyx3zsZkgG513Cy8\nB8kEtEtTg7IpZwzM7CRYCCgJIxUpneFrSxEspyJtSQjfLhUiYhEF2sXTubIg\nwJQv\r\n=J5eQ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCuKrq1JWNpcevU7wJZMfRrm3aBjux16NoeT7T6sqT24AIhAPCzreIKcPCD761r44kfL6BTUAACogKEQMFEN/kYpOyA"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0-zz-next.0_1631733618232_0.7000687253124147"},"_hasShrinkwrap":false},"2.0.0-zz-next.1":{"name":"gatsby-plugin-image","version":"2.0.0-zz-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.0.0-zz-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.0.0-zz-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"1da90fd7088a47e0a94bf3f1fbca1e571808d843","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0-zz-next.1","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-i8vCjAz+/NSGILlWQl9HeZvJAJiNDK4nlcySQ0tN0FKFzY8zs1/vfzcgEVPCraNLTB4VQLCG7jYPeha6JFpH+A==","shasum":"23d4eb5f575e74fab0acc96d63401acf1e527518","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0-zz-next.1.tgz","fileCount":99,"unpackedSize":720311,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhQnfqCRA9TVsSAnZWagAAmIoP/2rdYX+gSuzMK1gwbFCh\nQgkNreKCfO2PZZjSwxxtEKb/6xwtDg7BRZVEV8xeVdCvdbVgqXAeX3mWG7a8\nAiHzYZyV7B0hkeyM08XFEmC52AJxODp10P9iBxhHRBaHVjb7Nwry3w1vHfKQ\nCE2rByMJsDaSjt9Z7ACcqIdHXqILYXDTYP2lfY0lYQXH0Tj5rFY/YpNs+wMD\nIfT414qBrznE7UYTvO7BHsYw8rbSBCUbe0/BRDe4/4XlTZsgi1/jDYF+y804\nelufZFtsPTS4NWZQ903lpHd0PZq9/ETDdY2P+b/XlWhUyC7rKmaclPddMR1+\nWwl2zADbSBDR6PnUMzDzSKB/evhDxqdDgqkLkrSHLVgebYIVZpVi01uVjZR2\n2apmYPojaZwey6m2uKN+pZwJyNCT/G9zuOVy700r5zrR584SNhaWmkmjTOh+\nLcnnX6vNsjDmRRyglGw2TYZD0KrCkO7MtVLLFqsbUvKLvFeTP3XsmT3Q6Q2E\nO9/lmBX5Xl9tIRenmca49LQr7FSUf7GESiawu/TykxSCXUWGZxgvQWDiDbl8\n0FI0RvOh5L3l5U72gSXc6AayDYCawQU4YQqox7rieJBj8rkdXxAth0iDEY1Q\niayLeo3Ik/BpfHpj8dnhqIehQLRGts+kmrRGHwW1vrijwkaQiaR9d6I0xwES\nj+2Q\r\n=KSc3\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGnxxBwwyDFcPUvXd9cektlXmX0zbw1mSxmumiq+jso5AiEA8RcUfyh69U3q3RaZLkA2Nmdt+eqnhq4DNXN4pv0E1P0="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0-zz-next.1_1631746025844_0.6284302537165274"},"_hasShrinkwrap":false},"1.14.0":{"name":"gatsby-plugin-image","version":"1.14.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.14.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^2.14.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"f3f1bbc4b75e4ede40500e899449820c958a72ff","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.14.0","_nodeVersion":"14.17.3","_npmVersion":"lerna/3.22.1/node@v14.17.3+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-o5D4k4OQDdzXQu1VUWM4TLmi86D2fnGNxLKc/SgvGiqCr8e/opNJcWHELU52XQ11zqSU0jzOkDRQGu9tWesRlg==","shasum":"b6d3c14b280b150ad32b3975e90e685b50365bf4","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.14.0.tgz","fileCount":99,"unpackedSize":720288,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHHaGd2bHS26ft5gWMoBiJK+GETa1QsyFZKZJjT3bYzBAiEA4ndmJdKZkpbyfw7KD315OZhrl1pfbbPAvvBHo2oHxDg="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"jamo","email":"jamo@isotalo.fi"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.14.0_1631906310419_0.17705239102249393"},"_hasShrinkwrap":false},"1.14.1":{"name":"gatsby-plugin-image","version":"1.14.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.14.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^2.14.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"ea4fb54301b2cc5b5f52ef27ebe39cd70fffef33","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.14.1","_nodeVersion":"14.17.3","_npmVersion":"lerna/3.22.1/node@v14.17.3+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-3ZiCFyIVjWxlpral04HlFZbeWC4Eoo7DYGA/Eh3qNMZ3tPKxySk4xXUdrnhIt967KBGATFuuYnPR9kKEHatCuQ==","shasum":"5d40dd35be4bab41e8dd5b9207e9b2485c734f6e","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.14.1.tgz","fileCount":99,"unpackedSize":721376,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCW3OGi/AvQDxpsn4HEu8Zp+1/uGZCVRT7c9DcI51g0QAIgVz/ikfIRRED8KDjncVuqYdnfaRoj1E+RXxaOwFpEAAQ="}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.14.1_1633462514660_0.3356086394979432"},"_hasShrinkwrap":false},"2.0.0-zz-next.2":{"name":"gatsby-plugin-image","version":"2.0.0-zz-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.3"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.0.0-zz-next.2","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.0.0-zz-next.2","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"f837358b1511cf46b9a112b13ce5a9d6ec58c131","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0-zz-next.2","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-tucki+xkPpeKrqwR1Ee7Uzg2FCKGMloH500SSsQNt2PgpmdsrT1tjouhgQbXKJAsuXHuz0SDDLQYM/UW9iTBnA==","shasum":"2fe3a3f5cc89dff3b1e654335919b27d3cee2a1a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0-zz-next.2.tgz","fileCount":99,"unpackedSize":724580,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC22INZwLf4ZsueSdRGDxh9ERVSkO/UzQY4SYk5pTyhLQIgWLmnDstdnsmC4bzW9F/vuzhZ2euhKkz7qYnaZDKJCIk="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0-zz-next.2_1633468559239_0.5026699409180846"},"_hasShrinkwrap":false},"2.0.0-zz-next.3":{"name":"gatsby-plugin-image","version":"2.0.0-zz-next.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.3"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.0.0-zz-next.3","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.0.0-zz-next.3","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"58d30fd9a5d85a31a29a404ce01b74fb5e7dbb7b","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0-zz-next.3","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-AXoqQ24R1FAC4rh67PeTWOi1S8R2xKNc1/GwnGSuEu+ikZIDf6ncoXR2owAM9SvpB/HF3/+R3NAdw2ETnWfRDw==","shasum":"4b6cac3e469eb89b0b005f438e920b81deaa4d3e","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0-zz-next.3.tgz","fileCount":99,"unpackedSize":724580,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDnNFy2Aw3eGq/pJ71t/Jpy4VzmgsAgInUU44+7+32ymgIgQoRs871O2sj+1i00GnmcsUR5xpOV0BzYXOq1hxP74fk="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0-zz-next.3_1634023878921_0.14222625137596268"},"_hasShrinkwrap":false},"2.1.0-next.0":{"name":"gatsby-plugin-image","version":"2.1.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.3"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.1.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.1.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"154b05987f9983ef95067da282ee8424c2e79d98","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.1.0-next.0","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-VoIQ8rcv1gXx+m+XnjGdFRIuXQW3Sy1q3ELZexC3p9vfMz9rrUiwhBesite0ILu1T9CZol6l45F6JoQ/AMY99g==","shasum":"636e315836d53de89efff90f88391b6b4fe7ad91","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.1.0-next.0.tgz","fileCount":99,"unpackedSize":724578,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD0UDtpsaIEk5omYI2nbQaNm4ckFLKKDdkw5F7DpDFZeQIgHVC7QMeCukDMWVbu79+TB3Thq0xWT7U47znOzMaCYsE="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.1.0-next.0_1634759677444_0.9932997048922882"},"_hasShrinkwrap":false},"2.0.0":{"name":"gatsby-plugin-image","version":"2.0.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.3"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.0.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.0.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"8d07242926e54f7c0819fbee84c152a27ec77959","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.0.0","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-1f8tBdz179KlDwcV0P6HYRm7r6SrdzRyRKPHk0KYovfuA55E1m8bpT6yviC4mtN27YzOqY0eax2MxDJ2kU1n2g==","shasum":"30b8915be90b0f93665f2b0bb53ad55ee0f7de3f","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.0.0.tgz","fileCount":99,"unpackedSize":724803,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDYJPeoDewU7O93LQ7epJXiXPS1k9CLOYUnwqJ9KXfWnAIhALzS2XwYCJ7Dk0DLQFe5rjNVA5je0mV7qswTe3sDB/a4"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.0.0_1634817544839_0.8957764156771906"},"_hasShrinkwrap":false},"1.14.0-drupal-next.81":{"name":"gatsby-plugin-image","version":"1.14.0-drupal-next.81","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"3.14.0-drupal-next.81+e8d49a22fa","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"2.14.0-drupal-next.94+e8d49a22fa","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"e8d49a22fa6397bb3baf3d2b1ec720ca60972895","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.14.0-drupal-next.81","_nodeVersion":"14.18.1","_npmVersion":"lerna/3.22.1/node@v14.18.1+x64 (darwin)","dist":{"integrity":"sha512-oKU4yuLm4hvdQFkzYWrEpvr3GXOd1WZmYo/kV/4QgTS76ZI26R84BOY+DkOVUMvI7jvEMcLB42E/qdSIYfWThQ==","shasum":"285d9e885472fe5b9435e0567a1efdc657d6426d","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.14.0-drupal-next.81.tgz","fileCount":99,"unpackedSize":718732,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGy+Z9xEjkYZ0LbglZnPP4EZcwbDd3xH5z4CHwO9H4qzAiEA82P0EJJ6D+ofiveZ6izPCuU32Ahz46jluHxWac3uDWs="}]},"_npmUser":{"name":"kylemathews","email":"mathews.kyle@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.14.0-drupal-next.81_1635209656968_0.6269475132358686"},"_hasShrinkwrap":false},"2.1.0-next.1":{"name":"gatsby-plugin-image","version":"2.1.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.3"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.1.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.1.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"413680ccab048afc18fcf7ec814a22039760afc7","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.1.0-next.1","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-a8R39UGVXv4AqDXJ0AErbqMmZPJe83gg90nK1oyLBaZWVssVxZAtOVjXH3vBHKQJbcvV7E0D6HelhCZPUMpn7g==","shasum":"0c849b77873c9576c6ca78195d63d49b9cb31bcf","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.1.0-next.1.tgz","fileCount":99,"unpackedSize":725583,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAgFXVcBJ06fEvs5cVSzLHu/mOv6dSvYhgIRzhR9B543AiEAkVkSt9UEA6s16nd5xy6G1TFXG4YTjJGaRXGqQ8//bMU="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.1.0-next.1_1635505388653_0.07639406839990115"},"_hasShrinkwrap":false},"2.1.0-next.2":{"name":"gatsby-plugin-image","version":"2.1.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.3"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.1.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.1.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"889fe4e7dea4da25395fdceef54be560e713b677","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.1.0-next.2","_nodeVersion":"14.17.3","_npmVersion":"lerna/3.22.1/node@v14.17.3+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-yRIiuPmcypETZyQxeCOIaI7MIV018v31p6VmSkVG1XxMXEzx0eoJRDQNoLu/4BRlveu+rHSM9D2FzhMYKRSL8A==","shasum":"d8c74dcc4e4dd3c96942960a3315edac0cc1c32a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.1.0-next.2.tgz","fileCount":99,"unpackedSize":725583,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCbxTru9LKmn7x6uvWx87IgIy2/1TMyzyBv9dPtf9OsHgIhAMrrVE8evhPSnQiredJ0dbfQyXMfQLtmXgLml7wtoj7U"}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.1.0-next.2_1635526029192_0.9361635918881399"},"_hasShrinkwrap":false},"2.2.0-next.0":{"name":"gatsby-plugin-image","version":"2.2.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.3"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.2.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.2.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"909af608ee2a4947ad999bc1cdc8b672c72e1a3f","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.2.0-next.0","_nodeVersion":"14.17.6","_npmVersion":"lerna/3.22.1/node@v14.17.6+x64 (linux)","dist":{"integrity":"sha512-V6/G42rvAZuNOUBsPPq8yrZvAP3G5QiWD/tIEY28e4d5yjLepAok9SWL3LFk8Dz5VVoukke85ec3Ah2LADgTfw==","shasum":"2f808d471165a4194018aae64856ec9422a40e10","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.2.0-next.0.tgz","fileCount":99,"unpackedSize":722750,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCID2ed/p9SH41Yar5oOF8X0ViS76gr04c/dCdxasQDVbDAiEAoRBgnKEv6E6MutCzbVoRSh++dsZ1RE8q/sVmlgsfttc="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.2.0-next.0_1635757881370_0.24564689785280125"},"_hasShrinkwrap":false},"1.14.2":{"name":"gatsby-plugin-image","version":"1.14.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.3.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^3.0.0-next.0","gatsby-plugin-sharp":"^3.0.0-next.0","gatsby-source-filesystem":"^3.0.0-next.0","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^3.14.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^2.14.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"476a59196bccbb6539cfa3329bff69c9163c4bcc","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@1.14.2","_nodeVersion":"14.17.3","_npmVersion":"lerna/3.22.1/node@v14.17.3+x64 (win32)","_npmUser":{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},"dist":{"integrity":"sha512-5kw7sAjqrNfMz7E1oMVfOz4CrG6AtIQNYVl1jTAI9sAuTLz/EJEHOM2z54pFUk/irNkrhXDZyEnDjY2d06U7rQ==","shasum":"3955e370d8eb96cd3675001220f315a66ad8ea06","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-1.14.2.tgz","fileCount":99,"unpackedSize":722371,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDPvwBIQBRV+oxZBR+hQ/Fxe/orVzN0nSfkXNgWVT/2CgIhANVtm/pVewG5Ztx1tW6NBnJmKMub9b+sWXBpOjFWUnWV"}]},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_1.14.2_1635850881678_0.3664743769360532"},"_hasShrinkwrap":false},"2.1.0":{"name":"gatsby-plugin-image","version":"2.1.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.3"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.1.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.1.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"4086ca523d1caf68d44076e361f00e7b4b96c4a5","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.1.0","_nodeVersion":"14.17.6","_npmVersion":"lerna/3.22.1/node@v14.17.6+x64 (linux)","dist":{"integrity":"sha512-8bzy7eaDMNqkhsAQIQGquuZhCih7wBaXQYFHf3X04yFA1MDtXSK67pncWXfaUCqr9xZdxqxA2xYRi+c3abGpRA==","shasum":"71f3568ce7558a84fbcf06ca5ea9b00a1cd9d41d","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.1.0.tgz","fileCount":99,"unpackedSize":722729,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDRlJLHIUM/ZveJjy6xUme+OjvDFgw3svUhJinn8CLQLgIgARhauV7HZPwA9xAO4ayWPwkAvKdS7HSWzm0XBjIwZHI="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.1.0_1635867454221_0.754161079170472"},"_hasShrinkwrap":false},"2.2.0-next.1":{"name":"gatsby-plugin-image","version":"2.2.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.2.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.2.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"db7f2666391fbd92f8691aafe143106e73f62682","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.2.0-next.1","_nodeVersion":"14.17.6","_npmVersion":"lerna/3.22.1/node@v14.17.6+x64 (linux)","dist":{"integrity":"sha512-H4EwUnZx6XPLRb6grbxNGT3sDgZK49a71nvEH3BN5HbqG+oz1jMbbBGXF3yYhXi0CuZprGgVNQMhxwHnlni+gg==","shasum":"2c05c6b04e61ba1505b0df904fe2bda4955551b3","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.2.0-next.1.tgz","fileCount":99,"unpackedSize":724771,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDSvB8WWfUem4KJp5PaFjGHKi9gELxCKs8gYx511j+dGAiA2aCN8SU8ZM81TH7A/hX/43VF7J+qRyf/HUWV2QNkdyQ=="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.2.0-next.1_1636358688622_0.7479622637512611"},"_hasShrinkwrap":false},"2.2.0-next.2":{"name":"gatsby-plugin-image","version":"2.2.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.2.0-next.2","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.2.0-next.2","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"3644acf228c0bea5a42f15ec3b7ff3062ba720c5","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.2.0-next.2","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-YSp2anhk2TAAS0Xt4X08Qp+0haMDAxBLaB4mM89Cmyb2x59Y4EciNv00LE7bEvlW7Jt1HJ8rl4y8xXDMj82AYg==","shasum":"453daa4acfd38cee60d402e44b37f40415a54b0c","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.2.0-next.2.tgz","fileCount":99,"unpackedSize":727604,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCzCv5zWLJKfWFOjtAZwrJ994VfASCTjnpy9G97QV/t1wIhAPkX3b4VbxRof4ZJpYXa1wnnBKN8S+fUTump462Kefwu"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.2.0-next.2_1636491509342_0.39146686016446286"},"_hasShrinkwrap":false},"2.1.1":{"name":"gatsby-plugin-image","version":"2.1.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.3"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.1.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.1.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"c3c69709626f647b6ab3e0d759c3961bc2f02146","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.1.1","_nodeVersion":"14.17.6","_npmVersion":"lerna/3.22.1/node@v14.17.6+x64 (linux)","dist":{"integrity":"sha512-8Kas9TxE3VCGxWYzxceLmsSxRziYFgMBbMwpb07igZlYfkxWjakFSUV/vkm13oixuZhS2tLjv6FEyfYqPuWyzQ==","shasum":"beccc877db0efdc6f596d5447f29b3faf72701c3","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.1.1.tgz","fileCount":99,"unpackedSize":722729,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCsYSOsCZuWn8Ul5q70AgK09UeJNZWTaLyvfclGF2sjPAIgCKSMaO2lXbxL0ImpARgy0fMDSXEDenLxZ0pHW6N8qwY="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.1.1_1636554430817_0.6688741134763629"},"_hasShrinkwrap":false},"2.1.2":{"name":"gatsby-plugin-image","version":"2.1.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.3"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.1.2","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.1.2","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"94503aac2bbe061d15feeb803342a2eeae8e3a08","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.1.2","_nodeVersion":"14.17.6","_npmVersion":"lerna/3.22.1/node@v14.17.6+x64 (linux)","dist":{"integrity":"sha512-wus5ytEwBCKtMgmuFoJ6CzF1cb4z/3MgXB9eEXxpM6U/F+rdBlcDuowwUmT3S6p0y25D/jcn+/RSBYlugRnMvA==","shasum":"0e9c499b6cc6f2221375a0ef0a99e3558adf0850","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.1.2.tgz","fileCount":99,"unpackedSize":722729,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDiaNt5CQMzTgNmM0DmWaLXhi1VBX1+GhieXttBwBAqogIhAImiMFer1Y5IMx9PKN+zLkPaNwNq/5uXiOaYmzCOwuRZ"}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.1.2_1636643261306_0.343050386118672"},"_hasShrinkwrap":false},"2.3.0-next.0":{"name":"gatsby-plugin-image","version":"2.3.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.3.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.3.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"f21bcd3e87c804ba77d8cc29f1ee1bd796992977","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.3.0-next.0","_nodeVersion":"14.17.6","_npmVersion":"lerna/3.22.1/node@v14.17.6+x64 (linux)","dist":{"integrity":"sha512-/q7CF/HJ+tRkVwQVXUHzfkHXb0kfPKuFDRxW519SAUmkrgIF8ikOgd2M1d9Obw2RJcFrFzbhnC3+8nDoKZmsdA==","shasum":"f5508b189b872d4e66116b29853c4c74da648857","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.3.0-next.0.tgz","fileCount":99,"unpackedSize":725143,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDi87flCASHto0cyo2m5gX6vC8jmXXuG2g6mNJI83vuGQIgIfRS0FUe/Zqf0hioS5xs+ceucxDAZeduyjBpD7HYT8I="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.3.0-next.0_1636969743336_0.1356873183268208"},"_hasShrinkwrap":false},"2.1.3":{"name":"gatsby-plugin-image","version":"2.1.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.12","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.3"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.1.3","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.1.3","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"87ca0dfe7590b533dfbdf4bc28068e8125b8a7fa","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.1.3","_nodeVersion":"14.17.6","_npmVersion":"lerna/3.22.1/node@v14.17.6+x64 (linux)","dist":{"integrity":"sha512-W58UIoa0BvSe0iRrxq7Dp4Du2f7WXXhwoI3Jv9JF5EVIMXOfBDDjHDv559DuKnsCIhK6WtKPHOVPpJx7+JOacQ==","shasum":"239e10fd521b410569991e9e030d072ae9b451ec","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.1.3.tgz","fileCount":99,"unpackedSize":722729,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhknuHCRA9TVsSAnZWagAAbLMP/0/ql6RvnRUBDjpLNqEU\nEW/GMJeeTG+Aw2cxkEKMzCPBNn1TyLliQHt/jB+SzbfJUeou3yZk5acRIWnz\nIVyT6KGVCFuKrMRA++hXSOJ7qVlnU77I/oFP7wDnypm5mCwgmZv1CytqbfOX\nklHYYioeFKEro3NKnDFkddS+ovh6pswW9DBQsJJWlZC105MFt3C9yONOP+oT\nZ5ct31Xci86g/AyK0t2wz4iy5P7bJFW7NZtKofpwYj88ijCmtUHyB+0QJWLO\niV8+04mxjDS8vx3pKWBHvvT+ALKoBJGF860C8xoQS+XmkvSMwpYfLZUXGoMU\nR68tKrqe2kD5I4LJfPWjvbwuKWQfBBQRCvrHprm5/73ad7vXLLgH3JEaSgVJ\nCPX2dvdDay1PAEMOqDnnysGx7FuYGSzjwsRgxVc9yzHhQEfEwiJ7lioWLls5\ncLtydGDaZEfPmi86wCnczVwRtCIoRjn0lhZm44oPx+O4tE3BYbb+evJxKRal\n/V0wLLB1kO/my1TIq8kR7idyik8yB1NBF2LEkEAl5yus17b45RFdhFy3N37H\n/4kcDGRKJmSGmEuQAofbt3qJkpUugIe9AcJPVkMPFFj4R0Ga/o5SHBq9HU1J\nw6CknQqwnjdzun/l2f6QKeN2F6jfAFT7eaLWy9SVhC7sS4FMypnibrEIpA9R\npeK3\r\n=qkbi\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC9tKb4fSBaU24Knk5qjVkl4A9bJRIgP4QkkMLg+u+aMQIhAOIlVQ0H7wYY8J/aEZ18cFQsR0mxUAJF8lHoj0+ERzeZ"}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.1.3_1636989831530_0.39945833686260346"},"_hasShrinkwrap":false},"2.2.0":{"name":"gatsby-plugin-image","version":"2.2.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.2.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.2.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"7ca9785a31b34ae3fcd1e1765c4851d313de3cec","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.2.0","_nodeVersion":"14.17.6","_npmVersion":"lerna/3.22.1/node@v14.17.6+x64 (linux)","dist":{"integrity":"sha512-XHBVPVcaiJ1OcZukdiwBYPUWO49cy2LkadWgwnIJElqoz8hhzXFTN4TzWVY/9jCmkD2tQnOe/1nKCZqXPzhEyg==","shasum":"149e22a94d874b999aa2b2fd17f279f0eb00e81a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.2.0.tgz","fileCount":99,"unpackedSize":725122,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhk+IlCRA9TVsSAnZWagAASCkP/ihq3xzZQY88f6kDG4I+\nfglZ5PxhUoPhKsCxfHRaPTJD8kCgb7Bo13pVmP5W7Wc/JXhnPWyCQNneWIme\nJNhRN+16ZREsv+LHL0/8o6jBGj7zwpKT9415RnfR01Lv0k57ROdFhh9ZJH8H\nIFMQ+qa8Tziod8wRhAE7vlPns2KrWoN4ocWodObUMWaWbQV9Y03Y38VjNCV1\nKtBn31zkcpQIDtOUNHLcHYUwWqHvotFwPXsRMfaNL+wPSEGbe8+cUuHsQ3RY\naZrIoKwBO5XjhrvobD/LV+sKM2JVjsRAkHr+Bq5LKUAxVBJYO28HPoMKyblm\nlwlC5HC4WsycNYInDjt2LtnaPoG2CKQ0NekBcme6tOA2VW7t/gL8bKxugw7o\n9MaNkkNK9IJC4edaLpSAz0fk9Ycz4u7tIywY3ATRmpsjxK09J8iJQawLC3yZ\npB36AP4Al71uVQ+owmiqggAuWSvpX4+rTACLiyCJoV85jFxZsn3fdkIIMuod\nZ0rrxG5H52/YaBUsQuXUnWmyqdWQ7gH7uXeo0YHZmcY8jah2cW7OPuvUPoBv\nsi/FypbTpWoEnXfhS1dYLak9JSD1NK923Ez54wg0YYz9Rh/gfvPzrQ7WD0Aj\nA4HWjQpmc7FGat3D8C3avTie6jgYR/SBAkENtwdZ2TpAFuH8ahn3Vzd79kuN\nPTLG\r\n=WISH\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDbnMmXnJORBx7gH4wuAW20Kf1N7BMDLwVgIipiWSDGZAIgHGu3n0kqByLXAc/fTodTYCb42t5jWNJ0Yr01aOxLc40="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.2.0_1637081636932_0.6154149750964089"},"_hasShrinkwrap":false},"2.3.0-next.1":{"name":"gatsby-plugin-image","version":"2.3.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.3.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.3.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"c1cbc0f13d0482be24e74472f81673e9bb74920d","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.3.0-next.1","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-utYNDE56dMiQ7/DhmpQulxh1QjZEJ9NNMPGeuGZ+eC4k5sZe76wsxxvSuVtPKlp6XRcLpMKks+UvUBkE+W76mQ==","shasum":"5f170e523212f9508d672e7d4475691150141f29","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.3.0-next.1.tgz","fileCount":99,"unpackedSize":728778,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhm46CCRA9TVsSAnZWagAABZIP/iAnn0aS20c4nWoBeNMM\nqG9U/jMHyW1rGyhQsySxEPdQLgTKvjtYZ7AVkC+jIzXc/EgaquhFJeSE68wp\nCwLW26mI6AmYecXDDcD0btMYtlYxEnpluM8eUY6o65wDXYELr8wpRdVtDlp/\nCcmK5rcT8FHo4A3TurDHWw3X986wVQiJRklEpKfmiNWiuKSLS6q/kJDLB6tX\ncu+QuayM41i3S8T3eiJUII4p4T4vXUffJnoSTX75Mi3B7sEyUYoGGmYQ79cF\nrmJRjyvAwIJLK3FfZ01RJrKLuL5Y4i54TmZyfKc9HC8A/Q9/8Ped3buPTpTB\nBnvdVzbkjS6EHSEzxheY6U6rC1+S/WcWgB/0QJwT13zrx0ij7eevR9oPz7An\nh6jY5XG052+YbNdLB7BFJWxQDihUekEI2KiDUbrxbIHwuFGJ+i3hOXdaKBqx\nCucsnM0oIdSlD0UKSKB4UP0Njxp6qWQNRyJtdC/dItA8Uc1mcSPIbYR3oU2X\ncmqspSIm96X2tOlMhDLUsP9grnYYu8LnzHc6DdjjSV881yIJfM4dJEGzPECi\n7fyX8jl4jLyFMUEVi84Ye4RymjOh8STXdg0FwOl/48InysybXRIdbXz5aL2e\nOGArGXuSnJdhusYsDQFTCggMhyWu+Ma/PqdmZG1RZ+vdlEk2x/clGZeoxo/E\nLicx\r\n=xA/o\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCUWLNLTGXn+hqGY7ShNAtMYwA2N62SFsejIxQv/kSuvAIhAJ79Tbc58QPdG96cHU3oauMkaCgy9cG5K+uUsWzU3Eyb"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"vladar","email":"vladimir.razuvaev@gmail.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.3.0-next.1_1637584514129_0.5340082349559807"},"_hasShrinkwrap":false},"2.4.0-next.0":{"name":"gatsby-plugin-image","version":"2.4.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.4.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.4.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"8922762d4fa971cb930f100d57d4df9426ff3a12","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.4.0-next.0","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-Qh/6knl+4Du1axLdj4eHstubnBlsaCRZoBK0ZEJ6Q61TbJmst2ItpMNaYUqK0/wowPypZyhyIDeVIMjki1wl5g==","shasum":"718b8ce347df3e6fcd0eee74298a428bd35c0475","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.4.0-next.0.tgz","fileCount":99,"unpackedSize":728778,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhph/wCRA9TVsSAnZWagAAwCsP/1QAfOxch1gTcBr0eIeq\n46P17ajrOsr0WI3NK8sTwFJgiL30AaYmyqVCXsAExKVONx9VziumlX/xisBN\nHt2ukhUeh/n/Mlg0G+X8Qc9VYI+SVgYXZTCthFk310DGKXfd+c3t4obJScA4\nB4yJdvqDfJe+SclAlMu5axrW//c45FSs55Z68nIFXzRYp3V+F1P9xioXEgLr\npvmx6+wl/ITkAE0zlxV1P+1+hGNPkh7NzbR160t7u41dcTEoa+qkwItdg7g8\nar63RIMHMhQPzGW24BNWfi7PS9NmiNL/7wa5rnJhtWbKk2hQxb0AcPmhiuxW\n/KdNWbh4jQFDltpr1J5SjanwwyvxJT4iBsX2IGMbxYPpYEIKHmuEWZIMlL13\nbXIPvzh0HsgdXeagq949/xROKX5Y11kFGM3WFIDdqpBK3cJD4GTu8UJT4zgT\nKeWfBbIPIEOtqSinfjotphjRvSsAbyobZ/8/n1wI5vOCftbWLfO88PhtrnSF\nqhwbYULno2jOP0W42Mot2EstabrwVTw7JyGE4+H7M/Wih+DZPoEctbmSG5x8\nOYEVHYowsJg8zFdAAo8lmbAopWmsDvLLWgiy2y9vkt/S9J3x3jWUA+ycna/p\ngvTqJtKkB+eQqCX99Mg+gIYQ4H/guxC12kfs7JofkjRT5Qk5SlrztZIk4w7p\nSbaT\r\n=mTBT\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGQU1OObMFbzSbyfGpUDScefxq0UiuZZx7pnt81+eShTAiEAwKgZFt2deGypcpYQNOALna2Y8rtCT8WwvqO+K03LRYs="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.4.0-next.0_1638277104071_0.5655359948526875"},"_hasShrinkwrap":false},"2.3.0":{"name":"gatsby-plugin-image","version":"2.3.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.4.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.3.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.0","fs-extra":"^10.0.0","gatsby-core-utils":"^3.3.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"864751dd815c57f4122bc7aa12e17aac53ec3ba0","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.3.0","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-oxG+oZ1kYboX/75jOxHZeV6Xzo5xHZ/8KUQpni58nI1+xaxZRFBthXg1SetSs8nWRsXR5Y+bq8FAf0R0iGjySg==","shasum":"126f7a0666016c8879b97246ce4f4e1dd62e3c47","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.3.0.tgz","fileCount":99,"unpackedSize":729003,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhp3BeCRA9TVsSAnZWagAA1jkQAIO13venC0+UrfvT4pRt\nk6J5L/WMQrn4gQlMiOIH49VlazkOjlak/oIyju89MZ5tp4OiHHO3RLt1XzlU\n3TAPBae+u/kMU6cinBBIowedazt1dipk7ohxjYWeztfOyporbvu/BVwVkR6m\n5Dm+dTWfxFT1KF4IrZ87LME+SSh7JBUyscjqoWJ5F+DyXPMbwMQRM8SsMI5k\nDouF37Jt7ZFwp7vzZ7/ESHNMtx8qrXmLsyXFik/8uyDPqxInWBk5pd6at99o\n2psTw/UQ+sSPBip325rPpIqX1oJj+/JeWwfwgqoT6ASGQOPOWxPs6CPFjnOv\nEROF9N1RKvTRd6PQmL7ZkLmaPlPRhJMCGjisrjxYXjnNJXzCyQ4KSgCNy6ul\nkKL0vucmkNfkgHoHSjHa3cM4Sct30v1hWmnwjCZok5+Sgfgmm19HBRQ2d9hH\nOTOtKJaESjTe5bMkOSBU/5OAw3ve2nvt6Ndc4HefMWNp+E7a1jIvyuvHPe/y\n8xmRiNufeAFGfc6BT2ODy0li2HFDGMOz8jwm6+ujohTMpleJlWDHWhKeKOC0\nKF+w+MYOmS0Y/C5yBQ/UX/JiIrp5aEoPSJeYT+YM7TuUJY0eR++gGaZ/jfm9\n6ngGcpCiliRI+HaMM1Ew5+tDb0K2AbJibZrqVB2LKeHY3rmh/CycZ+pgvrla\nmZ6i\r\n=80u6\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCZY548VumEFQK+fri7HICjBVmt5yGTXwR/JTmJE5wKdAIhAKiwV4JS158OJX56VVZqIQSLkRHb/jw3/Y067UKTk2b+"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"sidharthachatterjee","email":"me@sidharthachatterjee.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.3.0_1638363230624_0.10008678513342417"},"_hasShrinkwrap":false},"2.4.0-next.1":{"name":"gatsby-plugin-image","version":"2.4.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.4.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.4.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"6b28b69d8383ccdb951c81283a77e19d2f14ddb9","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.4.0-next.1","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-h1EnGNdtARzfizlXlzCy7KPZ/nOUNC8g3TgIaHRqFplC3SF71sKIBwN8j2XWYtdp161UGn7HbdOEffmSIwA5+A==","shasum":"47898723c7df3a06d5436dcc9d82ddf4dda71502","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.4.0-next.1.tgz","fileCount":99,"unpackedSize":726571,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhscG2CRA9TVsSAnZWagAADAsP/ivB2Gbqs1EBB8tAHORZ\nc++HZtUTeVL3+qk0Xtmwkwjs2x6l+9TmXNsxWw5MCtAn3aK+GcAFzFGgi6cM\nKfIKbn2wFvJ1tnt0pRp3h99QHp9F3UHXGEGCLSFz92JJLnPRXIKlBj/OwFRk\nT6E+tMMHN46uPLK0xOq+MO2tJN4QBe3imKRJsp7s0FWhkEcye4ateahYWoEG\n2iIIvDzmv0K7Z9yf+FoI5WZdsNN9DWr5SSytRxbD2AzUrm42uDVSzD7yJaAE\neVrXQFGYuQju7mdATQhem36yQnIe8LvrUFspkZh/Ti6osrjjjMaSa3rqVVJY\nUsbyxYhQ3Xj8mrqF/FWvhREDl6Yoi5XPMAtiBn7a9o6Qf/NIO6hGskPzomG5\nphfus0nnZKrp9MdXQWoQvH5on2D/TOC3FTgttFfpvzY8+9X/DoTBHrd2dTs3\nNWNNVDF+4GjAxAE1HR2pY63h2YWjHCFwjLO0G1qYX7nQOkhCOGt35XD4dEuU\nnyBO9zKiQ79j/wLE9m+ggShC0z/kLYVmNElj/TWDuInV1jeWK2TYwliLW/Cv\ncFa94PjnlKbavdX11Y0x+9iIjh/n9VaJgGTYwxFXw4N9va21/t6k5XtATpif\ntIoYXzim4dDy4h17teBRniObZfYCQGvaI7oQqYWCLdkFYX/s5J77QwNmp5OU\nx+Fd\r\n=ziei\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC7Swhsu8QYNhnaLx9GPHotHM3yt2mvvyX99QERzQn/FQIgOkK8nH1aYDDCF7L4tceugBzaQh6xBXQiPCmRvOrxHyU="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.4.0-next.1_1639039414022_0.39819233713259305"},"_hasShrinkwrap":false},"2.5.0-next.0":{"name":"gatsby-plugin-image","version":"2.5.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.5.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.5.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"fb530ecccd45037b664525c5a7d18ea13f64a540","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.5.0-next.0","_nodeVersion":"17.2.0","_npmVersion":"lerna/3.22.1/node@v17.2.0+arm64 (darwin)","dist":{"integrity":"sha512-lJHbvLQaBes9CkMgCG8YXEUQfozy2cKwYpt4WQUu0Diyt74advBmP7fIgwmVYgMAgpQyC1xN1evYO2rAPCROxA==","shasum":"42f61e172436da631d5904c63de7c9fbd536009d","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.5.0-next.0.tgz","fileCount":99,"unpackedSize":726571,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhsgKsCRA9TVsSAnZWagAABEcP+waHJqj9rHLaOi5r33KK\nm2QXKQzXVwYkZWkm8SeZtlYBWvgvEj2e9LoYwa0TClslrM9UEguGWcVkWv1j\nVfdvPH53gSD+HqSTaFV7wbErMImMV5ywvDVjKZAY/PvWQ4llqPYh+iyRBtRy\n7pHLmCXLQ0zCp+7WTtLsGN35l04v21n/0wie529F2aq7Be5NECeZLx4eCOzF\nx5ymBvhu79WPhDXDNGVJ39tOz0El9SUHj9hUngXB32IWHM5UBgKdH31IroTO\n9QRH6iFzUlii0K8zeOBtoa/KUZWvHfRrQ5A6BHRBFLUu3HseJFD/83sTQWaK\nweQuY+1VhaGJNMX1q7RZWt6pG3jB264EAQCsbJzSOeMMs/Y7O2PXTdB1ovVm\nF+nSgsw/kPHOEkV1n4jg2K7EnXZncaUiS0U6Bm/DwhKJ6rE1OQbFWF6bdYN2\nuIJysjICcFsShF0Ex2FKILaCpXKXRAoRjbACuyXJu8olq+2kOOhmwIS97+NT\nv+y6qGCmMhdXyuylzqGETnQa0qoQ2KdraEvQ5Yw1WhTG7x3OqUTBa5zH4mCE\nNMxVlmNCyhLRoIrBrQYslS8dK2EhpQvnk7LDv4yM0CLv8adxYqYJ/+b6mRmF\n4a8m4CQSEVBygiYRkoc9GQR0A3GM5pgUTk0AZLFQ4eRfjKBpKUDBV/n4HymU\nFAEq\r\n=304U\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAEl6/LquMmcCSCZ44dalcnVxzFREzWLVQfES4RXgCzCAiEA8fBzzCo+Yy3SDoU7kdpoGhxNUXOUWIgVvklCJl19omQ="}]},"_npmUser":{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},"directories":{},"maintainers":[{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.5.0-next.0_1639056043946_0.9406031599303852"},"_hasShrinkwrap":false},"2.4.0":{"name":"gatsby-plugin-image","version":"2.4.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.4.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.4.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"c09587abec36640b8d236455bc28bd430c7e112e","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.4.0","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-PKhbefaamdahm1ysKO1d54vnzmIsjR+/qtyFnZumGu8E7O9lN5is0RlXgpNCvsckL+XzcqyMljytt/bYf8L5WA==","shasum":"fd960393043e856eb70d998dc34ad96a738162a8","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.4.0.tgz","fileCount":99,"unpackedSize":726550,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhuJ55CRA9TVsSAnZWagAAIfsQAJaPbzOSLbif9FbdwGa/\n/UQ4KU452egcW4tOrhscFE9rAwshBWxSbS3bqsblSs/6Ed3CnW8D4pgrGKJX\nnyPb4d15tNjbQZQBIAtMKy8aDaPujQQFpuhs24GuVyG8KsHtK5g7PMlzIW/i\nZxFbLkMubjiNxaa6T323MxtC+YIWfAvgqeKKY1cTmW90nMpSl9K2j1MNBvap\n3EQOMmPOdDiC0SnjCW/Q4ykc8Ef4H2RjB6hZ9RbyfCDhQCmICDjtm10RKaS6\nv7/nDulRgOJElpahjvaTIN8Fp5umdC6B+ySfPEgCPUAIbgX618tPYWlbvM3q\nowlJbsm+MGLren54I/WCehGDRAREv26TxuBZmmEXDxzSoH2IHzSgKRaJoUTq\nehCMszQLEdE+PGvaTRuQvEoC3wGNP7qEEcg6iUITP1/toKdyDVHUmE8f6akY\nNMxxsfrBWaOkpRBm6uJWUXYL+hlBEJs4XyouGOFcZQOpCbloa31UD5o0W6Hc\nblHefDxCF6qaka5xodn2j0k9q4O3YXN81lzp0yup651VsxTUfQMcp7W3Nfdg\n+IG+3aVVxyOEx4nDlm4ORYtwEETSaMLR0L7L+V2huaeC+nF+8A9agcMdsH+3\nAb4qC7RgyGnCPAkTGS+fR5r84QykP9jCo9xvIWz/WN62ftrl4NcAht8Z7D4E\nlqZ1\r\n=O3rt\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICYyIG76BmkiUcuxe3Xjkj5s1CXMa9FKbWlXGNduMTQTAiB8lqJ4QevZEUjwtIGjf0aXl9Uze5uNMiTZRknmCOcbcA=="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.4.0_1639489144856_0.8308454410185224"},"_hasShrinkwrap":false},"2.5.0-next.1":{"name":"gatsby-plugin-image","version":"2.5.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.5.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.5.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"bf5fc96ddb64c7416bd4c84c6bef6f8cbc27d496","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.5.0-next.1","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-c4Kn3wMkA/+iMzxiLdagR2PcrZPJrpPqRLnzS33zAiZPFLugHQCVfuUFRgW3BED5y9SbZoHArd6EIe83rmBOng==","shasum":"d298477e0fa6109d5a53332eec5bb533bfb3a10d","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.5.0-next.1.tgz","fileCount":99,"unpackedSize":727223,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhugbhCRA9TVsSAnZWagAAsf4P/3iMCyzffKPD0qHmxn4u\nOAGB81/u77VSMF1a/k0katQ/2RtHtr9BXUJ0SVoBx8JH1DG8K8TpsJq0aXVd\nhYmckbAnB+9Rna93/QU5dBWqZmmxD9XqwALI61IV+dytbtfuFVGUaw14g0uW\nZqPDzx7czXJuLiOsTzKXL80M0KAL4RfePBlSV6pnxwfd0DrLxUa7QjxGyUSJ\nxTa/MC1gViiBsluvkY+w7NuMBKepZjfXH3LaO47Fk0PTmn0VvHYEI5Ia/mhh\nIHanWs5mBLRLlQA9LEe1J1a02vaOZo/UpwM1u5X97EMrpczwjUsJokHxbmBA\nijsb6WvY3yLqpbUV0YN/9OUDZJf3BWbPu0O5AntsGvvI4XwCGwJ+O8VPjBYb\nPmZ0N78ralCYN7jvlDzctluSe1NSmnzx71ZYFOueiDq2ylXLb8FzwqFS0IjJ\ntW3KDCrrjdce7/AuqSpDz4OqYXFE7i9TsHgW1Jh1Nc2R4wpOkX+6Ryy6/pnD\nLTIhT0DRmOenXbURQQBE0Z2dpWgrs4lU9VAoVUPUDezoBDOIbLoaugvHaO6k\n9jRnwiJCe+ZfeHfMcPb+wdDC1p4gLI2k/eQ2yO+nixd3XfmTMtuUnS11m3hZ\njDD5OJWwroGE3S/qzmY3MxJ4tMxIECU48qr0hmeMRpBVYngxBdLcqio2rS06\nQ9Kd\r\n=Skw6\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFj/WvlTaujhHj+QKg3V4olmudDzp/kB6gdtC1wjNzO3AiEA+ADdiMgZJp59wS4hDgd55z7+B9AJsDR3sjAjBWpE13I="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.5.0-next.1_1639581409691_0.6994509588918276"},"_hasShrinkwrap":false},"2.5.0-next.2":{"name":"gatsby-plugin-image","version":"2.5.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.5.0-next.2","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.5.0-next.2","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"b9f7749f36ace526bf0ba05b80731091cc0f2ceb","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.5.0-next.2","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-HctyGwh92EQcgM8YsIlRGG+ppNLnpm8QqFGNIB4hKkggbpHfgLBDIwPOq9JyJGuGgMS7qLvct6f0LUaTf1JmsA==","shasum":"4bb2d39aad68e5d590bd6ed3d440cc2fad4ac786","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.5.0-next.2.tgz","fileCount":99,"unpackedSize":730056,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhw0ajCRA9TVsSAnZWagAAlJgP/RKrTV5vPYU6swyrIf+Z\nOzAGxB7rZJi/xsqjDaFETtUylq9g65BIFJd2o/7yhOawr8sGARt8ky+kz0Po\nCRusm75+DHSSq8gd0Gk94ueByxeYh54QCSj5Rw8VJ7eFnueD2aIFklX6ERJX\nlZj8Styk83wTPgM2WxRL5C+MrJItmql3SvJjEd58T/FVFhsM7zvtKc1jukJa\n0ur492YA/7RSisbKLMsgPrMjYee7rCIhciRtd4rXQkSYBoqD7Ua45aPfRqtd\nHO6jSBBwY+x7wViWH8IUuFIb+Nl4nYa4JJpyJqbKXt1minwejHphXtDWp9zR\nV4vJJDM7u31NJdzLUcQaGNVJaddI3sh67h/3xUyeP+vWKvRDxUZOS7EA+Q0M\n2Gfi2BEznL4e30Bug2UaSkz7fNBtHoSyGHIdhi8vsjhadaxM+mXmeLKhfmpG\nnKSdxhph+/jRnWXNpPxU5TTTlvy8IXiJuB4Fxr6XWQHqdwAykERXBzvk1Wot\n1jnguO/9HEGQkaThNS2o8cKNsMMru+odizfAbFTUiLSdTqxq+8e+bccEMAeW\n+Kliw2sePdAy2JlO2vpgeODXvYrQX7iF/7llxUp9T2r/1UgTMuG1+1FVev25\nrcf47/JYerL9VG88sYntOOW/mdxaf5rMRLmg3s/vWmUEn6ABB9tbQU/5lELf\nDNvK\r\n=mg0r\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCCqEeWL4dQ/M3VCFkUuWI1+jmI/SHur2ykGyYCuf+DpAIgRPWrwA2qUvi5mBhsYcOxdde1MxadBPRUufWDlbZMtuY="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.5.0-next.2_1640187555259_0.23651588865239215"},"_hasShrinkwrap":false},"2.5.0-next.3":{"name":"gatsby-plugin-image","version":"2.5.0-next.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.5.0-next.3","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.5.0-next.3","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"6ffe0afd15a4f4b327a108399f14183f337eab97","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.5.0-next.3","_nodeVersion":"14.17.6","_npmVersion":"lerna/3.22.1/node@v14.17.6+x64 (darwin)","dist":{"integrity":"sha512-ibWnVIjIl+yNFZCbQtHqVtwGGUg2ioclyc+KrsXlxz7yQE8ygnKtO+BW5zeuBfT/IhaWxkgcoujDtTxaaGHVPQ==","shasum":"f3bb0f48fc3756b65f7786ef8c759dd5cedff780","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.5.0-next.3.tgz","fileCount":99,"unpackedSize":727223,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh1DQDCRA9TVsSAnZWagAAA1IP/1yYGz7KYv0lZYxBLzNA\nekDXa0WtnI+MOB1T/dKCLZh4dYAAEBbf++uUjy2jrSBgsMD+OQpzVmKLlO7g\nKIKkvlm1L/wxIfElQw3K31fAuhitbEY3WZ4NNNOgSCf29Hxo8CEoyVtOTtnN\nWpaUy0rvQLjChdIf1m3lpbz300bfMcaVC+/cJ4xBbucMo7gCqZBuCMQX2Kdx\n+fQTj3MzT49l3jB89NDYuW2zLQ1Xm3eGkdk+Loq29F5z8bzYxgCOsnrV8+9R\nl8qlG9oQAFx9Xw3nN1MEhY2kW6EKfPudT4Yn0bwiC/igGveQ3VtkedqTUrgC\n9ByGs8iiP1EgRmijgT1YPCoo4qy9nPplt7FePkGLnd9r26kLbGsGvwDDR2J7\nXI8dktsLvoaVA1QYAVLYhOaCYGvXVUD6WzbXEJeLj6dk5A+kJ0cbYshfbj4g\ndBZtYL17hKBJc5tk0A/ijNORGWw6fOqjek9sPxjSUIn1YiDd3HW0rPUzwzde\n7US2qMhJySmz4FI4TTVMDPHoHSShPgMsuZ+75VNBef+Myq6DYMKwEnBPdVF3\nZfZKo/GJ5BiGTcAJBYa+RcsRRg26AM3IINXjGWoeKMONNZNeLRDkXbsyZMNT\nc6dBKqXuv5Ibgyb+Hh5YsDSDsL0fWioD8whUo1uzC97608fnR9F6U6E2bauS\nT4G7\r\n=8Fmg\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGtsV0uaBm+o6WC1dHRV+nGrBwimZhdl85zzDJ7CNUGSAiB6iM2XbGPdWG15RGHwWxT7xFdVSLGBnkxl0HIKtOQOdw=="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.5.0-next.3_1641296898877_0.390341738851657"},"_hasShrinkwrap":false},"2.6.0-next.0":{"name":"gatsby-plugin-image","version":"2.6.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.6.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.6.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"b95120b3d59a4135a7aafc1b1ae49a5b68dbb9a8","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.6.0-next.0","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-lyq33R+0RWyUCR5/r2Pe3HjHtFEzAjCFbWLPPVQSDrJJhRsvwNWDkO6aKH1iqTvQ1Ctv7pyAiYD39rUK/2IOxQ==","shasum":"d60d95a581811cfa1a8726e305ebc1ac79ec9b3b","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.6.0-next.0.tgz","fileCount":99,"unpackedSize":727223,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh1xRqCRA9TVsSAnZWagAAQk4QAISR3zUaG0KCqLVIcyeZ\nDTtzQanOrDWWDMfk/JZ5LGiJ6Jqiv0C3ywdrix1SIXeV4dx/8Tz0ZFcXEqZW\njXuON3sKYAQJqbrbB1WAwiXwTkbVMl6L2vKx8cfid2UJLu5Wy9Sw+ejWO1dF\nAZBnqjhmCMnJHGiqivoLbQVCzE6WaukS1fvfay3AHmW5/gD8ZifuR0Dv5Bo8\nKsB/g8tSQRqZySrjWTtDVUcr4zsQLjE2tRy20dmCt+9AJ5t/rT6CKXx+p8/T\nK69RsaE9QMvWy0rL5dJFOrA5VEQTwT1KhFLu/acSCEiw6Jek3VSoyXD8P8IO\ns2HukL1lhFYDq88bYfG47pkPN3l/Tm3XVZ2Hy42gOiEarfys7fISYzB0EYNT\n4WTheymD8Rz8FJzFeIZ2TKuivsAjVEsJLVyEvQrpOyPxr5amnCJUkKSc3Rz9\nyGNW73NhF7zc0dbfeMZS4j3qHHiPcEa5qDOZuhbdbZ4zxJV++h0KAjN/BEog\nsTnE+KxGIUCCKqOEztmPCtjWo9hak2F+tDgqial9EyDB6diD5IlVm1aV8XSP\n5xBxo//hR7p3207Nt//8QWFITvmWE9jadOrozbxyD/hHQSW7kTW+0ybPp1uw\nC+PiBRdKNArAj77unNs0zkkHfnyC5P2qVucVAmSHh9PesGyHDph3ysewIe4a\nbyyr\r\n=FdvB\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICO3Pw0qeS7QSTWXkRsz61RfOnI6lrgJv2hzV79C/46mAiAOaMu4akk6knvcSFKlb3q34UUTlOskW/+1odOkfwA8zA=="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.6.0-next.0_1641485417947_0.3629332049799112"},"_hasShrinkwrap":false},"2.5.0":{"name":"gatsby-plugin-image","version":"2.5.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.5.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.5.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"93c356e53f157b34b825ce3d1951fefc25dde433","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.5.0","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-EaL/82by1G0WrSMcGvj24bwes+EbQZSeeMCL8tg7Q6t/69YhdljVRLsdbGU0+1rQ49e+kc0Sa7VdeRvnJv9dew==","shasum":"59a5aa4336789aeef498b9972b9bcc2d820a5bad","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.5.0.tgz","fileCount":99,"unpackedSize":727202,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh3a56CRA9TVsSAnZWagAAL44P/iA2kZ0tSb85vNHH4CM0\nlV/RoBFqJh4oLgoM81ytNvBMsXij+SCjrNgB5MH4ft7Ub64Bz3ZMtyoq/073\nOTrNLo5e2YdMzF5NuCHJ3Kg9sWXF2eNGuNmXZzKyJiymrwIubhZEYV+YqfkZ\nfByxTWwiBoRhrcPdLIB1hR5iW0jr65/PVljIxXFChFxufuQo2R2P+FyCBYi5\nNYkc/PqNYtCmFqxs/0Hb54U//q5vrOnehA93uHCqsAYtjwjbbTvzg5yCYu2H\ndUyOpv9/A89Segwbyf9eE/jEg1puL1kM3VPkh1PzIQDt68/80L9L88PGqmTw\ntLrz0BjYLBTWXSzsJqW9gvcgj9PivGInJJqA6yIJgyBnFFdNUavXzYaPkw45\nELwve8J6mNGqLSa6L/WqfLQ820431EOREmpfnTGXi6sbkiKacadOt6NxvPv5\n0Ipz1T7Fr05+LCnF5Hqf2InQliAPTvGWhVPZBYK8FH2mmyt7mSHDezRnWch3\nCmTNLkR7btir8Nd/3NKKv9CpKWl6ZESmh+02RV7gseHXzlMSxIL0YQeyCJZD\nPtHgGxdptHtmhCMBjMwlsyFtY/GhSuS7wZ+8EFodI4WCYBopiibJ+CECJrDK\nk0dbphPrHgmwBQXXKTCQONf6/rkOJyhJj846C6ZWyCHvcnxoCaOYJpN0b+Z+\nWeN+\r\n=lrpC\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGfnWwdkHUDIUFBlupFqncCgkT2HZ3GUXdRzXLKXRoE+AiEAsr2rYd3twLS0EvNpzidJPstOoRdZCzz2E9CtY1RLH58="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.5.0_1641918073999_0.4410487398674783"},"_hasShrinkwrap":false},"2.5.1":{"name":"gatsby-plugin-image","version":"2.5.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.5.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.5.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"dc6f9b8a55a6f2aad4aa2f84f929c5da0ea0bef9","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.5.1","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-ueJ4hWO5j0ERiaqGl4WExivwLCI5Zydo3dYsGB+mgU8cALoOv+dqoj6lIVX/fJKiolJMg/P/7DSwAbeAq74TYw==","shasum":"6828d0b827f9efc6202a4b53f6802dfe704ffcce","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.5.1.tgz","fileCount":99,"unpackedSize":727202,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh3uJ0CRA9TVsSAnZWagAAoFkP/0KeEuOMNQmH4rosb5wi\nyWci/hPDxzOCOgqfL2yPxYpHZna5IYsLnZvLVmUAq6YLY3/be4xYZq9eLK7S\nI0qTkewfmAG5vb8El5iE8aMYrWdNTJwloDpsYK8fy2eVJIWtabRr9RFyLDOk\nEPpILGQkHTuKpkUNS48F+JappZKv1WmNInKz/BnunyOU3bhw0g3Re9fH41BX\n1WtTOqbrCJVfm3VvVS1BtOyj5SoKnbAmhF3jFALgiWFQg5Zre/6q37jj7S96\nLQZ1tydhG24S++6RpV4hybdaq3kd+TdN/Oimw1pQdfwoeoUDDhVBooLYH+iE\nbZgNCWjN4jvSdxiff/n+NJTCPCkpxgbHQNXkr+iOXdsGog/mec133WQwLU9L\n3+Lc/jEn4FaVJyWfsPQfH1UMjb38uOF2/nilWRbwHVVTpP+hg0kFaXibH3d2\npadsRwD/3XOLwuWEaNUnKBtWCQtTmr0ALWlym3Dl7kn3/LDVfXxdJJZ807XA\n13U8MwyKIu5XD1l9juKxyWmSv9eigaEe/z52pNsEGdZeyzDRoM6CnRvzvRNZ\nqpma0cUKj37h8O9J/ZEX7u8OxoxaBN6xy5dT8cDgT8w42qb9giM9ItTEpPCo\nbOsOs0gxOyT0Ua54p1v82BiX8AdvFTZsEyoKr18ThtoQ9PnBOXjgBlKYGdOq\nd9gO\r\n=Akcr\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDreFzRDPR9eKPh978aFUedLT6oc0+LZQlIy1kJadMUHAIhAJjgZdxkX6ZarpRm4Zfo5GDP1IWSmx3k2RrN7heep80u"}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.5.1_1641996916134_0.4365033227871431"},"_hasShrinkwrap":false},"2.6.0-next.1":{"name":"gatsby-plugin-image","version":"2.6.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.6.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.6.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"05f971929f68eccc14686ef556f7f577e3771c0d","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.6.0-next.1","_nodeVersion":"14.15.3","_npmVersion":"lerna/3.22.1/node@v14.15.3+x64 (darwin)","dist":{"integrity":"sha512-ODZLtieIIE+daqBSrqNhiU6PCEyQFGlG7fTlWgKq1C/N7lYRyUp+P43/BVc1A1fAahsu5qxs8vJyOi/9qZx5yg==","shasum":"2e982369390f001523b758ca373f18d3f3cce002","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.6.0-next.1.tgz","fileCount":99,"unpackedSize":727993,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh3+8XCRA9TVsSAnZWagAAkXsP/jI0VO8Emwmyn7FzHj0/\nzjWVA6gMJs/iotfDi/+XuCSDcLPrQDtUTQCfORvENTQ9iRJMzOt0BGm1nTxt\nxmUhSc//YqqHhFT+7IcmiqadRoCkEsv8derXQcEOsUgmsdj2ot36wxn7nJsJ\nFgv+0HmGoOCIMksws/RzY9RNTRo/Bj+E4blOLZaQywzCy4B4n2X+hWbQNE2o\n/Pxi/iY/Kvtsu4ShMtP9XPCBWoSHkAtdzrGAteEevBBg876fwgxM1kPq6q99\nNz4zL0kLTfyZqWhq//EA6vZ87zLhAeEjptvkrxsVW9T0VTo3H7Y2QFu4FcVC\nWu88YNSmP0gAfcCKuph4CV67VL4EMA0cgnRJvuMi4/vaUrfjqRj33HsZALhl\nKn1Jn0h/24IJztVX3X2eS2zs2Jfs3hqpZXItpyw9Zs/8dGt385uONHmOU6X8\n0h8mJSSalNpwjZfHF381qiGPbQhSTVu+B02TnkXmEDVQo8JMsjD4U8gbOn4N\nythsJ9jFjmSyREFz3hzbEeHSb+ovOqlStKHZaAilMOdS9JXrPSwgRIJM/7rz\n9t7JDsHmfo1PwfXdmoZCTP6ip7RWLreUlTvbJ4EeVd0TMnLQ0DoV4tl239/l\nx93BZKi0AIAAAp0XwidHl58x5xML8DIXK95lcFpmKdlmoYrhjKKpVu1Bs1/m\nSkwt\r\n=uHWQ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCID4dmGc5+oUtXHmA0UNvOrCFOFHWu1XJcjvOHY+g9uxxAiEAzbWbHfnb4vBVa9ZUirTiefvlHaCK+W3p2NlGc/gowb4="}]},"_npmUser":{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},"directories":{},"maintainers":[{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.6.0-next.1_1642065687794_0.37206371042632735"},"_hasShrinkwrap":false},"2.5.2":{"name":"gatsby-plugin-image","version":"2.5.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.5.2","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.5.2","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"c493ee721c16b5101134bcd98fdf4f6f0e40cede","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.5.2","_nodeVersion":"16.13.1","_npmVersion":"lerna/3.22.1/node@v16.13.1+arm64 (darwin)","dist":{"integrity":"sha512-cytI8FNjMoTf/MraMZS9TL0mdDsN7Sh3hYL9GZeLIOTC8n8LE6wK49rDHDrQeq5S6ojk3iEPCgcxWrzQvnbxWQ==","shasum":"bdd5af8a137a1a425a87b17c3dd908cfccea83e7","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.5.2.tgz","fileCount":99,"unpackedSize":727202,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh5V8NCRA9TVsSAnZWagAAAC4P/2GTT8hG5+gyzZIdqADZ\njHHYywSZrDBkdqTWgqRTr5/YzRYzB0CMJGmCCop61LClZP4LD1N4RmHMV0q9\nqhTLlKxuzuhBG/TJ55Trxrjso/atv74B984SvwsqbQ5voN//UmvBSvmGVuWy\nQCgL1eQ3VNR2WtVtXvnmzSKZ/PoH+wj1tkcwQ1mbOFeWzOWI+ODB7db8pUsf\nRMGsEBT8ld/KjDEe73u+uNTM+n6peX0NLP3Mu6jMO7fUnywXWMumbSMMJV2C\nDHMEZ8InrfW+7plVcbt0mcvF5KSBHKsCE2wHUPVPEm5D7kMumTTff9KXvUND\nLJVvvDNMbXDB2AyVZAFDEz6YPgxHB8CUNHKvzHqOZ0d0a19kud/7nakWLr4y\nzg9nD0m5uHbgzYX+UY8sa9UP54SmQHGLxf+anKOUifhuQ8y672U7UfYUpg6Z\nsS5uGmDOLy8C8zy/DSmASUF1j5dS7qPBZhqPEs2ajEpa9L0E27fnzpldP61B\nc0drD5bXxxt7FjO+tvs/JdD6RDgKBXmZPNjRKwKHTy3xbzX2KgGH6LKxxqVy\nWhThgwY6ycF7eViltGHF/OYS9TK2KAbJ8sNHD11672k+9Bm05svH2ocHC7cz\nBoqvN5SG0qvcFdD39xyA8Gpc42ZTEMO/aIBOR9n3w9Aq+DfGwf9hA/Z1nPPK\nOkDW\r\n=bIgZ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCaafIIFzDqZzqWMuTt8eKWZoQDlAgkQcXGFYuio8wMJAIhAO6/pFBMjgWsuyaih/XeDcyJXvGEfQV51OOnXSZNiMfj"}]},"_npmUser":{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.5.2_1642422029363_0.582520957206691"},"_hasShrinkwrap":false},"2.6.0-next.2":{"name":"gatsby-plugin-image","version":"2.6.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.6.0-next.2","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.6.0-next.2","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"bb85cef91b9443c26a668888b374a89541beff77","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.6.0-next.2","_nodeVersion":"16.13.2","_npmVersion":"lerna/3.22.1/node@v16.13.2+x64 (linux)","dist":{"integrity":"sha512-P2URaomeRQaHcZ7XzxZqq87Q1/y0JBMwjwFyQSnQdZmXhLb4YXLQtvXMDO8EVs1aVAELBXX85QYZ8NAaUtDbXA==","shasum":"453085cf2543957279414196a4d90135dce9a590","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.6.0-next.2.tgz","fileCount":99,"unpackedSize":728179,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh6GftCRA9TVsSAnZWagAAp+cQAJH6cPwMv5/DocRYIwp6\nCBHGmVlFnF9S+Zy/BhuiRKitspDQiIjEBha4WPUk/dlk+kya4QHNniq+pTP0\nQ2/GZcOwHfShoVCdDyszODL2S5UMi9q7eSXk/ZVVS/KRHz2gCzd7uEINaiSA\nxGpAYANeEXityg2PuM5ryL2VUxdwesGkcOKMxnbIzgZ2PuRuhk1hpxFDdns8\npRHlZpCPSSQTX5nt8aUvngWX5Xut/eJY3vc4XZ1lqmOTM6xpE71b3bzLc2sF\nfFBVLXKLQmDifnlWXXnrWeZJkZouAMIsQv/Yd7L9hdQKpn2kPKk2IEf1H4uE\nttbXWsaaDjGrDGMrpIR9GijeluU1snXAmsac5J4UGb2ypyyGtBy66/5zUAHG\niYsqi+xFd3w+ZIQ71bO39DT8vkiYG462/EIIlGuMbsrZkNFFFZjscCyclXMC\nWzC1ACuJkWrEW3unO8aHXhtrHJRd9b5xiiJAxdOV9NqvYTOxqAM/MR9SqBlP\nwCZQo6qCfVbTaUggg+yk+cH2KGh64P53jueKDjgtwtjSegrCKyLvMA+FNmkO\nNt6zCB2vNGbq3KDLiTbDb+Em+hjWXIvE/j4UtEtw7LvnrHv+6Rn12WWpq87A\nU0+qiLT7cqN0ucXZHAysbLT30tBO1piE50S8E5Ru7phA1JfkUVjQzjyrLr1z\nG3aO\r\n=HJ5F\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDV/nN0j+FOI+lludZH9KOpjKiZsv24+mOvvPiRXqRu8gIgaDBpBtjh+swiMVci0V5g4YJRzQz10P0puJY+4fuFLYk="}]},"_npmUser":{"name":"j0sh77","email":"jcjohnson77@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.6.0-next.2_1642620909406_0.3570778953443572"},"_hasShrinkwrap":false},"2.5.0-alpha-trailing-slash.71":{"name":"gatsby-plugin-image","version":"2.5.0-alpha-trailing-slash.71","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.5.0-alpha-trailing-slash.71+4ee7ff64c5","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"3.5.0-alpha-trailing-slash.71+4ee7ff64c5","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"4ee7ff64c573f36c08d9d7a091fee6dfd9a71c8f","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.5.0-alpha-trailing-slash.71","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-0DRIm/ZeNoXs9Bk24P9fTVrVGvk1O+SvtwQ5Q6+mQbqiCfJ2ZyhHu7ZT+ix6ATHDtZUzxSV2I67ICIXxe0Axgg==","shasum":"edcff14df272d01ab77cc45f5b372b24f987dc0e","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.5.0-alpha-trailing-slash.71.tgz","fileCount":99,"unpackedSize":728261,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh6Rv3CRA9TVsSAnZWagAAXN0P/iswKVdq8mt94cjIIFZ/\n2h6tJHkOiao5ju2oGkut8AkNAtglv0ca6k94nPB8diLH8xSlAIc1dE2+vy6M\n/Mebl2216RIfAi+UEIcPGBsaJyAxIu7TbkFUWOWHSxG4S/0VTaCHK5fXa3fM\noMXrJJmOYg+/dHpyc5bi+qIXxXUnnwOwknUv2DeVRu3vXbMT9sltn1ycbG0w\nGF5jrKx0hHbTOfe6bY6wmqkTP8sm656mNygSusFb/H0o1GYrgvxumno9GZYP\n8QI52czaaIGgIK7tMtxTbdHWlVhAsogRiZZjho/7jDpAN7cJpLi3NfJ5kYSb\nh/UqbG7P2qr9EmEZELTfeQ9HKLw5Guy2avdm+UyVzselJHE4ZruLF3uuirx/\n8i7WqrapJo9bnIP25VxONALZ0RfXb7ssF1t8SFbTZ/hhaQsaq8nposRJcsuG\nHs/fB2JzgcgvrmFno6lcI8xmMtvR92K/aFawc+Pa7JCnw2abVkMl/5qBiz5C\nmkLCcKJBKWyBVqYx+mnoXqJWnZNj95zet86fQ7SLPietcMspJh9tunjgtebM\nWq9P7H+bDKF0WR1lnd962NhQRE881pjZ2SaG2pdVqV3IHhfIAW4sn9meLDL/\nmg/P08opM6Pt+gPK1tnQ6qH4KPxrSDN8fGJw54ap7ICaqn1TuCtHCKIQ4Afw\ng17t\r\n=DJFB\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCscSvoHypsHDSPlKFC0ZPde73F/dqdOHMYg14H5OxGXAIgBlqmjb5EvFAMMwZwOvwMRYDGFjUAP1VXAInsDVHeiOg="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.5.0-alpha-trailing-slash.71_1642666998763_0.056785355388953906"},"_hasShrinkwrap":false},"2.7.0-next.0":{"name":"gatsby-plugin-image","version":"2.7.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.7.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.7.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"3659ec236ad54e87dff26effe11593c5663c31ed","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.7.0-next.0","_nodeVersion":"16.13.1","_npmVersion":"lerna/3.22.1/node@v16.13.1+arm64 (darwin)","dist":{"integrity":"sha512-H+o4AB81kY+ab9cGToYmOlrD/WOXIbof2kUu8HU/K1tSffGbs8unOVGDcNesOTJQoCLqSpRu5GHMzhP6sbYsDQ==","shasum":"d0945c76589a097babee56ebccae748d4fc0601a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.7.0-next.0.tgz","fileCount":99,"unpackedSize":728179,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh6n1LCRA9TVsSAnZWagAAC04P+wfRF3UgQrUvFxxx5CCf\nawHNt5IfWonK2epDa6p1LDH/kgbOJj6ynTJ+wym7mMlWZPOliQPve+AesrhA\noHEe7L28maNWnOadenWIaGq5b9/Nu6cwaRbjhDtAFET6nKP1GCxi2KuxEYfW\n+Swh/W+y7tFfW0OcSRBpFUMTTmJUUiH0qXyjHgCYFQkbeQPjYUzCz0rkyQiH\np8wOXxBmLCM/sm9Pc+b0+SphBro+5Z/aIMaM7upAIAm78hJFbwzyt9Sy2Tkz\noyJ47k8R9thjy3Jsxd2Ym1FSA7YpfTHbkadOcSv+VpMSoW06PIr60YW4S8TE\n8RtAOWHJJrbPtcxUQb1WdfMQmpridmbvN7FQeyrfTlZcII+j2dmfkwWJjkkb\nbimG41hPcCyQfHB1eTLrfd/JumdTFbB4G5ab+vTPvoz40Piu8G8OVr+apvMI\nYyBI10Wy2zH5fKePLuoZ8kiH7OR3jy98Btwi/0TRny+wllYqmac3/S/cJDtY\n7VA2EjnC3UYtUlSHmTNwYF2u5Ye/99/at1qzJan4ulCtSPw3hxjuDtIeG6uY\nD7BcfbQ2FdoUqePW9Y/i55xz5xxGEn+X5XgfhNrkqxfksi9AI78qo9EDJO2c\npmVeBcQwqIjiLcBjBp9GK0/x45ywa9cqqIRX+TUkHPGq8c/5dBA0MD9ZPplm\nP2Lw\r\n=lmFA\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHeU+fcN802ghrz7V8bKMjvdCQOXRx9zZTwNBDJwJEv3AiBrDdywsxyEcbUzKO7fUvBuw0L8ooV1RqjNLNQfNtKt+Q=="}]},"_npmUser":{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.7.0-next.0_1642757451290_0.7499993665518501"},"_hasShrinkwrap":false},"2.6.0-alpha-ts-jit.27":{"name":"gatsby-plugin-image","version":"2.6.0-alpha-ts-jit.27","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.6.0-alpha-ts-jit.27+c0c208c81c","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"3.6.0-alpha-ts-jit.27+c0c208c81c","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"c0c208c81ca3325854aaa378eadab18dd59c097f","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.6.0-alpha-ts-jit.27","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-VQJLGDU2vlDJjnYzrXNmydmFH3bPAa5rjVLyJdAjZy0aU/JPaeBmZxAUnlYUqTC+y5++oD5CveEX6mFnO5JDyw==","shasum":"63f7c5a0149b303ada303c504516018ca9acf4d9","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.6.0-alpha-ts-jit.27.tgz","fileCount":99,"unpackedSize":728237,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh6r1mCRA9TVsSAnZWagAAIxIP/0Y2sYywCpZGDHHdW5X4\nWdOZydR2CvhsBCXTEt3tIRxNujU2LL4h4Kpq4eZHxLrc8h1XXvF2G2LKEItE\nnf/ocpejzSSSMcKjOEWf1Ydy8XUCcJmOuQ+u6+pN/hfc3LREev37600OwMCK\nUeiChP7BsLJbUPpnJpXysHcYQ+UAywPIFdZ7haNEJs2FkfyFTD2zMtasVUP+\nL4VXXVH4Zny2i8g5CTrup5natB3mrlt7WnGMZKNduS7uOR4pZTI6gTeX575B\nd4EY0KeBhoPyEk1F4YuyS8MBFEqMW2TnINoVq1A8RS2bQjnmHYyK+lfAit82\n82QhG3mgOXyZjrC22ZmLepBYyqgzLgVKdCDrPFOzqlu151TfifYEq6dQiwl6\n8Oh/2XkDzeOTw0uHkfN3Ek1iLgQoE0J+2axXYGiQWQGjC6p+Jrvh9qZLm36G\nmb1Iltqe0MA7Hm00RXI/K+2adc+p211H3hbJEnoiQiZo+lT89MLCW/DrPdcg\n5siEtUe0B3S/c2gEx2RyBHEsN+pUDKqJIvORhWD+mE3ijvPtctTsyzzV0ymS\ni85ah6peeNidO0LpUOwzUblZT4YQv6/06l+WuwhxPraQD9D8m3mgnetIDiYh\nHRoFr6H0BoF67S0SC7hI+6DRtaaAyCcK0sI081qvLe04NenSlfN7QBYlhH0B\nSo0w\r\n=iyZT\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDZvlFHA9DzcGOtaj9Ko8noeNH+NjZAvTz2t4eOmAf08QIgYckMrVw0zBtaeugYuNoQyFz8oGcCfEoID6tx1MAuocA="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.6.0-alpha-ts-jit.27_1642773862343_0.4363759891190213"},"_hasShrinkwrap":false},"2.6.0":{"name":"gatsby-plugin-image","version":"2.6.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.6.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.6.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"441e6da3e1659e73621492a37a47745d308a565f","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.6.0","_nodeVersion":"16.13.1","_npmVersion":"lerna/3.22.1/node@v16.13.1+arm64 (darwin)","dist":{"integrity":"sha512-rWbIdkcopB02YIhR3UidoYhe2SDOFTpxzJSABq5TcLZ38FD8kth8QavvOO0h1ap9tWjaUNIjCvKRu2M3NvuC1g==","shasum":"5342507be7fdd0109fc815c0f2906b0407a55e14","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.6.0.tgz","fileCount":99,"unpackedSize":728158,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh8ASSCRA9TVsSAnZWagAAOekP/RgLo3/BJKT+0j5Os9w6\nAq5NlhXrmpx9TZ7J3IYFx9ucP7d+ngJlXw1D+18tQKR1yAfLyOPL675fv75l\nHiQDLeA+RTIWpoMLe5FbF9Hhybvg7DAbX/0ezGyWZwmelI7QrIk3LJjTGTnn\nkeW/qdhT9HKXsxuADOt2I97rGASRm3bCQQMiEOM+BxrR3PEckTZOof7bCpiG\n51IQFkSjXEEPL+U3E0HD2KRgObVBMvLlCPqR8ZFfIlAj68Ir9HiBe5Vfp0QF\n6bnGXIhFkQvWKn9RYZiBlXKlMHWUatnk9Eh4iOIoKvQcLx21OG0WXi3Kewlv\ndNOwCeIzwkyDSeDlzEgLiiYn+K841iSGvY0kRz0lgMU5b8ttC9ju8TvCIC+F\nvPagrq+Fz4AMRF4ALwARrLK687Zm11qW/P3xC3QznNNrCDJxRVohP0GPht4n\nIqk2sVY+ObfpX9dNH+sL92BXMvj2QfUkicjprcKMfsidmDUadv3jKHVMo/mG\ny4g/kn2Nub5ImlCIkvfVyALOM917X0H9PrwrWugMAFZA8ILDffuXAkArXX5h\nyuwVih7FfhNeahxFn1UBKlgvns7ups4dzVzCe7Q9ea9LlAIi4t3Y8700XFlN\noaEmwRA2AwaKDbNPKPHsassYIzC1/dtElLmD+ikmWzq+hGJwsB9bV24I+vgD\nv4mQ\r\n=aAFm\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDwEkKlPBOxfQOxXW5A1tg7p31VezmY4OZeQ/pPy9CFUgIgDgwZ5Eb5gJhaf9AInwNlvUZhbdNY+CNuscSbLwCOgYc="}]},"_npmUser":{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.6.0_1643119762388_0.9550095277759334"},"_hasShrinkwrap":false},"2.7.0-next.1":{"name":"gatsby-plugin-image","version":"2.7.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.7.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.7.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"97a94937c90872768a146c5b335ea1e3751e1da4","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.7.0-next.1","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-qr1vqWamS5F7q518oHkBP0qR+dlrBYMYf3q2GyXPK5zXMeN1xNrmV6OqT7cN+qGS4I57ZK2RFByg3kiDpJNBAA==","shasum":"3c262bd425d0d638fd5398112fb57cb1f823b1d8","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.7.0-next.1.tgz","fileCount":99,"unpackedSize":728446,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh+lAbCRA9TVsSAnZWagAA+0cP/j9zEgMYLxcVBqb2PiZL\nL8syrQWP/B70Uu4Lw55KYbnFQP4j2srvcYRY2iH2CDKG9vivkQSdADvHu9v/\nc6HmmJkMWvP5xOHmYF/nZ0hLg+F/FwKnC72qC9/lMGowdcIduVQO85tkFO4C\n2rpdc3Qq6GrjhH+R7lsLkeJx85uCihp9cbP1YngVRuN9JFVmHyiiRnPkACkL\ngQyE2gMN2nTfOEwX78eSjKsrtrEJrcljmyCUj7Kpi6KssRy57AkPJ1G/TjYC\nDFP0QIhToFRyeG5r85iWNopM6IKd1nL4UeykZ8crHeEYnMp8ovt19ZSQAyjL\nFEljRZcrbHzHrY89Hz5dXDTdsFdXT/QWyWlnpIZZ/L0tQQGeSKIQcw4lboA2\nHOs6jxldpsO03oX3MB0Tnrte7o4WKZK761DTNT0/fdsE62BXvnnHdr/TOp45\nWgf8zf7zqm9dp+QI/dxR5RroT28ZoX/tEI1qXexMHa3+mJVxOxR/q6ygrud9\n8LNBVCXGub6UxGvLuyPYbvIsR6qXiRA7ZUl/O0yUcBvAAEdx4AjOkQGkKKkF\nh1nEN5RjFjZLJ1SWfM3h/NUgaAw/IpYGOfEMPhl7PsKuACM1CM3RQim5l1dV\nYVFkhvx0uFPkA2qGUlffYamhID6x0OaDmiMSVmQYZm+dm67NujQ97Arc74XF\npdtG\r\n=4jDc\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIH/P7XlUxVAXcey/iG0m6CtYB+Y5C135mMdxQCBtechVAiAyfMyfGzLeK0DcHMVdbX/wKFPC8nB9fm8wOzvjTvj+xw=="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.7.0-next.1_1643794459355_0.9134096098940268"},"_hasShrinkwrap":false},"2.7.0-alpha-image-service.14":{"name":"gatsby-plugin-image","version":"2.7.0-alpha-image-service.14","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.7.0-alpha-image-service.14+18be995b83","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"3.7.0-alpha-image-service.14+18be995b83","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"18be995b83db110aa76911347ed2c3eec051ddf5","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.7.0-alpha-image-service.14","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-lK02YF54MHKXnIFo6zXoQHbClALEwmcWopVw7Hm3gEXpVtv69v2zibPQIHbt1GNeX8f/ZVHRyzIcJyEvuEG9IQ==","shasum":"f9c34f05c539dd7f802f6ad24086f2abc6605f11","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.7.0-alpha-image-service.14.tgz","fileCount":99,"unpackedSize":731358,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh+rEKCRA9TVsSAnZWagAAw4oP/A274VcPlFs37PdzKAnm\nJg6pxNK6g1tNVf9Ff41jonrjdBTfXTQY3ZnzLhKEdFjoXS5KpmmlwxPCwgJj\n3sWIGr1Q0hHVBWkrPr+yy6ZnYhQv1ualPvGb2de8hYcofW4BkRdNCrwTznLE\nlY5vE7G0vTpOVOOb99oPrmc+vzjddDDcvhJexcpaz26tvmwqoHiz96eEuPyu\nIPenW5Wv034fHntF+GEYXkEXVWk8ZtZw2ufQXtOxdC8CwR9NvFw8rqMKqKFZ\nvcmnUlE5x9W05madPgm1aUaEYx4z487Kdai526Y3CdX1vgjFwc0OzT074AZa\nAdOCMTxvqycI+f/O8DT6xO+GpeOJPMq5RoTp1x3RX03X3sDEbxbyCHsRKTUq\nSlUBjpJgZQejyaCgTZTB1pmNHaacV42xqrDwItEkfU/lohC5lfz2R0S17g6Z\ntBKusix5noLiJf8ijKieHXnqpsOs9v4/7SxEUY2EAvK1yl1VRzkMiNe4sET9\n6xT8ud1+TOQ4cwg/DgGgrCGw/ALWghuFRu4izrM7FtkuAsm2MKWIJL5y9/LJ\nq16gWKj28FjhWfxL3akb+tmNhzmn1fvEbTFEhGvhbNogyxHIfKsB59rny4HZ\nM/yTBmp2zWa/1zklR1+lf4C9Ro26wVmqOWBjjYjLE4sszs3IS2DgMTni0wt8\naSeQ\r\n=ygZA\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC6VbpFtyGsbX2TFqERADbHOKQhsmpKCSO2nfZtj5lPDgIgY9xtDq96wwqh7soiSzLs4EGU/2RHrGU/DL+g9TM8nu4="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.7.0-alpha-image-service.14_1643819274607_0.9722538429370455"},"_hasShrinkwrap":false},"2.8.0-next.0":{"name":"gatsby-plugin-image","version":"2.8.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.8.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.8.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"459d61e672d081ce6968ef07fe1b39c2e6e2a001","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.8.0-next.0","_nodeVersion":"16.13.2","_npmVersion":"lerna/3.22.1/node@v16.13.2+x64 (linux)","dist":{"integrity":"sha512-JI0pYOsK+yckx4aF4ZRSGPTQ1d4jSneKCw1evmfXEGc5tLF+0FbXzwO0Im0CTd+4Iky1Q6o4AO44zXwD+N9mgQ==","shasum":"7d63bab7fe146a84d1eb7066ea18cbf01b7de498","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.8.0-next.0.tgz","fileCount":99,"unpackedSize":728446,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiATRVCRA9TVsSAnZWagAASusP+wVsjyWkbOTSd5nmjpoJ\nnN7/eMpWcOSY/xQKw7Qu6seTdQl0OaS+d6kP44oPKhZBnLHhUIkyN3Ws8Q9Y\nVOeGzQJaBdHyj4tY0Qc66bLs+vnrrKvKsNF4ToKiJSQsYFren07zj3vwqz7S\n/9Rm8gt3yl0ZwvvNojuRZJHRHep73vK2V0btla3tf2LsHQu4F4Gt7ns5M2nH\nFVgsWEfwbXq62uuOoaTDTLq1DeB/mrdDgI5mmGBnNdgQlKBSLwtTRdeFlcZr\ngaKG8vaEuUnM/aF7TVcYhMstIYu3i2fH3MUZU6e92GPYJG+7Gf/HwSWe1H7z\n5qIe3rRl9cfmkzs8TgfypaRc5JUKX0Xa7ux6I3dYeu29ExK+oNj2GXwHf2oL\nf4PcvANGczRdA52b4hlGtlBLfa5TijCKdqQGO7M4Ib4B5u2+8ZtDD9BpNVMk\ntzjT1nkf86EcYF05mgMUqyTukFPoWa7vxVASDo2t5vGnEjNe7QwWdW2Yg7QQ\n8xZeWFy0aozAteMZavd+KP7d9ocWab3HtEKTGScDkrAtGEZRw+XsPt95yUh0\nRYCfhFLXgf9CUPlDA0JY3e5344VViZihHey4JBLhL46oaPL2CSGgjShWWCYS\n/NG+UH/MKo3H/+zcGnITRJmL1sJKIN6PedYaNrFeaPpm7dMDx643tYFrDNPf\nlv11\r\n=0lgo\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIH8nZG8UjvSBhD2VZh5cyREKgEkx7XDP+SvPYUY1dh9AAiBxSGEAJyDaVKLnvkRv8jHlokplT0feKgcCdh+/KYyYog=="}]},"_npmUser":{"name":"j0sh77","email":"jcjohnson77@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.8.0-next.0_1644246101132_0.6625269710491237"},"_hasShrinkwrap":false},"2.7.0-alpha-image-service.13":{"name":"gatsby-plugin-image","version":"2.7.0-alpha-image-service.13","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.7.0-alpha-image-service.13+33d0f6ae45","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"3.7.0-alpha-image-service.13+33d0f6ae45","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"33d0f6ae4515014f8ec41d1dae1a4bf976003d0e","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.7.0-alpha-image-service.13","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-AksJ3+pKA6IOWleLC/+QD898dT1axC3KOGcp94gN6KoyJwvj1KmNvfrT2TOrsCDOhIL9c2LjjCLvMAozKx2Wcg==","shasum":"27f519d361a67cffa90c271083778f1467f18f67","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.7.0-alpha-image-service.13.tgz","fileCount":99,"unpackedSize":731358,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiAhboCRA9TVsSAnZWagAAjHwP/jkl1/BVE6c9EjC25chP\ni0Wnxo441U9C92p6PTHD1FOZnWtOhW1pwI2tbL14KtYtXZ6mJrQsYBLgiQ78\nGxYvsBpfuRhva5yKqb3fxNm/KEITjWjWwEvPQpnJjxMyFoYtSOh4FP4135Ql\n2EcMnnZfDgIjq2toyOnw2BrLyhbE4m/4bcs1XfYxZb4mVY20pw/MlqdZNIza\na9MMs+LTdTlF37v0+C9+H1o9l973yIuv/g0+O9CJjFdXSF8XhS3sSjyeAg07\nde9yLNmZbZ7O/HBRlgdACYwGtkRz3q+t8B/p5yVYOcYHMNoYJCphr278KdfC\nRUoQpp1gVx/Zrc0D2KHkqKhYoh+LdXUpqHSzdRXOLzieI5CTZyfr0mdFmRGZ\nUPiT/Ec7ed1txicIXCoGeDoYmbZx+Sv34LboCHPCjJJW1xPe63tNO4ZiMd36\nlEWwPHu2CHRErWP+cPx2t+2s4bKJZD0X4N3FOXRL9HQ9dMMAynLTRDGblzbB\nZP9YXy4A6r63/irZfozVz+pQFcz7eDPFwfoSVhFELIme6/dd1EPcXtNrXb+a\nAEGfrPN8zR2OhxT6bpLFmpYOwsrpo8DjQm9QwHQvmQIeefbmmBMJvxmuwoDf\nKfwIiwRcPvhDGsTPa+GRQ35Ow6DvacJdkW6wWDOTI/iw3w9BZ38ByojATfYr\nxN55\r\n=lEAn\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFEMkLnK9yFIOTpeLbUimXNIpRnQNcbAAJwd4WrMbtTpAiEAq8rgw0b3/7kKjTvyoG3ZImBOMRwLttx+iyzy5hC+kxc="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.7.0-alpha-image-service.13_1644304104659_0.735740343603345"},"_hasShrinkwrap":false},"2.7.0-alpha-image-service.16":{"name":"gatsby-plugin-image","version":"2.7.0-alpha-image-service.16","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.7.0-alpha-image-service.16+0be6f00e1a","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"3.7.0-alpha-image-service.16+0be6f00e1a","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"0be6f00e1a235b8c11663b3a885e397fb902c08b","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.7.0-alpha-image-service.16","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-ltkrKHcqIq1ZGXKrjsfhUAB7AWA7gD8nLG2rZJryhwfTRZ1c1mG6HpD+AT8z/ZAoL+6lYc57DN81Zg5RxJjZLg==","shasum":"e24db2749dd75daefa7383f58d12335c47521113","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.7.0-alpha-image-service.16.tgz","fileCount":99,"unpackedSize":731358,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiAiw1CRA9TVsSAnZWagAA9OAP/0nUQHZ3qYrCsaConENJ\nsu8Qniz8F+4527mqkjS2uBsNUJuZ9JFJx6Tb7PUEJ16RKirM/FGsK22WBdzF\nz1fJXJQ3ZNoKqZ1pahO+OtLIic50uMhaQRhLw0MQTqlWr5DWaWAA2T5wZREk\nftu9/zrAZ6LEqIIu0EKRRJvsbNp550jxqKFyxUV091/mXoaRo/KTtJTtsrcS\nFMARdYuI8MGzyyPCka+4rgv1fnYpBbDgsk5GhPOdvat7pjViXyTfssK9hIzw\nFHOgA3shTWGxxd3pO/7mZsCiOMSYU2Oa3/mykK9Et1I2Rymhx6nLkhNS5bkz\nnkDXfg1Ui/zMWueod9gBPpMJZybfXczYf+sViGeUaMYmcQxj1yOS/v1XE8/A\nQAiLqmPLvpP+0TajbZfokxQYeqS7lspSux+Xsy4tMUmLN7Enknc+P6QtpYfU\n9bgZLuWBL9s4YQJ+CNrR+oRpOnSOVuokMBLiGg45s4QMdxGVfrLamaSSpDVf\nxqdjC8fcvU+MpL+trB5reiloOwzFRRwUuOx49NdPi93nRyjiXF17azGmiINE\nGrRD8hM6+f01E4cOkoLhIhOaHww7W9HRqbwvXRPuqkZlX7XSrEpnVmP+MxOQ\nid9nJ6ZQe/3TJWH2B7dDAqGOLBJiWFCkQ2iMr3x3TWFqTWxwl0HzsQ3rsB4N\ncEbL\r\n=Mqb6\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDF49S6jib+SwsaluZF15wIjHIwyJWUmZGyw3/V0+c27wIgef9JaIgKF2VFlJbPvhEZqcwVYmf4wWRLpPz6mIdnkK8="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.7.0-alpha-image-service.16_1644309557836_0.4202697964612645"},"_hasShrinkwrap":false},"2.7.0":{"name":"gatsby-plugin-image","version":"2.7.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.7.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.7.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"1f30882907b20b63df4d63b97a80b233a7da37f8","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.7.0","_nodeVersion":"16.13.2","_npmVersion":"lerna/3.22.1/node@v16.13.2+x64 (linux)","dist":{"integrity":"sha512-IVX/c0O/5QL505hla74Pt9i7xtv5zFBeYiYqG9gyejtZ3YuM0Opid3Rs+IIn1LN3fjM/xBrqp8yL7/XN/p24fw==","shasum":"cec35a39e73cee991a1fa3d66e3584d937bd640b","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.7.0.tgz","fileCount":99,"unpackedSize":728425,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiAomXCRA9TVsSAnZWagAAgNIP/jaepWoZg0sVGX91TZGP\nXjSQ9iePE1s6pRbq0wGaOn4vVJ2vHxxMHhsHCzXWXMMMV4eHdgwCl0gi7nU5\n6dUsGSrsw5ySuHLj+TNJf5C0hM54Dr3UTftTmzTXoEpfTWlbCYzTebasgcJl\nu+XSw8oGCWrPTUDIv8qufoqF3v3Xm69pqv7i3ACIWzf7poyT3T7o6r1tUjhG\n8U9hsG1RXqT5L/NtR49qs2v7zF/AIY9RRkX6jaLpZJmnN7KBTpy5BPglUcH9\nPVJP0C/7tJjv20ydHz5BEYenLABXpE/fVxhmlZqDiGMAM2u4x64yi0vObI8T\nh2l55Oks7/kC0YkeGKUs6bfN06Hx2t0ccnn8/OesztQBtH1YrQ4Yro5IK2Eb\nWWRIhWcnq4sEjNtTiMojrs3gplPIrUVm5gNEO8sShxHL3r6chHln4W6fRl2I\ncv5M1nBgMwQUfvddxYVbVnfLbcE5QJGNnGLTC6FmR9/Ne5bSvAfqqdlXWu68\n6RlK7IELvC+n96AmJdNPQ2vzjez31GKfCh8fLiM6OMC/WPphxATZIr9KzurP\ndPPDEkENp8ZmvXCO8vFvtocf4kGOipuEY22MUASq6q7LN1iaKDFOODKxOE4A\ncXWxfmvS+f794iVbdlHE5bH4Sib0PL0TM3KU7YgA60IXnD7zsA1YL4uBtbDU\nQhUO\r\n=ferF\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGbklEDTwQUQnkNKfxoO2m4Wi5+JUaAP+UDGvtL4K1lFAiAmG3FB1MUS+VnoLSzmWEFkrjpCGefvsFqRxx/XHGxyIw=="}]},"_npmUser":{"name":"j0sh77","email":"jcjohnson77@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.7.0_1644333463010_0.5431432923593478"},"_hasShrinkwrap":false},"2.8.0-alpha-image-service.25":{"name":"gatsby-plugin-image","version":"2.8.0-alpha-image-service.25","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.8.0-alpha-image-service.25+70ba8be6cc","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"3.8.0-alpha-image-service.25+70ba8be6cc","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"70ba8be6ccb651ebb8c9adfa7dcdc88236debdee","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.8.0-alpha-image-service.25","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-/xUr7xSTY+s0RtjFlwmDPTqhb51KXKphoEiFOHpHEyKp5eZjIHXdSQebwBIVAwGMzpBJubS2/7Cd2N+iUWKEwQ==","shasum":"7d5841cef73c5fe199480c756f1ce527103a7732","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.8.0-alpha-image-service.25.tgz","fileCount":99,"unpackedSize":731358,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiA3mzCRA9TVsSAnZWagAAAjQP/Al+4krNMa3z+76mpAbh\nxkcEBsop0Dt3chKdjILDCDgq5xIX/MncLZTmxXCwwS9MC7sPCKcW1Qk4ADb3\nMWUMIQ3H00z9Y5stV24UUkjD99AO4XtU0bt1oVMWXmS9qL4Gw9I+LSQ+B5TE\n3TUf3C/tGcFsq5u6rt+H8Azh+XaH/VpsJr42OQMq4XayZvhrCaO0OUsHHdSf\nDDx1IsKHEXO8RQqljdRDh7kl3Yoz/WNsckzlPpxwDuJknMcUuHhQ1Bs3vBTK\nHPfunF6cPRez/lIaiLoXnmP228jB41V4m1OLz0ogQgwMVQtg5Ml7jJ4+88v2\nDJARIrVcfOi5xJH8+A6XumcZhZnfinkTB/oA9qJvz4/+Vdy9g9DnIYOucZp6\nz7FZGWX7695w9Fz6mkoOxAhHC8GqVsw5nYtX/KGql7zpKAr/SeuS8rBBoJvX\ny5uE2NnFn9FPYeI2jxOOqYerZFgwogNhOcR+UnEB2F957t8hfo8jjHbj8hTH\nfIBy/bzrrQ6mX9Uee9E6O6/qF9ggeZDsefyyPIzZ9JqT2xoun+h5AfEwLzH+\ndaCvfo1jzxWFZSp2TeAiDxW5EDJci+pYT48yta0fRVOyMxiT3dOXfq+fN14S\nTdExXJk/PoyCNokuWoiup1Hg2K0DCoaTFqsqO3PbiXbiQwzAUXqOQ4g6Nzmx\nGR3e\r\n=czCI\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD9eoVUyZYe/AxRe0J0svBZ8QP2iPbH8g1lKOl7x1byawIhANb3uyu3AbeLL9xQUjU7un0UvaIb5crHEKU//GyI3v1w"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.8.0-alpha-image-service.25_1644394931052_0.9464127745359301"},"_hasShrinkwrap":false},"2.8.0-alpha-image-service.28":{"name":"gatsby-plugin-image","version":"2.8.0-alpha-image-service.28","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.8.0-alpha-image-service.28+a5ee7fc59c","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"3.8.0-alpha-image-service.28+a5ee7fc59c","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"a5ee7fc59c5414e722c38dfea3c2e2ac0cf3915b","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.8.0-alpha-image-service.28","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-fwxy/qwCDLAsj+vVNfNs/pw+Ab/u650B/6fWOFsj9ZRhR7MNvya+pucT9uTt/9wjl9Z3evJuouMFXPqkSRgUhw==","shasum":"bb0f987eb52bc0733a2ebadff7e21f1bc6e81576","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.8.0-alpha-image-service.28.tgz","fileCount":99,"unpackedSize":731358,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiBVmYCRA9TVsSAnZWagAAlg4P/2obfpW6i5wRcxlfQzho\nNBiDvQ0MZX9u5SCJK88Dz5HQkXMJFcJNsKJhkAvhn6kCcFHTk7GgM+KXvrI7\ng4Scm+xxc1bNNHmUCE+GNb+LfglLkVjQhZzt/XOCGpFXulPY5AW5U3ir3Sya\nw4L183Py1RAoqjJSWng9+KALYbJBGrra8Fr3Y47jICTLbBPr0YmSH/+ZEviJ\nhv+rzTmh31895Mpyf7HRfr53ZnOecNBX4xlcKgzth/Z5ibJWai1Umsas0Q0S\nxeXQbwjIrG0vZCjAdNSm9c9v3bg63vhvuA+t28KoYj3IiTdQjkxL77h4nU6b\nZB34BqgFCLQ8wm19LRAQJ5Wt7EOyPwhb/pJBcPBEPD+ElCpUb7OmUco5AGnu\n3w28F3bzdljkYayBbxSJqeGnrZ1EzKvPGsvtsmPHt3z9wV+gZy71JgHCqG0o\nSybqIGBcg81YRu0ckTyTOT42t8ZhdzF5QlGE0mZKljK3oZsQONwm+tqHnl8J\nUEyVqSKE3WjJ+9VIGn/hpLZ3oJC9woE4VMJd9dB9DB7RbAlckoDXdew5s8/X\ntYtYDWLyfZXLToUHV+6cR8s3Y+Z8TuBcnbIxzA4aANJzYMEdbbabGeIEp4Dx\n04wp8fkiz+pEXDp+gQcnOt42lJv2HZdJYlBxIS7mc/R+1tySB/E9t2lT2vqR\nLcI5\r\n=SJgp\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCxmPzm0ov5HFt/6W376qhB4IKzhF7b5K3aG2hoXL0fdAIhAP/Muz9vL50hPxtURnO90PFTQj+K8/0FfoZjo0sG+yz/"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.8.0-alpha-image-service.28_1644517784206_0.010711142114229188"},"_hasShrinkwrap":false},"2.8.0-alpha-image-service.24":{"name":"gatsby-plugin-image","version":"2.8.0-alpha-image-service.24","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.8.0-alpha-image-service.24+06ca5afa90","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"3.8.0-alpha-image-service.24+06ca5afa90","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"06ca5afa900a99cbb879b88890a284ed022da111","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.8.0-alpha-image-service.24","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-dejeonO5yoae5w0hBPhPtBm0lEhiF9Sk9SAlQS593VuWR/XLL3mFmQdHyQfSIWVVu5jIBVGdzOgFT7u2cK2mtg==","shasum":"8f20601f8729f38c9a284581db664291d06bb950","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.8.0-alpha-image-service.24.tgz","fileCount":99,"unpackedSize":731773,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiBYTICRA9TVsSAnZWagAAC4cP/jg56P8nvEpyW9rxD8Ts\n9WQ06FqB3Khn7vzvgVrp38kbdcV8BR7kaATebc0Jd4p3oFgHoNorjl/3504b\naDQGfiOyZQBDKO3WpQx2kJLWYq2Y6fkNsIraZW2QL6o4s8NZrfMGkJA67vxv\navCTMQwNw/bEfSfOLRpGUIQsIY2KH21YKZLVAVdISFMJ/1WPFEktwOGdbVje\n2dkRQ9xDgl094LAJuix7A66wADaZFEyDPA4brBp1G9zZSUwT73L67SDZjZxH\n5UP/iUjs8jPZbqefVlnoWsnRyY3tfeUfujdxM+4PLgILVPTW10QsC5n3UUXb\nGfDAp11nFMA4Bkz6njWw5Ei/kLM1+IQVs6rcDH9rnITjsshg4ygrJss/DbOV\nGaTOoegNKIa2qHq/ypT8rDRYND4MyXKuwoWD4x/NwtgNXnlwTeSZDXjQW2bT\nKeu9NtVdCa6dc+Aq+/EbaDgfDeqVG2a9tZ4J3f9X6jQALzqc+1LviwnNuJeN\nWjwYq9II6gtAPznBxdOeAusZyuETbKxgXIgH1Z9RQgPTq5vfUk+TP4a1LdLa\nPn/UWtE65UKdSRa7tgOblCZo1x0NsqMo2lbNnwtowVu/+GVJKRWtuQTv6LnQ\nBBa/tIc3erjQMNZU0RpafFEgabQwStXuJ3F8z0H2T1+cGs5/OlMMB4Xt1B5w\niSIY\r\n=l90r\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHbai7Bob3eIU3u1CSru2OCQ+YsnDc34Mmhjkrd3Hfu4AiEApvmWA6jScz6E7Ollqk7pjUgp+bK/U7D9y+0OWAdxwAA="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.8.0-alpha-image-service.24_1644528840079_0.6231453677871714"},"_hasShrinkwrap":false},"2.8.0-alpha-image-service.26":{"name":"gatsby-plugin-image","version":"2.8.0-alpha-image-service.26","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.8.0-alpha-image-service.26+7704832c3c","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"3.8.0-alpha-image-service.26+7704832c3c","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"7704832c3c0584d849c81f2a390c6d90272ccd1f","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.8.0-alpha-image-service.26","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-Yah3QTe8napu5AKiL2zlIrmYr6l1v5cgo9/6iQRjRveZZ7mzeHwMA6PjF0vmvPVwwiwQ1K5Ful9GanJZCPig0Q==","shasum":"42de089e5fefb4ddcfeb52b9b22acb3e6a42b8e5","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.8.0-alpha-image-service.26.tgz","fileCount":99,"unpackedSize":731773,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiBkStCRA9TVsSAnZWagAAz9gP/RtWlQOYgi6rie0NCLFS\nD+vEkcZbKbWjau56asvkigWoFT/IitDDlKnVx54Gsrh1XabDV1jx4zh5w8pO\nf37HLbS/M9MkciWTKTQ4sjHrW3t651eSgurVtA48iWf59qcuqTumTF1oEYNy\nno8H5RJ/XiJgojskUmuGQ8u5MrTGlUP/bLXZzRmGB+XQwgkMz37erQ0VWaqG\n6r2dxpo00Be1soVojd+OLWWyz6HmOJ+BjaDibDiSbcIHb37CE6m6rL8+Z7RL\n1QoNM39bWSaJ0YnfMR1IzdmK6zwYrZJDtoviUULHRLAsjP5k1nhl13I5oBkb\nXS3+ulKhC+O8wd1vJRTFONFGj5Q7+nMAJrgoGmSv/FnkxOa81WJtdEsWl0lY\n7a0dBeeZLcPmAR+MfvbeLGKXqItpbhSi1FquA7ye5lNMhORU002oSoHEEBZ6\nwQML6KuM+Q6LJ1IjkI8dbeVzhH9ECESG99DoKV+EUfIBLkcDY8HjnTOdzT2X\nUAIBacZTCG8YXLlsCstc4OaVknzSRTWnwR0E5cqtr4UmBZxRaKyEOwOefKn0\nJOYN2Dsrd8jzbrZWsKQMkZ0bAPRtQer9qO9jU+Rx1HqiFRZmmGqU7ZDLaw2F\nBFO8Ua/f9CdXriWrAWSAD/PlCK5Yy0Q+SfdgNBqIfq3graXINnq7Masr1b3I\nJBbT\r\n=+gDO\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCL3uYDJ31nCJ3DqeztR+71NTrFRk/9N83XJvKPHxB3AQIhANXetKVGz2v47XajMfSi4dLKb8oammDqXaANliBSCIWL"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.8.0-alpha-image-service.26_1644577965379_0.9569713805176383"},"_hasShrinkwrap":false},"2.8.0-alpha-image-service.29":{"name":"gatsby-plugin-image","version":"2.8.0-alpha-image-service.29","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.8.0-alpha-image-service.29+1841ebe750","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"3.8.0-alpha-image-service.29+1841ebe750","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"1841ebe7502803a271940bd6acb273ff6818fb6f","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.8.0-alpha-image-service.29","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-+ZFz4058sqjJ9ecTuqPonHEaOGTSQUBtbFrhZ/qwthmdI6EkftrJvH5MNDqq+7JY2N2e9KXOftAUCmWiC8fOmQ==","shasum":"1e1e7c4de0409621b4cb5a683a72d6f37c9341d7","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.8.0-alpha-image-service.29.tgz","fileCount":99,"unpackedSize":731773,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiBlmWCRA9TVsSAnZWagAAKOQP/RdXcyRDnBFx6TumUMK1\nSqpQtmDv3zF/oD9pdRf2UevnvSK36wwABPEhrifXP+C5INcJ06LIP2HYwHr2\nM8bX4E29QOsp4Nyst8/re3yAX92S7lYVUviHMxx1DsrxhbzVPb2NpL7NXISr\nbLzx2QEtY35yXoLsoGiA91d4jTw7/tTjIo0D4p8b91ZK3JnxEw9b8cV/I+xQ\nhnGmx1QRXjLrqQuUTXxXBkxOOf9ddivHG6XemTgt0z6OdbVjOnWCDaWFMQfj\n4OKDVjgUn2YP+wf00FsQP5Esp4Kr6PHhx+BFUiCWkTTQ8YzLZUW4G5LV6lNo\nHfnOxohUPKg15fuxrhZge6WFDrgUfr3o1GOeFeP8z8H7aAdLhE5Se6/I4snO\n9K6wUUw73VVX/NoyNUpeOreh1mIzaMiPwaSjk+W+G3N0jyXGXGqBzH/oZk1N\nDmvsLVqyZk3zXvQRa6FzuXmN8N3Dm8jXV+kxTTU+clVvzZ8+d26VOGOPFYP7\nSc+bZCPpYy7UuOERQIU4Nsa2V6aFmd3LtfvGFDoozXGp9ieadq2X4IMue3jZ\n0fKuPySD49RcP6jCb2eTPotNYQ0d9GbZOTsj33sU3m+V0dkNaiMxAd2fiKYZ\na+jc/NSwIzASB6irENaWppM6qMP0D1/p6xaVfN6kMlr9Sg70vfNj8KXqldo5\nuDdI\r\n=4YaY\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIClfjwvpT0REucjvouTj9qFz6MWHUCxXzF/acApGy/KNAiAEtd/2imRz3HkNz4kvfkDT6oKtG266ysSKTXMB8+66Ig=="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.8.0-alpha-image-service.29_1644583318205_0.8645428257117038"},"_hasShrinkwrap":false},"2.8.0-alpha-image-service.32":{"name":"gatsby-plugin-image","version":"2.8.0-alpha-image-service.32","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.8.0-alpha-image-service.32+bf8b765fc5","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"3.8.0-alpha-image-service.32+bf8b765fc5","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"bf8b765fc504d1ffeae05dd48b3a5f6bbba98f43","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.8.0-alpha-image-service.32","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-eWLeTsir1y3OMenoD/JSYetLMMNUOCY3YKpNHpNx0yzIgGwDJV1U4Nz/D+CPKXmvCleCjC7l0+bv3+PYIHPfVw==","shasum":"1f51bfd5696fc26278acedf39fbc9dbcd9e0ccf0","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.8.0-alpha-image-service.32.tgz","fileCount":99,"unpackedSize":731773,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiBpGbCRA9TVsSAnZWagAAg/EP/2qI43EQpxhs0DGbH51K\nSpFM5S+QF+RrQGAClNe1/OOKWLxRQ5Lc7BlFu/0MCr84xTLIbH5TXK6ouUde\niaDpodxGLwTahT082zIpcXfkIjhQfYCt5YxEFI6piGmNUmSYxo3nnOG0nJlY\nFRPLF34r+jR0pOr/R+Suhj/brZKAA4hVzE/MarEaohDem70+2edHzY7AQn+a\nW0CF5YayLkIhgz0VyMRbNkPkfYt1AC7gT5qFNOo2N/a8fcuRcT8TNDs3+88L\nZL1RGJUzsaz7mi4qkSFZnzNYLrvXh5FtPGzYyGHU51rtXl9qplsXdHGl0sHv\neAINXn1V9E9Jdr/4Fx793s0vQbH2wvYVq/KbLQISG3ot6+a6jdSkNtvlUGpp\nUZ0eNcBxBMcL/rSJRD3aySFs1imTkzGn9YE+0NFrLb8HZyuXwKGs+fdaaM1X\nIgjF0FB7L8myrGhJbgk5HDsuTEsY8dXqQY9qkx20hAxe53tgTNL6rQWWWLQe\nFwXmVa/BGMDj2Q4RBLlZWRafFy4AA16DoSVAT9zamr3/hE0TTwQlnmV9XX89\nOHAVcKYbLaJPB3xbakGzdNA3cKr46OWmKuSWzJ1UA82c4mFQX0RfXXy7mJuO\n/xO2sCVCsYHVgXaDx3+H1TBehV674faeF1UwLnDgihHW+AjxJz2novXx8q6D\nGeJE\r\n=+THZ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHAVs1XdRJ6i0n1oK+Hp3kN7SMrVTEsXFnmCu8MZjtbIAiEA3irHp5KUJfDP+eF0J35xlUgdi7H/nbvXX55Mb3GpWSE="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.8.0-alpha-image-service.32_1644597658910_0.9009015764346673"},"_hasShrinkwrap":false},"2.8.0-alpha-image-service.33":{"name":"gatsby-plugin-image","version":"2.8.0-alpha-image-service.33","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.8.0-alpha-image-service.33+879d8b5493","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"3.8.0-alpha-image-service.33+879d8b5493","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"879d8b549367135f2ce49a43edddcd3eab12423e","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.8.0-alpha-image-service.33","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-ZJn9lLq5T26RYnpF63K2Qvy8yeLDMx9FIglF77AuK8QVPdxeDGzOSsXP3MTCXSHQXmxCML3zTSl4sJLO87A+4w==","shasum":"26e1c5e12cdf1787998e83323dfbe0dea5de244b","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.8.0-alpha-image-service.33.tgz","fileCount":99,"unpackedSize":731773,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiBtsICRA9TVsSAnZWagAAm3kP/RXDsSKAgB8uWtrPNiWw\nY4BC8EHgmvtW12n7EzBad+Y20ZfO/yqxwXXyDItvD+LadTIFWCGKGiVgu1sa\nI3zw1UYIJHlCRrtKHVoOp4uzzSbhRL3bgrkc2BOfPvQp59HYiEIFX+keXqjf\nxiPQloeigbfha2xvL23G/MwemmwtjKo0iR8sIQNcTA9VPvFRs+BDSprC7qVe\nRe1RUZLTLq8sJ3Ya1DnjW8RUY/s3KeXVgvGpdmKAMogHByBOfpg5lLt1KG0c\nGNwVBc0dd+P2sd9OO621tjQ+2T6uHsD7L7YbI3FBbdScgziHnxK7oNNsdq8f\nHvLNYVgHJGZxQREnjngFGzDbhlQo6UPPVWHzwQGCDmisK7bpTluKUVE5Wd9+\nf+W4lDEd/UGGoy2d4f6MJxoBwfzRBGz5ylpLNASBbVbnA+ih4gdbOoAh+OeW\nZzpAfJx/SMAzRbQaVDIXqwBNKOkxHTpihR42gmW4iHATCGD+s5GCxLmVqoTA\neKTQUmd9a+Ulpq2LOxReFUQV1yPf8CFrq8k20vq3wceIkMcvbyJsbQugF+k/\nkmlE0JLFSLbrHUmKSh5kKodibEFsEcvsTAjHsfjoeebhawtHmcm+uBQy6XTD\nAXxnfR0ElyPA6rq6fcFMNy9cmGN9xPUWS7B2aPK4h7k+ptxotCxJ2GjuO2DY\nQEBl\r\n=xV9l\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICA/nUaAEd0QsztcHxJquq91+i4MYom6i/fqYudcVY1xAiEAmCeANV8CbACcvf0aKKzyVRYDf8L3zKpxNmHgWXgl8Ig="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.8.0-alpha-image-service.33_1644616456301_0.6042686245301656"},"_hasShrinkwrap":false},"2.8.0-alpha-image-service.34":{"name":"gatsby-plugin-image","version":"2.8.0-alpha-image-service.34","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.8.0-alpha-image-service.34+6ce5308357","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"3.8.0-alpha-image-service.34+6ce5308357","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"6ce5308357ffb544bf212a22863f6939d1e39a3e","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.8.0-alpha-image-service.34","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-r6vH2aqTZj9fnOsicf5jvSwmPJZF6OdfSvAHMer0bhbL4n84cCbNn8tIfY5FSwOy/IoliDdNdzJ9v7RLLVJWzA==","shasum":"5475624a013a9434c83f032df25e01e40448de5f","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.8.0-alpha-image-service.34.tgz","fileCount":99,"unpackedSize":731773,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiCEC7CRA9TVsSAnZWagAA8RIQAJq1umpe+1kn230EzELY\nF0N0lEc084qsW9jVf3gBzFJDlXsoMU+xIWGVJT2FfP3kPtcickO3RvWfkKYU\nMa5F1yYr/TmkcWZmZTuOng0Yknf/kr76a2dWcutJ5wclaYq2FV/TMHgHI41R\nANIknlYS+kLpwQbzw9zB0+BYPLGngrP0Tse19M+SaYCo6QeiK8LmY4jbk/Ul\nrzIyxsX+GovcRLsrAfSjoql70FlHzWqye1JSJ86c1g14HSrbNBg2RSzynGli\nG8oOgkdldSRtKzWEXeoB4vL8kTZPE1KnSFl8c41d9VHvGuuKtF6DChOnMvHs\nPHDznTbfCXzj5Tdm0k44hrhKYSTpYij3lyRcVXJCc9CywsUQOBOqz+CAWKdj\nNcZ19MC2M9os3bk4pVo+d2d3cd5RmysTGGuRm6L5i2mNx+ZlhTFDw6zMBuJy\ng1Tj8U/H7a6YCxm2stye27ITLJf6HKq2N/uZXdPRWaamH3PVtM9DD0qb4oeW\nhk5O3pmHLZUbJE+gkzmKwgHuAWdzQgRooF5TdVJ4ZBuHeo5oAHwBKQP49hPi\nvJnei54eSdAI1bO5C8Nwvr54JHxquibkvhzsZDh8EpyISsAXPuiqAVfobkiD\nVEjpqbDWk4bw5SiabDFdt1FIDavGg6iMHdR4UJm1ziwPzrCOwrDlA6G5LBeG\n0maC\r\n=OZu/\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDhNv+Jaj4GvyLAr/tsFYGIqBAgaNWd7ql2iaY3xAs9PgIgME2DuzPoOhI9vhdjZCd+ynZ52wOHxF6SN/L81ZYe2SU="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.8.0-alpha-image-service.34_1644708027236_0.789783992489856"},"_hasShrinkwrap":false},"2.8.0-alpha-image-service.35":{"name":"gatsby-plugin-image","version":"2.8.0-alpha-image-service.35","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.8.0-alpha-image-service.35+a96fe2470a","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"3.8.0-alpha-image-service.35+a96fe2470a","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"a96fe2470a94e60c07f99c014e9ba9f16e68ceed","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.8.0-alpha-image-service.35","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-K35IYwjfUWrUXcBIURJfxJo+ZeSjE+4314lLT31kHiSnfZB4uE2zdpozcD2QuF4azvYAWzg25faWGPZQhHys0A==","shasum":"72a5f16a5d52ab6833fe2ee2410e15f62f816d73","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.8.0-alpha-image-service.35.tgz","fileCount":99,"unpackedSize":731773,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiCL55CRA9TVsSAnZWagAAsvUP/iFP8fAl1d2ez/ZZ+MsI\nMCiyWXCm5cFpZhmU/AmJEGby5ITbVVabptpOXfFlFas0nPviTNRLs2/U7XYw\n5wWxQ7iuwjWmw7+2nVrd2wzyOXwsd9uIYzfmsvwLngUbAxV3uT9Mo/3vmQmG\nxLU6I2oG9VMZ07KraKEhAH4/+wV4Ec/QOxDZwdSpGst/EntSNxOwoj06pIZE\nu8iKo1n8iOUtsr/TB+x6wxgAS6g5FzVCYePgNeAelWJYES454ruaqbrbHWKV\nERSGPY6P1TqpcqOjIHLAlNLABeohZzvlVA/g2TZ6HB7zJ1RG+LN9fiOA1ieu\ndeBJJLy73ENJZvzK4A5nkO/e2jzBaH8jQLJbWI6o7eJTpzT65qIRasn9kXun\nwj1S8vIPHNmrNQYHs5ILbjsOJjPP7a99qsvTK7O5+nrIR/vn5XKCFJX7xb0E\nwvBwm9gFpfjFdoH3CJZS2019fAj2vR3htnjjjkGbic9fLcvY7WHQVE69muek\n/iNnVKNqxqziemTZziKssFH1D83heb76hToCb5slZGQkokd7Xj3FtiFUb3q/\nnf1OToyvyjhiW/DUrNxZBPYb6jFOqa6kwci+MYfhUcACtszvHi9KU0z/S20p\n0qT3CbjOlOartSuLAiSvmDI2T/7tsBK5QvFeOuIJz44u70UXTmAKoG0fr++B\nRlb3\r\n=fCVQ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCrpA4766uSbiy65SkvZYyVqrEx32bAy5EHeNfxkNulBAIhAP3NCDXwLRqUXyJZWpqQJ/pbnfLSXO8tXkF5iIFXOFoe"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.8.0-alpha-image-service.35_1644740217589_0.4568747383157228"},"_hasShrinkwrap":false},"2.8.0-alpha-image-service.54":{"name":"gatsby-plugin-image","version":"2.8.0-alpha-image-service.54","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.8.0-alpha-image-service.54+d36d65f781","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"3.8.0-alpha-image-service.54+d36d65f781","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"d36d65f781caa60b7769cb8a253f67ae3e251b6b","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.8.0-alpha-image-service.54","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-aZNg2v4hBS7y+4mTvkiasImj2HxTG0FIpjQQG9tpSjjGy5N7AjITZiiJbZLhWFO+HaLetcfSjR31lGSmUhJV8Q==","shasum":"3ce7f177d1fbb8e032a7f18cb0f2350bc0a3315d","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.8.0-alpha-image-service.54.tgz","fileCount":99,"unpackedSize":731773,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiC41TCRA9TVsSAnZWagAAIssP/29hb0q9eGoW+kQuhAW2\ntiJ3q7drQWp+VH1fc0no+1YWo98yUqJ/EsLbbOm2H0C7Ru21g7fitPOYdq6Q\nvByNrrIUdamJzd6vtfpyIQKGzCwuKqXQ4ASujnUsspQ3CJjiOeSb+QgkSNgm\norNBaIPe4s+hRx730pcQTXs7EYNhhyqZFEYE+c5GvnjG7rUqlcGA53BhKEB9\ntuna+uegLVD79ew6DYvypCr89rZ2mW5sjC3SBVay+rYnNFFK7BXNjuw1G2B+\np+rjIYD9qu/D7KaEjN5kmwcUOwSsI/+JsNkSkpom3DLFzswCi/WjyBIxtizZ\nRSyG1W6rCGMqADwIpCSrtTZgYBe9mggnw62N663rF0qkwjY375xqKsL2M8lS\n19VJnJ3EpBPPGwxTjPWYamQ2Tz+DGTZyvxkRgwDhVtVd4irMBgExgf/pmyZQ\n5TXBhdENI5n0ECfe8/NIlOzRAni6WrR5NoKoGyg+dFoMHJa5qhJjg8Ye7ZhJ\nEZ4kFJ8IQbghmkppb9EQU0sZ+UgBVXjoTq8HuUahnJ/bI7EZJ4mNoINIIK+d\nf7ngqmnjm5K5909tEpMOcHvDJH44KUa7tQJJ/wYbX5SW8u6HgBBuTudt9mHt\nvYdO6gXyrk12kNpGvaJiU/yL30ik65ezxr/5NCbiJw13pDq67dujjQdaKCT8\n/Eh8\r\n=K65/\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDD6BYQnCOk9HwcKowXN0nedOHFPktI19YB+BgRZ2HI7QIgRobyemnOZ+eeTb/BZhvp+R7tcgLySTjTIWjUduWEbp0="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.8.0-alpha-image-service.54_1644924243213_0.793628014025952"},"_hasShrinkwrap":false},"2.8.0-next.1":{"name":"gatsby-plugin-image","version":"2.8.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.8.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.8.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"45cb1f1b1cc3badbac16a17b298e80547b2f280c","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.8.0-next.1","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-B2R6hhZmjDA0eoEgmNBDBpavPmvdmk1oZmJyANgvezd9CLFj9hPqTi0dSsUz6bnVIVYl1xuUDI+pkTyrqyqKfg==","shasum":"6509b15318e2df60ce3824374327719d6fbefaf4","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.8.0-next.1.tgz","fileCount":99,"unpackedSize":728861,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiDQ4XCRA9TVsSAnZWagAAQNgP/AgyIo7EKkNYOO2O9Y5I\nii9j58/1cZs0guvC6fJyt60Z9J8PXiq50bwGDi39wop42EfddsFW8vhpXcMi\nxliKNiMUjJ4y6dLk5GO6pvlaoq/O1/mIqFYONZn0u6oTve/CRJn50AUAWnR5\nWeLSIa4QTklgYflBCRiSlgu7Wlbdt2xwuU/QFuRFQr/Qcx2H8nx2+PW7Zgrj\nd7WFN4tM7yJrEy9xue8YcETXgtf56u9P+E98XvuyNX0H5ukgHTYt84FVzQME\nO6j8CNU7zdl+Gl+SHOQosXEnkqkrMVUrLQgC3Ez5ZPoEXu0K9GOPE1zA9hlT\nFbhmZ8hq5DDStzp5CMbpeRiT+cBtn28yjdXbqTkxHzgkVZHfBkXV7GC2dzWR\nCe5LkXlNb29A1HmbWiSLfDx5L5YtvhB/UNCb0xmnEbQ6hQKaMZZWD5Eye7jr\nRJwpsW3hoilQ/VUcO58uq6ygBGPvVOYrwQej2DlVn58jNWMoSeNZUckqtDBf\nxHwhgsgDJDOnedNCYBEiF+BPwb6jmAW4RlYXBc9YWK8Lb2dbyBKQCsh3Z7Jv\nffyvEywajq89yWiWtmd1klM9QePrdD6qP4atC/capyKi5Dyv2dvJUpVxjgMe\nd8aW/3rwWyO5nCfGhZne9yJEB7zIOWuGGwA7rD751sqX9DjxhZ4YGTaWVZvz\ntohE\r\n=2fNW\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAcIhAYwH/kyv1I2eb7FkeVh4ROEnMzuxhDBM09lJFvEAiA9ZTe4qvqECyj7rnH+WFpXJygPDHhpzqmrC/siMRK4FQ=="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.8.0-next.1_1645022743419_0.08258319745565013"},"_hasShrinkwrap":false},"2.9.0-next.0":{"name":"gatsby-plugin-image","version":"2.9.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.9.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.9.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"2846d70c309c734ba34ddf06241023db53adc050","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.9.0-next.0","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-bBuLSLs+U+//H/gCKKAjOf9KASN2xQZqo9jhSNZ0H48Xk8vNQLH973mJZer7aSS4aRr/jaYoCpdm+FPbWUbZWw==","shasum":"75075577f60a33270fb038eae7f280767e79f8fd","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.9.0-next.0.tgz","fileCount":99,"unpackedSize":728861,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiDi8RACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrTUA//XJf1NSK7Kclrkl/MH+60azMOgixRx1IR5LfXeM+x3U7qOP31\r\npWzcW1YTE5jstyvF+VYjUe3HleaLgIBoi3X5XPVf4frZuf/xLYzEButFiPrr\r\n5M9NZo/u3f7GQCGesT4KvwshY3qUn95nxLSJaYbKnehQIrJ19RDLPKUjIIbM\r\nQYY09cxzCrhgWaVcGXVOg+7A9rmDaNvVSigtjJOGcVV1ucoZjv0madCUy7CU\r\n28tcsZ0nxG+OkKxiC+FqaqdECVEdq8n83LcW2loSimkuXG+uRYPBetb7MWMA\r\n1ssVhHYzWlxp/I05HCorUKBdgtakl9TZzl7hx4GR8gQTYM0jSeC75+IMiQde\r\nRlbRhpruF0PC9H+Yn/dImV57rvbKzbQUCanT46Z3k/HnKTAj8gIG8gmv19cs\r\nC53yuy7yawr8V7OXVfFwDJ0+74+KTuXHCLpsJVPfLtwUpo7cD7NnSycjNTks\r\nekGqWMgCWH7/Bko3cL98L/Zd7EVBPVec6K8hn6hRMd/M655c2nQ0VxtvlkE+\r\nH2kwFBdYnvSwQ5KYu1SngBD39IrJjU3tKeA7BXUl5+8EPPtAuUL8mkR2uHwW\r\nGiqmLaCYOewhUIwqKqwwnSipXYrH+CUmOKxcRZLTVKCEt24LfX1t77pXCRTW\r\nOu0s7wz24kVWBzlXrra0XfX4kDLxtOfF9Gs=\r\n=P46N\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICA/kUQBbL2KEqPPg+/3IfZTpnwT9Xwr5abiO3m8AIs3AiA7pY0J3s9+gwRjoM3H1nNHdfp/PXWIxzFlUnx2vAiVfQ=="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.9.0-next.0_1645096720754_0.011149866190563573"},"_hasShrinkwrap":false},"2.9.0-alpha-image-service2.14":{"name":"gatsby-plugin-image","version":"2.9.0-alpha-image-service2.14","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.9.0-alpha-image-service2.14+3e7c95dc99","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"3.9.0-alpha-image-service2.14+3e7c95dc99","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"3e7c95dc99286357bb1397106c3b4626c8ad5506","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need to is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.9.0-alpha-image-service2.14","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-+rnjolAc446QaubvOdC280SVWzo8NjunVKEodS3jS38FXO9AkZI8CZ3sUhgClDtk66s1YrkeLD7jKy1/MO/s1w==","shasum":"7f06f4799f35c0243a604b0098be4d4a3dc4bc72","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.9.0-alpha-image-service2.14.tgz","fileCount":99,"unpackedSize":731776,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiE7HCACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmotGQ//WB9e5kLpMV3FIe+Pvc7f2Nm/P2lVyW1Dc+xwno+XSJLdfGBp\r\nJKyQEKpKY1AoESOa5CS+rBsUGev5eZR0jYCog7keNvMsgWNunOBiB6O8A69+\r\nyRfcyLPkAObfwkRHZ3QAVPE7peHFUm1umVLSpxRaTTba9TtR/skxL4D0UehB\r\nvvfK94uNLENU65z2M27DBcc06OiEmNcqvgyL0fQh6zGfisJewzXw/iRPqP5H\r\nAfctcbIlAbaK7QLLBBZKQFszWAPpSFU/U1bWGkIg0oiR+6GUOIEY82KdmgSQ\r\n7+15856zhKM369Q+bThMATtGT8Hd3XK6AZrhvLBN5HxPamSK/w5K+x4KZI6O\r\nJsix2TKsF8WTo8XKAKln1DDuD9FIb4ZOj1zunrtiIDAKoZ7FNjvm9A/metnn\r\nMkuFGyLMvOFfxnC0vA9aSWgDFD6LcV59GXKuIykMpWe3L8a8LLnf59cBUdm1\r\nwvU0To7lDDdHFFRtinrXCbNuBhWo7vpwPkmFvJN7AyY+mySzf0fZ8p3LmZSM\r\nqPshUGgB08vPHC6ckShzarkkRIJSbPEeFSsGIwwYQmC7IbwCt2PVUjk2/kcl\r\nrTiQjXOhlxvp+PZoAe7w1OEVO6ZklMbF9RUNX+64hTzJioOyW6ZOPntgy79X\r\nWG9ozaoKIxfqrhV4MW41Q+oejNFhW8TjQ8I=\r\n=Bz1U\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCoPJZJQEQt2DzaDHG8xdKDvYMZjqXfoaLWkEIlCEX7KgIhAI/TQeUJN7z5+ZZfibHDahusMZ5/uVx3vkK5SbBZ4/i2"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.9.0-alpha-image-service2.14_1645457857867_0.2739271560344221"},"_hasShrinkwrap":false},"2.8.0":{"name":"gatsby-plugin-image","version":"2.8.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.8.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.8.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"f6734b93eb0337930ef9ab54b564d113d4fc730c","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.8.0","_nodeVersion":"14.18.2","_npmVersion":"lerna/3.22.1/node@v14.18.2+arm64 (darwin)","dist":{"integrity":"sha512-0KdrbE6+1FV8WmVakBKsbzZEwp0gg0DqcZe3RtAJVgL06vGnN2ybIG6iM7M9T6KBXMl5q6a58RnlEr+aNrb5Fg==","shasum":"289f3049166e9be19f314789634c9815932c16a4","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.8.0.tgz","fileCount":99,"unpackedSize":728840,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiFL2PACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoLig//QsMgZ6XMoE5+vW6UDkcQJIToQS0stbXjAhaRP6dZyPB2fHlB\r\nMckJn4iHF1q1F7Q5T1abmF4QJgy7fFJqHMteJqo/xw/BbJIx8uptMWe8IkTg\r\nA8Gm9KavmtmIibt2OAgjCFLjAZFBrFdQ7g3dWqv+0FY91v0/x+NFcQhtmzC1\r\nABXk7KGx3JcYxqZ1HNcjFwt3OcJBnJnKltU7v7+wg2mILgnBGXEFdl/2lvDG\r\nOyjaMJCMQNngZ7R1LWFmOxPJqC3BjzFKjxkk7j4lunrAVUQBfytk5CZuxCAf\r\nL2XXKxiwBzhWGroFk9PKmTgniUNBFATeBHltjXosMDvxjPWocAyJpzUq3wck\r\nn87H3fWHrIbTsQ/uO3VTHWVGKYkw3jE0ls1C4GbDyg+DWMEbdjrwUGcmI0cD\r\nl5bhIgObGu9BAkkjxNYL2EjJ7DNISzTcY0ppywt8wVR5AjQdhfXb7W7J02O6\r\n70OxUx3pvpjCETqlqGzNPC71LjbyOuMv3JZ76NoWXqEfU3BW5DxekWj5IvHM\r\nFVdA6lTp8xttVkta9ifudMDRAkAwDfR77IJbuQi+/MAJtGceJtNP9i1LRoJF\r\n0sPFJOOrJM64acMaUp5+qKIht5PiIyPmSH4fIs5EaDzGzhIEmW5S37S86xUy\r\nxuoBS7QPkPt54yXqwf2zfGwfGtKF1Di1Fdg=\r\n=xF2p\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC7uJph25f/H48I0OmRg/na7IFc/VZWz5A5S1T8ZoT15gIgKcb00e0J6JqSPfgXDFmnAAXVKSUqsc8/7bu8Uq57hyY="}]},"_npmUser":{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.8.0_1645526415808_0.6363581982593907"},"_hasShrinkwrap":false},"2.8.1":{"name":"gatsby-plugin-image","version":"2.8.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.8.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.8.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"f365eda91877969165319381ec63f8a72216bc43","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.8.1","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-ADp3Wsgb9eiwJknjDPuM8pBdkZpyOPwm/OWm7RFdKbrtfziteIFelSvwd374cqVo9TMqbs8yqXm1trgUOWJ5qw==","shasum":"b494fb7b237c846b68bd07877e7db456962b2483","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.8.1.tgz","fileCount":99,"unpackedSize":728840,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiGOaoACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmofPw/9EEvXym0fl1ff3UXnmTqJArf2uLtkMl7OqtHcsM4suLmJ4sMB\r\n19td2ZVd5cf+xlTqfnGwgZSH0+gu2BWjwtLxVA32KdqVYlpUzkPrErBcRaVf\r\n6P4utCnAqtCHwGNZJJJKtn1gl0txd6IEn1s8eyNLr/6+bWP6/bLJGTKdtOrO\r\nAjs15iZ9lGnULaS9yMfFCc5TvFIVEPSk5+su8T1ELD29s8I1qHFQmoIvH2g1\r\n6ZDDh7g8D11+yxd6BeMjAsKdQqzenSZBeXJkd5C1a5Dq2aFNvOOBVzdpEr9s\r\nKKJ2cQNtv5trSjULYbtZcnWihToZcb/0rgTFpEpFPISteJqG4Y6fF2jpVBZI\r\nsHint83uMeldofNznIEmqZLaWGdI74JxgeCYKCSCRPTAmUJ6qjSGgr0aZn4g\r\n52zYFmfLTzFVAWg8bCB04M+G4+X9IkyKsSY/MZeeL1R9pNV7ROgvnTzLvNqf\r\nftshOWkyekChcXsjGS+gSP0YV0O5HdQOXAKO4KcoWbgiebncCwjUgRmehG0l\r\nI1UsYMWzeAGAmOhbwHihLFmJm2yx042DJNj9rGmo9KsKPao/I523JgToOHrr\r\nPsdfO7msrxqbqWywaBwOdjJiAJ5pzDxYXuA8Gel9hQg+Kvc5ZhS857F/3bfG\r\naV304bqugL5yI8nWiB7LwP+TxHWHKO3bfz0=\r\n=ctVv\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIE17FMtV89JEfLEmcq0yi1BuWEU5D1B2LB7cCc6QVcAWAiEAqX+0RrbS2s81tFjPLQviwPA8a6mXblyVxq+xoxa2Q1s="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.8.1_1645799080058_0.33773331380739924"},"_hasShrinkwrap":false},"2.9.0-next.1":{"name":"gatsby-plugin-image","version":"2.9.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.9.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.9.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"79e3804771fa23c3de2976915fe10df1f3a7feac","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.9.0-next.1","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-7hwXsAzW69D73KXFTCdozxrqM9oC6SJvnff8BZgPl+3l6Tn5dx73T3k9cjpQM36SA0/zp5m55C/bRoc4Mic5pQ==","shasum":"c9b3ce2053bf08503161f835869c2a96b848af58","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.9.0-next.1.tgz","fileCount":99,"unpackedSize":729311,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiHNwcACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoAAg/+JbZEe7aagQZmk/nH3M8DN55kfWINyYsbZw9lUl95WLmTebQV\r\nuX+x3Ihr5Ma89YoEslhodfjh583Cspwdf50CnHqpzpAf0O0tr12X9WxBIsBe\r\nMq1d0l/U4dkeqr8lAtms5iBhLaDqItEVBkNr1jTwWY7t4psjXamikX1JM69D\r\nVCku6vq+BtIQ5yN2x4l0uXGCDXporXor6JQ+AH4ASrlzdpscNyJ2wPG+mdbU\r\nPc86EeFg0bEStKiWtMewTKTuV7jfayXH8+lUez/wah2YFzOjnYUuhiaPq3Mh\r\nMZ06YjnwZoiRXkd6xYfSMkyLf8jprnAyDs9spXWiM1GaqlUlNKhH5hUYj03H\r\nFZQ4plRuVDR/ZBYw5gldIfnQ3tjEN0I8Iu+P2Ht2Q8/yh0JZM4A1xT5Wh6vg\r\nfQ7a8m/+PzNIQ6HwPbH3GUD+zU3FfDxMpEtWC9zU7YZvTkfEkpPyNhSBE2fG\r\nzlI4d8WtaN8sFGbZY3FphVHq13Dgo43MFlqPPBIuMAprNe7WvMC3lqXNt/zc\r\n4dLxKU98+1jD7sO/XFEKR20o3rJ3N2gkA2wNrAvekcpB97ku3IQJT7JJA6x3\r\n0Q2DKWRK7f+MR8zriYnCEcVNsK6cOOL9YeR8dH0yEm/3sqOj+ogu03JnChEj\r\ndIqfkFbDWaq43V9zU72hEvIFAA/CIu2fC4c=\r\n=ZIC6\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDgA0p5bMWdWrStkZ0E6SaS+gAx/XTGjYJ6GCwLtkYL5AiB/XEBGLQZa1e71CltYdNZNwvb0cn4JXEClZLTt77kDPw=="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.9.0-next.1_1646058524150_0.27355529055739214"},"_hasShrinkwrap":false},"2.8.2":{"name":"gatsby-plugin-image","version":"2.8.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.8.2","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.8.2","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"1a295995daabaae7bb2603b2af9020e5ccd016a0","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.8.2","_nodeVersion":"14.18.2","_npmVersion":"lerna/3.22.1/node@v14.18.2+arm64 (darwin)","dist":{"integrity":"sha512-prt3UtiRkY1OppeX9OHJuo41HkQnWkJsL8K7djuYNEgqP3J8BFxqzvhZ0OufdYHRelTq48cdIaZFPui4gYKDUw==","shasum":"622bf7284bf288b357504a0879338cf81ed79c97","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.8.2.tgz","fileCount":99,"unpackedSize":729005,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiHeRtACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo2ag/+M1Zbj5w6QnHJDMTYfPRtLA63IPD9Avu+z7mfKoQ2pOKHtUbC\r\nqWkRXpuwTzt7tDupfQmXrEl7f1Smx2u4lJ3ERe8SDKmdqMpT+zwCXXQkImHN\r\n1cTpeZZVx9NqcpsrKSDzXwuUFp2/r9Fw01uV3MDC6mXgtjCSEKf+SfMJpP40\r\nbzmewwEuw9ATq8Aqt8sRzHk2sXU6AkkhfcYEVSF5K6F3KWXlJWRbgIfo/Z9c\r\nvdwZUwJR/pzVAbAzxo2OyC22NSVzznb4m0OGIrg5IM+ev8hq+23Nv1KcZCKK\r\nen55ng5rWADmt3f+ogawZyB8MX3a093MI9RbNYS9gGrIIVCIfrw7BVY2qF0n\r\n8n3ayxme/O7zu9YvJKmZr0us9vx/vREThvv6HL41s66NiJfUEqZ3gMaSkhBO\r\n9cG5xCDq+/3bkvo3O42cJMFn4q8sEGVvJb5Z+ATXUVJfNrBw9hHKms6gQOvM\r\nYYaPvq/xyQXMFxfyxOY1L2vVD986IHzXoKTdyt6bRBN6SnJM9Y1ZGC35TnEs\r\nLj6cB+VXempKE8aOsW6VcElUp91tEKbNaz7o+DCZ81nIpkmSpeBcYSV2ysXA\r\nTg+BvXeJiKwFXI/Z1tT4jwzHNaMium/C9RdXb9b5m0GHbfGciJQzdo70CEid\r\nYVfmCFmpuLkDNx/dHPernxvu3Y17SdE/GSE=\r\n=OAX0\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCmEvF0Mogb2jMqu9gi+zovv7hq3NfYko5vL91Q9meodQIhANx9I6RcDy2PFlBxoHCWS6hnhuxq/Zmk9QedIql8V5g8"}]},"_npmUser":{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.8.2_1646126189541_0.31622039758473885"},"_hasShrinkwrap":false},"2.10.0-next.0":{"name":"gatsby-plugin-image","version":"2.10.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.10.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.10.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"84336f93e244080fd9d9475e9b45c5c8d2d337da","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.10.0-next.0","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-1na3Oql7BuKc4zoD9JzW6Bv7E25WAXJwCtoefs9FoknxDwOJh7uLZdp/a2agJ/Ei5h40MGsCqgE2ZZYa7k+1ng==","shasum":"4407e5c7986ce3b7ca6e334be798be990e4778df","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.10.0-next.0.tgz","fileCount":99,"unpackedSize":729314,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiHidzACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrHvhAAo5WO5axXmW9RSgMOfzmS6Dlv/CKVe+suu+6HC187Oth/1dT2\r\nGmobuObtbm19GJ87M9mSqHjhn6FcACgG12Ej1ueTvTBARvw2UIk+VFe13HU+\r\nhGE89Sx8BkN5RCMTTbMR8/ifQYLDjMF53m/qoSh9ID5t5SAnDxV74OGoyQn3\r\niqjclpatwM70OpmUHAnvy/QPTCZZZ0+Y9lMGzyKdGq53p6Wbbv6a2Mhkkzff\r\nwykxvjiAPTQ8HFzbjfhZUY/Lup2BGk86fln/H9piIBpPeIhoICsQV557KpJf\r\nnRUvZWfoBc2WfeJKjyEBhYIFHPK75geVKZfRTmOWhxvmrschvDDwLPdAbKJ2\r\nm0084onJZsntiy75CPPLEYdoTe+W4lWtsEs0w/hhaXWFp+WNuoYbdcUQzPST\r\nnYqOMHlNZJ4mnxzklthcJoWlYkiBhdP06SyIivX1xDF+ArtQzAeW/3FV7V2L\r\ndJXszEgGnag2pZHIcAHxpHKvXo17ivRujTpp4nUupAtSp1tYBkKf0wpIXM66\r\nPOodhM+X8M9Q6FMt4nLa44Dxw7z8X1JCUQmT2TQNLkaaPvRjmAVxH+g5R1G4\r\nQ8EpOFqZCloic0XHlyLcoItpNzotSRdy0Ucsga1sYHOzuq1yKy8FS7MXIkDo\r\nGrMZe/ZzI5A561aEialjKBiGybnzd4V+WH4=\r\n=CiCe\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG8qyj583flu/UlmwbqNCQ2Ym0kXtlKKBQdnvs+WtldbAiAkgL3r2ijTC10DyAKXXR4DsOVzt2c9RtR45ad8LkHFoA=="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.10.0-next.0_1646143347461_0.8513936110236784"},"_hasShrinkwrap":false},"2.9.0":{"name":"gatsby-plugin-image","version":"2.9.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.9.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.9.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"6b160cc0934de95af9bdebbaa8798572e3770337","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.9.0","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-2LIKmwACRNXBnh30zNhlfEDjSPL60G8vi4ZRAmMpywq7SVXJJ63lKiBRF+g2aKcN/hW0hvBPh0hgQifxSBhbYA==","shasum":"4656dec9c93aec233792012ec952328e3dd702f7","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.9.0.tgz","fileCount":99,"unpackedSize":729290,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiHi2kACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpyLxAAgPlgShVtksb+3jAD2tblqajvguQNqlcUbWUP2RdcOirD1aOx\r\nccYSQ9K/NoGd/UMHUTVtWQu2YWP6knjBhu7TrpARCNfwzJu9G/WGpFRcycCB\r\nsajOuz0a5ktzVnunAblgtpsWVaiF9vvve2G6TBAjE01xFzUDOk+IVUWktxVk\r\nVrHxr9G7YaW7SjqPwdnYudSwfD514ZJxfyzl18sDS2EibPjw6CHqe2Rf9AKV\r\n7LVq2FCd0mLpBJaGhKdWZL2tICNAd3b2NnaLniafzio1jBpHAotHOlqEFcwp\r\nM3hv0YL/mrf9ipwmlrDX0j2rRg6m2iPa8HQZajZJ8mPgQrOO1nQeoMmZVdNs\r\nVWqFECZ824u37Jf6r92sjz0ZcKN3yTbqA6+4iAciZtGV2IJCNR8XIOGA7/8/\r\nNDOh3QrS3+QxAkqh0GAQ07fRQ4fUFovPViqIbIprqmP5KCWSiFfomu8t7HkA\r\napPH6ywbyNYZbdh/l1N/bQySiCn6G54rxWbITQ+P6xnyUKtdFwQmYQaWeBNk\r\neeCRsgZvxq2XoTgxw1ieaHYc2wHBwpjDNiobVgzXc/0leCWxEO24raKxp0Hr\r\nLhjSFsUbO2Rdo4MP2DyIZmypPKPJgj47itI/3oqOfVtnTOOSvZMkOY0GJMTP\r\ndxTyu4kq5xcw5LihP0mVkUukzn4yDk8F61E=\r\n=AkMb\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFameTdLO1zkSb/EWfRSoAdODXQ/IYXJkejEM9Nmpno+AiEA/zsBY0Ym1l1xQaoVSvLldZ9CKC/y2MZ+lJRV1bszfzg="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.9.0_1646144931929_0.19384976753508987"},"_hasShrinkwrap":false},"2.10.0-next.1":{"name":"gatsby-plugin-image","version":"2.10.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.10.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.10.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"5e329c0cf5ec463aae1fbb2843370c1fcfffb60d","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.10.0-next.1","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-p9a3bMF5WlF+o6b13rPHq5U/+OBUVMvCa06HV1AUrLJwYbxaAb95geQ59BVaNxVSSq7vbuGC0/yFkJ5IUPOZzA==","shasum":"495eed4ffa9164313aaf592dad6d47090bc3373a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.10.0-next.1.tgz","fileCount":99,"unpackedSize":732147,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiHqwGACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpyRBAAmMh89Sso0jNvTuMAaIbFNnPROxfWD32+Lyx+yKdmr9wH46qT\r\nWMqfIruNagus1SE28HMM00cca90YU4HEBQW8HuYPh4P+MzngU9ElRAJMl2nL\r\nrvU19oPUmO9mKbLS1CaxnqxvB/zTrXfZT4xkm8Qpv3CBswykO6rXQnhIa+fN\r\nWsImIC6llKEtwIKhJ+8/yqCHdc9xwMD5GZ+g3KDOB58KwkSFUW7GRxjcI7pM\r\nm8yN+Kw34T9kY/PTLJ/7GHIel/OM775hEpcpeJ/LiknWk8BC183ux8e0Uo1Y\r\ntTtwqU5esf5/rmGxrVbxKffjUlE3ivPJ4ueIOIHMJ5pCV3peEF+Bu4EDV9iU\r\nz3M/s9K4zAPzPZIRvmhBDBw2xBfC1lR/84jE4axYC8UrZrMy6JnLGgEnsohY\r\n3WtURCbIyFO/xvagWI8tqOGAwSRM1/c3Umu0iOj1QtM0nV2OH5dFDQ84Elcg\r\nOOD/aJ7nvH9ezUAUphHMsx02tyEc3Fdbx+eh3/27tswPtuWtjIMQJLSinTK/\r\nivDGZ0sXzDYXCtOA9ADNEdPqSFmIFHxK8dUxlZ4jRQ7vNm8OAQSfIbl0UpFP\r\ngjyHllSFR92x7v4QtAuLNqWc1e22dFDy2+mvI0W7o208Gt90iWCq878sL/sj\r\nrX/CDiyCzEcxFhHVxCHb5ZrnwpzqmzkzpAw=\r\n=bFKG\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC7SVnVUI635wUcpcXSc65o6MbQ9Qebzf/BiFwfVre0NQIhAOQX5BQcYoao61SzNsTTdoADPrJRVY6AWT8Wy354+QvV"}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.10.0-next.1_1646177285950_0.7435966680218831"},"_hasShrinkwrap":false},"2.10.0-next.2":{"name":"gatsby-plugin-image","version":"2.10.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.10.0-next.2","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.10.0-next.2","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"e7d08e20c816752c2754771f87fb94da33d9cbb7","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.10.0-next.2","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-N1M2Lqjj2mF0giRSvH0MRzXS0xwx+93isEN978AQ4ywu+xSYsh2fKC0CCdLO11NrUa+u4KIMFBmkODK5UtH6pQ==","shasum":"14b93064d24e76b739503000334b0c637f0e486c","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.10.0-next.2.tgz","fileCount":99,"unpackedSize":732147,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiHyCdACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqYqQ//ToQHAuWAXUHsU0oWzJ/F3fqJJ8pgTye/q7qo+TcqbVcYefCF\r\nCr43tJh4cMnXj3akKxZZURmJ7R3ddBHrDokKi3bikxSmgDtXOJYwKYVvmhoT\r\nR9awI5YUtRhcV+WHLapVeC9BXsZzIB9oVd9cDPCnHaA5dFZU10rNNLhMWCnd\r\n+0oQnCa/xsz/+SCmmxc3v1LwKicskrsadSXXZ4ZN7UCY213t9QE3uQtotVGo\r\nQkHgd/s99+AOwAcrtCn8i5dP5nUweKfhskoDVmWh9r6d/AMv8V7uaZc2FdIp\r\ni0OOQK84/RMzzk5EI/KRcsabVQK2D0N/ZT7ZHjbOl72Q98ZINjUJlieVfssx\r\nD4+xFLqvCgpfp0SRg1fudMPf/dzjqxmRHJyZ1tuzHTAo5q68WTgQIRfvX55n\r\nKuQKFfbWG5hHagT2S/R4AZbkaimWkC8G01RGygvV3kuVdGgryXltwaqOyqhR\r\nIRjtd6QayYNXBu7y/SSL8974ga3kLaxiqZMLD7s8TZNsPfIE+Db9/e5tRRmS\r\nKWTG44UBKoDBD3GACMFsaNSKiNdrRnGkieNQd8h8Zfz4qURyJziwJmaoyQ2g\r\nm/tIgByCFeUnq9UOKeQiJ6LmZOajGLRGp8E0AuUHUlRVqsAXNp7OmrE5rS4y\r\nLY/tQWvU7AjD+dIj0ZgwvldRbVvQu/rjv1c=\r\n=N8Ur\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEmgmNe28ezLBEoh1tbqA3A2Pgkp09SYXV6xv/K6Y+SSAiAmzx8UP2qDLS+vcMIUEQq3FDUDhfcF3q0iWe5N62CCDQ=="}]},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.10.0-next.2_1646207133395_0.47174567888165186"},"_hasShrinkwrap":false},"2.10.0-next.3":{"name":"gatsby-plugin-image","version":"2.10.0-next.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.10.0-next.3","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.10.0-next.3","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"711a96fe103ce558fd3ba29997452d120c2fc3ee","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.10.0-next.3","_nodeVersion":"17.2.0","_npmVersion":"lerna/3.22.1/node@v17.2.0+arm64 (darwin)","dist":{"integrity":"sha512-K3o/MvC+aJy8SewEo79QmjJw+KhYOA+M049tv/CWkFqtrqHyvQnDYNHs+ZWtbN54tSt5O4k9EqDYVgioiXZnQw==","shasum":"84b9fa9aaffa3177fa5f755976c6061694968ae4","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.10.0-next.3.tgz","fileCount":99,"unpackedSize":730016,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiJ4HPACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmrskg/+MCeH1TXfv/qfUy4mo8pYgPLTJYYOkFZ/l+9stVe3n61H3whf\r\nACJ+M3gXW31tjWzp4pGcrHXJTZUYcfpF/hXWob15w6jIgAkr7KDivrKmP2kH\r\nA6MJmtnVdjo92VSRHoSC1fCl/2CNjWJU3psadIq/gbnaNZ2YsH6dqKTxemjE\r\nJCIGF/w/147PM0XznCFQkncpqUBcOoLgHAxhwm5Zu8aIRxQblfZx6Wz/MoUt\r\ncZRSD4EBKqQ0sOjNnDjJDBB4vaZj91jRRjP9LgUFtWGGVgmSlN277p+bQ518\r\nA+Xmw5kvJwxwhV9wkkjFTNgIfdV+DuwbIN58CeXfX9W8TZftAiCNcumGMppW\r\n8S0NYLYpqLGuIqnYdWGc99oB1br8sRjJ+u0cmbNBTrGnA/+3YbEhAMdsmSAi\r\nxQxPLXEd0ZHFivBR3V0tmhVYvw05m3p8gPACBLnHw0SK4sPad8bwxvvATnfT\r\nxcWjif+Y+LO3Jr84KJDD0O1gzv5NJfj3/mCxSJIlbdDvDiilbh5A29znKj9f\r\nvOFGVHzpgux/c2WLxc8Y0T8zsXcw3dfpGUse5ElKZsJcDnn1tzDxq7Av+kVl\r\n0brbk/zsnFhTtcV3bmmtdU2ZMOYHLtJyflz8qLjus3mfjQ2D8heytNJ06ozW\r\njya/yTDKRmDQkTZakMnJhFUz56AhEYEiu+0=\r\n=AUof\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCyAw+E6FoZE2RM6YbHF5g7YYGQMpOIbpe/jFVGGZkLBQIgWoGYydZv2j2hkQOg35MOlTxHIaskVXHDyveNNlu8RdM="}]},"_npmUser":{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.10.0-next.3_1646756303380_0.07929897166992017"},"_hasShrinkwrap":false},"2.9.1":{"name":"gatsby-plugin-image","version":"2.9.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.9.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.9.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"59e7e0eadfea90ef844b53c0b53d098ad3d51c7a","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.9.1","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-W2FDQ4AZNgH247zZ1OTnOAAI89rApq0W4A85a9dUXmCgYoyqNgUZphuziMHU5P+6TSwO4U7FRriPtVltEFRsWg==","shasum":"007578c5cacc942cf921237633d6dee5ce658cc6","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.9.1.tgz","fileCount":99,"unpackedSize":729290,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiKG7WACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp0ow/+KTB+gnBUw7deHfDsq4u4Q9oWfALHrWB7YkiXQ8PHUQKrkMBe\r\n1lw8EpUvCHOxDIKkIG7mz7MPfGbTE07IBknC5W1pPdUYZMjSV+2QsAeuraqJ\r\nWHglYN2uzMr9ogvim6/RoT9qxq8CAqB3fJV7rSRrTRTvuNVRUkBHdXDvc+NQ\r\nykP0de0w5hyxvrdXVPYWMyn1kOrZPtrB9rhQpC2SqbxTaIELtT1ZWi0ReKop\r\nqIZAo/ToZWMKsce4KBZbIJhUYfuJxwWJNurcTg/6iHdHIPjJMhfxT71EAANu\r\nKiJ8maaW3h7r6eeaLA4n2g+jSLgddQuAM0pOCHoZJrbdatHuP7t7Mlc4AlmI\r\nZtmpC5IBgYlnH3Toz6wjV6MGS978qHWn6fje/LVCDCl2shpmQVYr2XuHqBWq\r\n/7bif3lsu7+LB6euR3b5vU3FbM4Mztdal6rR/OGlLGML7jpiRo3gqJuhN5nf\r\nzKYz1QZvWD7hMGcUd9MHXZcxnGnMKYG+HZe1bBi3p7m9mUjoUPPG8Zc8Kr8O\r\nOnwz4//Cq+GWWZYVfYRi+T1bdjcRoIp3KO8bDEPYwNdgxtdJ3oT42vydLumi\r\nJ7oeu4os+GOHvmrLd4X5sHpzMawC0SuoJfswWn6VAlAfwqsenP+er7BruVY8\r\nOQ/BWlVJ2hgxs4bMiJ+62BlGQOpyFQGUWH4=\r\n=JbT/\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC04XFn56+z1dSU4h+YJRNYqueNuRkd0Prm65DqNoxRBwIhAJQWNUkAnFm73Gau8Clf3V07uOFAFxQK0HTZ9ZYUEQeC"}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.9.1_1646816981831_0.7337763181163119"},"_hasShrinkwrap":false},"2.11.0-next.0":{"name":"gatsby-plugin-image","version":"2.11.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.11.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.11.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"e0f8815c007b7915f4d69264b8a5714a4c0ed31b","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.11.0-next.0","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-dBTImK+YhB+VxE3IG7t83CRaqBroi17q/pxDQdGQRrxicXXLypEaiT7ZaRtBB7SilvVCtmfeqJKpPPzb5OV06Q==","shasum":"b22bca8ac89f4d70ee9586725101eb35b421bc5b","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.11.0-next.0.tgz","fileCount":99,"unpackedSize":730202,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiL6zrACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmowlQ//dm2k7FmWNrvLOr3jtItv6bErxf13fwM4rDjJkn0iA09Igq6m\r\nn1ksMa2xdYM1XmK2nR9uHg/ks8xVfJDZ3vjCqr6v6Gx3iRrXKOtVhUZ90trK\r\n8qlh3kOd+G6lQZRlMDUdleMIg4eQCuthqDcQFi5Q/o/2d/Vk/Y6flpOwxRtn\r\n5N/nkYiW/BUB7MYTaO8yfrHnTupj/FcO0PCSPqw/rYaOp+1HUX6Mbo3OBaOZ\r\nYCmMezGzoKnZl11Cv1iW8AmBZAxlAyWv4yjVXGwpnReXOyreiLRL/+PJZWDP\r\nJpBnTssvqzdXseKOeRZlzVhacsbNa/RkiMD47ZPHjN/z+t//igEn6QyB8BrR\r\nYVMYjD0bzM8Xif+qv+uszQUd1FT2JkuSC2pFx9IGR9qJDALguajNAS8QM1j+\r\nhZVN3enzWoSGzEh66pLpuTYruU6trBpaN9fehluJ+u3ltE7naqGS2oVVCjmH\r\n5VJ8QBIjiuonN4frRwNxBsPIuiQ+Bi/I07xIc4O7T03BLmwZWmmtYR29TB1m\r\nafc+okaQiU4FUIJ2oVHzJLhvS+AkAigEaGHh/AVCqAUX5Pj4MCBNo268/kg0\r\nimPjVDqGld5DtMbG0ZNkdHIth2OvJIZ2CONoE/kynaecjsH4yYfXIRjZF89B\r\nqT1Zj3bCSL2h7FEbX3ry3GdRA3YTe2+L1bc=\r\n=Qnvq\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQClz54VbazV/x/AXnptJu0sqwSW6LdgiFK8OOqTJbqXmwIgZUUO6BOK5fz6mXrkHJTq3tK4+uQX5iw0jh+u/M5vB80="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.11.0-next.0_1647291627199_0.10001412000218313"},"_hasShrinkwrap":false},"2.11.0-next.1":{"name":"gatsby-plugin-image","version":"2.11.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.0.0","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.11.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.11.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"094270236d140c93e5b94dee1c9e3ecf0704512d","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.11.0-next.1","_nodeVersion":"14.18.2","_npmVersion":"lerna/3.22.1/node@v14.18.2+x64 (darwin)","dist":{"integrity":"sha512-b3fFsiH5lnUiWtetlcgg5WXlN+wDadO9N66qTECGxslOlg2gPKe+qzNNVt+ICRmt3K0EneYuDHZNuGRFUCrTaQ==","shasum":"5dc09b688868c2bb897552c75c0ead80057f571e","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.11.0-next.1.tgz","fileCount":99,"unpackedSize":738205,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiMR7PACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq6nBAAiwWpmWLA/TwgpUT8/Q4suKNUGXVSq3jpY+84xpkV3XBubbPU\r\n0SeZHgKfVyEBbtnPi3v20elI5YeoFhuS3dwdPnpg9UcUjvSqZZ9JFzbxXrG0\r\nlI8GKO+75jRz0v+FVV18smhQPC58f86lb36woX1OHcmz2JWeZMAgAs6JrBxO\r\nd7fNtkGIrXvgToqZoEvDQwBaCwJsdGEepZeiz/bhw/seCUnQ56FQc27r0Ow/\r\nXW0nmwSHNOP1Jqara7tb3XjrsFUBSm61J1n65YTgNPjlRLTJsaZlHn3uLHuO\r\nEPpbMV2cxprckiNxjghp2YyfG7MO5VVh4a5zoYOcIiJ/fu0s9BTAzfP0y55V\r\n/fjGSRFaStq4q5jtXSKa49V8ipIrdYij6oYkj80TxqRjdSXRU8/3Kjcw+8mm\r\nvvwKv5M8OMmczRoLCtBdtjCNSdLdSnqtJ83IVbPFwzJam3CMlTypEwCUND1x\r\nLuTdbBRIPyfV1v/RGzsuaCpfgwvbjNeOgB/CAWZWoS6SqHa1rwKCEtuFwnyw\r\ngZvAOwdkVkJqd3EEZlrbbr2Njk7YITxtoS3N2LLIAm3rin9f/pLAaIiXFFbU\r\nUx4JGiqZ1VR/hvLVWrxOCWuxBW+xnOmQuj0lP1/OsmsB0a/uERlVME1pViET\r\n+Klv9m1XBG8TMQ35LwyDmskuNlaUzaHszng=\r\n=BZ3z\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGzMarLeVKKjYlSxwFU8yMcacsX6GCULVV2bDfYiTTQKAiBRQd8GIdEuSEy/E8OKFE71v8Q/MJByiTlSO8EuXbLnLg=="}]},"_npmUser":{"name":"tylerbarnes","email":"tyler@known.design"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.11.0-next.1_1647386318998_0.14086515555947976"},"_hasShrinkwrap":false},"2.10.0":{"name":"gatsby-plugin-image","version":"2.10.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.10.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.10.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"24b9fde1c7705e27e5d7b24c7ef53189609f4f04","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.10.0","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-W6/RvRs27XG5TwxTEAhnY68g0LAqP6T2NDPPEzAe/V/x5PyPn5Zf/N1pPUoqqdJ2n48Wg2BSv3Asz5/4vHfRgw==","shasum":"8b4bb0bb2113ab5fa542e52e83f75228ff577703","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.10.0.tgz","fileCount":99,"unpackedSize":730429,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiMiz6ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr/vg/+L26O2ldNWJUnCtUzWQ3gQes5OTww3VLGlypzpOZLo5HFc216\r\nvMpstQt4aYCAqDO4I6pDCD5r9z6Bd7tjpydh6ISudsRIBzKvYQEdojknVr6j\r\npdXw5Dbk6y1YLMOkyqlzvHku8Zmq8cgWfIBgTOitMP2c4zuSRGNOul+QfZ2j\r\n+8qspqz7L9ODjm9LHTSlNmHgN/nQD+FaE3/Y26zLgtkDsTovcqab7Y0oNL6D\r\nXG1SncK731Id9h5wGaynR/LxKhOY/BWqD80j0i8xoNefvtE2PoM+BpSChzu6\r\nFc3C2DDI0gOyGmqUWigbw89YO7OxO9fzLJDcR3s3OEyefInOeAox8zmCHYt7\r\n7GB36uOMktWmurCpZWnvwTM6O/gXxO9CcOukwwjG6fcepQaW5olYWrzpY3bb\r\nUXzZ96U3w0mYPZqg4OCW0f8Ih6Orm4q/0qY4jH24Xa5/3CFeUBSxpT+d+nBQ\r\nkzX8E4L05YRvqKAxYRVZ53zxNTFOv45a9r0A3PojRNIqswUGOPv70+EDERnp\r\nK97xpt0jlpcm95G7cxSEBb9K2FvF4Pk8lW6yTSjAPm03lQmalLGI6SLAKs8a\r\nWSbEma/g9LDjFXHCCOaxPCBn4KnDlmk3q19eFFtvJI0/WE1fsw3Xoz2HqomQ\r\nkVJDfx/YsHv4PY3NIyUPpoOVvDqpQOtKkkI=\r\n=sJl0\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBkLp8Jqea+P1J4cZSTmwbiFgrdkxUw81LTyb5mZGq9tAiARWveXl0cLbqvE/s3YqvJjHnsVL96HqRq+2mTYF7Ihkw=="}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.10.0_1647455482397_0.8438307827720803"},"_hasShrinkwrap":false},"2.11.0-next.2":{"name":"gatsby-plugin-image","version":"2.11.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.0.0","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.11.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.11.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"2cfd7dc3db6e4a6325962160170edf8c51053217","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.11.0-next.2","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-xz7V2lSKe9XWsSkhXYgrLweCoJW7VE08o2B1iGH7OhHy+k7xD84/SO/0ZuvXx7Dfj9FTcoB2jMU62KgYB0+ZSA==","shasum":"4b1c9d02caeacbe6d4bdcdbff89761151f63432c","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.11.0-next.2.tgz","fileCount":99,"unpackedSize":738475,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiMu28ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpzlQ/+LWjuu4Gm5smEFEzJ8nvkWLCFqnbgdNHoGIbIaK4Sehtu4Cdu\r\nCEBrznm/W2Sh8GPxXjMt8cxBOspbMfgVbX/bERSbGvYdAAKlPqvVgA+Ub1TI\r\njwczzsCkUR52rlnSzyQ75jvoQ6TRqyaEMjW/ssDlog0x0g2H8cZU9IUhLWOl\r\nFU7gO2OHb6aaWrNRsoAblEsoksatQrLpvHGOYYQa04UiurCN0MJVLOeO+nR0\r\n4JsisXaM2O3WXpOhror5l1lH7YOdZzW/8y7MCrLaN9N5AtNfOWT8RGTvBad4\r\nIyp1BNoNu1Bf2CrJ1AYZvybhKA1+0BYy4YyRyxeuiUgku/jcm8+srK/9BEOs\r\n96KTJPkG1NpR30Sk0ITPv9Q+lFKjrV7n+y8l2OizIltB+Ko23Z4jbW7DAA8w\r\nUBeKGHgW5weV1wJemoGKzmwTJuq0i9qfAXEu6tTlD8lPw03Af+tv+is0ePOc\r\noW15kUmZEEcrU0XXrpEQfN90rpg6uPsUULK/Sm37qweFtnAsG9CDbdllXlJC\r\n4A5Mn7KLYxILPuH6Y1KuUVDH1LftpweqEyRabJOW7aBW6y1vJczwQh+Rxop0\r\njXs25uY8Na9kSExeXOm1PPspYbq1vSfKUaRdfcdGoWm0ysi+6yG0EhURfKUC\r\njYCuWzUfSBQMjTpRhFXYGc7JoKQsvhuTpRQ=\r\n=PGoW\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICoWfxbICXnvA+iSOSogp4T1rhtdyki0aS3nb/JdyrbPAiBSp+yd4kIFN6eZH70g7GjlGCV8mLqoItQtC7s5dmlq4g=="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.11.0-next.2_1647504828590_0.8884567088994408"},"_hasShrinkwrap":false},"2.10.1":{"name":"gatsby-plugin-image","version":"2.10.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^16.9.56","@types/react-dom":"^16.9.8","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0","react-dom":"^16.9.0 || ^17.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.10.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.10.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"40ea307dc578d20c440f229906e85505261487db","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.10.1","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-ZFcaKkVz6h18jRzP9HHCcXzyIc/Gj57NZSycOWFxW9KLqkq3NZXVx3mkV9EQ+rup8r3RLiJu/AXEorZEy7iAhQ==","shasum":"7b9eda7334487dd0e4693996cf3664835e9c356e","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.10.1.tgz","fileCount":99,"unpackedSize":730429,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiOyV+ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqzaQ//dvxiRjv7WCXkAbQ4dqYVZ6zzfAXgkGPmYurHHefI2H8eJNKO\r\nIw8HOIy8tOHhqzajL6W6dgDJddFT2OvL6OxHSyPt7ocF0K3kOneqBB/P9gyJ\r\n8FyTKUqqGAfzadOWBMnedwcY9gQInG6Fwxxnqg9n+0AgYQ+0GNE+bNncyqxN\r\nLCF4fXq3Z2ppZ/kM3prffkJD9vxxxyNhAGkDCl5zED+kLpgcbvGYZuCFDlLI\r\n4bZaU6Hf0n3ty0DlrvswDC6bXp0Ca4uFYKQd4IJ4kstFCaZk+lrh8VbuXbBf\r\n3cjd3ZP3PLe2mUjWlaEacbnUtdicjBaHcOJEOTDwnArdWd4JUPzEtJJLjyg0\r\nF2xJVn2i61GuiqzkGhqadhAooUUpiMaZpeVL1IkMvaqyKDWQkt4jpu05SDWj\r\njyXIHOejPcPcj5LRjre7ST2dwRI/xzObs3G/pnvMn9PL730Aojw32TXux0eK\r\n6FIpzJloV0cTQMsC0Fzrs2RjnNI9wHui7abAMQyBxPjF4y2gwpOqNrScHx1m\r\nzt5UU46IxMqQTJh/bzXCkeYne6x5NeFIendTbtgtXhIbD6jnIHZKe4H/74YD\r\nH3tcTHCd9wHITS6OaKek2A2Wso3+IDsqD9drvqRY/6hFzK5I1blQ6yyzVyCt\r\n3Tq7Qj1sBdnpL8RbVUoq+HMPLfAL1lhmMCA=\r\n=dIIR\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDJkn6Ru3abjxHFtcmyE/R/CBpAHXK5LAQGllCanejIDQIhAKnKnIMDVI+jwyv/BzoeL7dAf8jsv4iYkhx9ZtIKDLuL"}]},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.10.1_1648043390165_0.9974399063585249"},"_hasShrinkwrap":false},"2.11.0-next.3":{"name":"gatsby-plugin-image","version":"2.11.0-next.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.0.0","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.11.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.11.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"d278739399df5e1cfdaabecbaa9c06957d5b05f0","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.11.0-next.3","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-oQmULkFmEh6xcc0HkxAXyRhzc+hBTwu6kSYywmq+iHj58EHr1zIXFxW5qpSOUAnjZ7jJahfZk7/xs8d+g2kpJg==","shasum":"c1adb77155a50c20fa03e99cd9a2e2a105b80436","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.11.0-next.3.tgz","fileCount":99,"unpackedSize":738647,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiPF9OACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr21A/+L05l3KQPKTR4TyNg0uun66u1MGKUOskhr7S6fVcF1DNlzeS2\r\nCCR/SEpWgF3j/7vQA5E7jtXsqs1XTLNoEdzuAMFli+Kfop7wCvIu6D3sBlxE\r\nBXhiTko8ItK5DF2Jw8hup8HmKvNubElRE0YzK2HoMv3MyQIGPkrNvBSRVPpa\r\nLzVVHXSmG8YtIX3SKdm5rvG+CfmGZDV2W5/fqAi6MzSK1PKh0cEIepXx15Ru\r\nU7hI8NXlXCcQPSvzVZNDN3jRC/mkdHPrTI0ll9kz4y8pPwvWAE/jrgKeAiH7\r\nmqlSxmmT6Xor0LRRLxLgEy+DZcx+tLgsK0Z8YaRioWBOg4VW8/vqRecdcURe\r\nakXt30NsYfcz0r/6CuNSSZLjkz8K7pSwCZC8nIA77u9/x028ZfcGLnRcd5PR\r\nOrAMUqxWazOJmhPan3YhrpjaZBDl/ue1iOEkFi1sKXLswUnILqxFRHhTZCVV\r\nqBamk2ZjNNb50etJ7BLxs69UqC8iT68Ws5mR3aN+CcxcLELYd32BYtWPdqV4\r\nUxMiOc6qm8rEF1r3sFSP9NXioTRwPFoAT4NLVWpOaDjoGRW5O/NndZSCybzZ\r\nVasJo08iA6nkKyi0BesBsrjwr1Yo0onbK8LPPYST3YCRmqmNxkIHvR7M2rd5\r\nHIKuIFTViHtI5oZpg2jGCKRGxyyHxRn6aQI=\r\n=9S5N\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDMNOiePtYmxp9PE6FvfbCg3okBng/3P88Cqpwq24SNBgIgTZ2MQ+BchyMITSRFCXAHlv5nQ7gFrT7+Mpg0vVsWMKE="}]},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.11.0-next.3_1648123726079_0.19896769106773493"},"_hasShrinkwrap":false},"2.12.0-next.0":{"name":"gatsby-plugin-image","version":"2.12.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.0.0","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.12.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.12.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"da73bd9edbd4b3dbbedfc4f7614b9a9e4bb5a746","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.12.0-next.0","_nodeVersion":"16.13.1","_npmVersion":"lerna/3.22.1/node@v16.13.1+arm64 (darwin)","dist":{"integrity":"sha512-BpFgJm3p4hkxHs9HqxGq++zSHlPz0Pecj+MH4dOTvB/cd8Gy1/puTpnC62igzw9py13i6YFD73D1Efmx5XKI1w==","shasum":"5282dd696e19d7673a3a5149237a29b19a63f184","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.12.0-next.0.tgz","fileCount":99,"unpackedSize":738647,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiPP2fACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp7QA/9FpNQe16CUMC65gxX55+uCwr5D2ZOq6fCADxVsTZPux3B6FeG\r\nHsSr2aWWB8AZSG/rBTMl2srLn/4ORi4iR5iUH0mf0IFikWy5T4shbxrb9kdk\r\nt/Gzg8HBWLa05DtbPdrWLjUdOrKk3G2DhLELJGnCvF15bMMmgNhQfsN1wVkE\r\noXHLWL51PryTPHc0l+rDPTIhFWer81jCMLZWL5bsYeqXRtMKkrASdTFLm40g\r\nKe8I3WsVDGxrVO6fAu//vsl7Sn13vd5x27ZkaIcfpXhsV2qvVJMtVE/l3Lxd\r\nMog9aYGVyIf69jGuPJ9T44OTuqcs5WBg4bngbXg9KDJ4LZmFDLz0E0lMKy25\r\nrVZ31M9TmwYS8f0ayEkve3rQwiyspkyQ9QrkEd6QpQFHpeCSp7io4RKJwWFQ\r\nnkgVRX+nrwDIxSwDukRi22eCnDapY1hn2XFfWpEeWPAc2mB97MaiLEYyvvBW\r\nMi/zPnlGZ/9o37OJykH/zQgQekNrGjN4lQ4ts1LpwX8bMJIy3ZDDvVDwIL47\r\nUKmSsNRIF2d5Oi5F+YLTVUJeMWUKlCuJ3ZMYMI6mneqXMOi4Vs5a3r1fT7fE\r\ndgtreQM0EwOIqKFv1fdqLQQmgOWn2KQTOM6+ZXNL7OyvtRfeMiKA12eidcCx\r\nGtDkDE0mzA+ACTwxc+yoWuuGfzbiyuhN+VE=\r\n=OtnM\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEYLgd3wZYW+yGB9+p3FTalureHGL/RdXSXQczynf68rAiEAodN2mifFyTW8giJbNADmfUL89GLR9buU5FYuxb1R3f8="}]},"_npmUser":{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.12.0-next.0_1648164255807_0.41399326185834284"},"_hasShrinkwrap":false},"2.11.0":{"name":"gatsby-plugin-image","version":"2.11.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.0.0","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.11.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.11.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"ac3f088a160cfb4913310a6992b106f760c2cafd","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.11.0","_nodeVersion":"16.13.1","_npmVersion":"lerna/3.22.1/node@v16.13.1+arm64 (darwin)","dist":{"integrity":"sha512-tRNofGNUK9K6IrkPFj+m4oKPV4KxEzx+CFBD2kyDm0EMyUv4HJKNYoe+VppYJo7x0qUMFcChBo+RCAuVKiD+Fw==","shasum":"d527e135c7a0623fad60449756284aef66a27c50","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.11.0.tgz","fileCount":99,"unpackedSize":738626,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiQzj8ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrS2g//bmawCKREkbTZSVY3+Vmu3EQt+BNnrTBhJNckQP6XISfp9BPT\r\niCIE0ugVQbjZazGUpR6WoTypxw+ghGqf2XUCsR2trdjlebFKa9f1m+pmDV4N\r\nIvrCd5QjYPzStGG7Jit5NoBtY0EuwTLZtaxlco3SdzdknYDm0HQ2Q55ez7c3\r\nEDdVeXFUqLfCZMQKxjTal0TvuGk+L7Raeex/tQZaGvp5IxBJ66a0UJaKVqJU\r\nMX323GggG97uI9Tcc95BThOxMneZePHDJyj5wadxYJmNUsB4jMhcL8Ux5wL7\r\n6YAYLMVDo9MWjV5NJZp8GVaigvny/5oMdCCPiWSNjrHVuUXrn0hIDCRJgKEW\r\nzY+Ub2uoYVOxalQpEUNw6t2TVkN6ByVccJi2s+Aj+tzHcUhkYG+pibcdqYAD\r\nWA1nLSMblRlAVj3EfITzTtnH3il0Z/hwJL84UbmQe0xCVut9Rd4PaoWiUTqB\r\nOr6hcNqxUK6tI12COn/4YDgFagGrsXzvGSP7IIpVI0u20ZYDpOLQmMnZ+haw\r\n4veW3ihsZl4K2wujvEJh+cMtMxRbJgxbb91PSr7TUV9eVPCGfaa36QKM39Pz\r\nidnnXFv3MuYhd+0TlKvzO2Cld7xGJsCS7sDXoAL27dLqQt7unhCTtGUL8v02\r\nXt0+9b2RijlEmXORM1Qigh03jcr/KiJe7uM=\r\n=g7LE\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBLwoDvZTrv4/0DYsi0uDBnxhSrfJvo/WQSIV9HdD3KMAiBNTTUFCkDWqu/6/lLxpPKPqVK837fwh3OhrRCPwn/M3A=="}]},"_npmUser":{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.11.0_1648572668175_0.46316597830095074"},"_hasShrinkwrap":false},"2.12.0-next.1":{"name":"gatsby-plugin-image","version":"2.12.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.0.0","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.12.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.12.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"c452e959b90de7cb0ae56af694edd404bb1b46c0","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.12.0-next.1","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-ek5Xr/HkkFmDh3We4KXP+ygmCC3450Oz7IVwMhQ3S75tK8Nl9i6QVz9oU9SkoV07L8eF9JpO2f/x1t67QaPySQ==","shasum":"90025e8e6d49125fb6257e56158631ecf974747e","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.12.0-next.1.tgz","fileCount":99,"unpackedSize":742136,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDI/0msj2FznmsLXEzNEuudxsGLs/gNtdN8u5x0zduXrQIhAKDGKPpbpDsOsu05FTD1yR2KQhkKDk4f+KbSOZ0v0B9P"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiRJz3ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqFpBAAjJuEjQHT8qQNz727PWZeAGNkFFwr1B2a5zRoPWhzH+wYNMlR\r\nrjDuPZ84uEVlbnhqPeVY0yvf2VzLB0YBZ3BuPpQFcElo8HqsKwMZDZ08o0GE\r\nBQlbisrRDmzpp6MQZ5JpuSpDx6BDvWHpzRvBq4l8RwpbwBJTHT0dAe/O/5pb\r\n2XyieirM1Bht4amGuZu81ijSJmGhF30zLM1Lj449Awc+t9dRo/+8X59mrRRZ\r\nAW8iF/f+HVfmdIzICALs/kTO3ehzUMMijzJr/oc2lMdch9xnlP+bn9CS0hiz\r\nFwIRHgHoeDpYIXJz5mmc6cenDn0bG30wZiBULxF15vsICPx00Pt6aINMbRWi\r\nBXetInCw9eO+hM6yDxcBJfHNeX6/IBj8eIOfTSJG59VcbO7vlTKEsYdbAHR3\r\nu/+7vHIOaaNlO2lwTJPrRKFz2c4+C4mWwuj+J1Iqsv/JV1GjIkpzPWGKOtLp\r\n72NkSMRJXVGi9wpD+hZyOYSlXM+JVNxv2Hg+kGvKsXokxhERETdc9vtXmb/h\r\nvYOrXiM2tjD0ebFCabj1IymIKfI+7/1wp/Cyd+aSAA9I4todTGJv+bUFIDrX\r\nnb2z75lrii0J3Y/PiKn9Bw0eDH8/42JPvwF5NyrdScO6xzSd4qFREW7rX7qL\r\no5jw04DOn/0l6xdznYO3PREgSoTgZRn+t6A=\r\n=zezh\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.12.0-next.1_1648663799450_0.8290054779860911"},"_hasShrinkwrap":false},"2.11.1":{"name":"gatsby-plugin-image","version":"2.11.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.0.0","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.11.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.11.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.7.2"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"ad8c330df7b452b2e515b20d0d11dcb1385b9f6b","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.11.1","_nodeVersion":"16.13.1","_npmVersion":"lerna/3.22.1/node@v16.13.1+arm64 (darwin)","dist":{"integrity":"sha512-4tfDdcczBVOL6ELKNWuXQ9h1V/5DhBMIVHmr6FPwm8xgL8ARqfQMXX2mzUjpNiu7WDiMlm9cWrTQQaZAARhAwg==","shasum":"1e800b65e8c18cc524c5855b9dbdb907745fdb0c","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.11.1.tgz","fileCount":99,"unpackedSize":738626,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICI/Cff9e4AQ5b84VZWpjXS5wHF22iBrVBKDxZGTtZNQAiEA4riiPoxW1edLAHTWkB33J+xItZqHEvBKhB0xPpmC1PE="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiRXq2ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmomsBAAlXVkjEZpteRoNisQMP6yY9B5OzdXMXzG9jMkJqiFC8e3qstq\r\nJDljSRzEcm88BcCbV/3HhFYpzYRUTFXkjsDPkXlCcr01FM7xeKypjyWX+DC5\r\njerqUshS1yQVvFbrRFaoD7MQZ2ziIkYoErKxf4e4PBjWKwyd2vqKIckFNRXr\r\n6GKHQnrw5T23xSr4RAvuMjM4rS/398zdeRsmhJBzaBxtG6bpjzCPxwJ6qMMj\r\nbCHdeQYt0beWxBtqyhNI/EiGJ9Ynoi9vJ0YFL0dG2kHaak/hT414g6//0i+N\r\n3FoWQCri5r7NjxCTWmBYmjiz3R/nRimYDV98I22Uxk2+YZpCFDTm4wZyciCd\r\npR515jZcOm9sCeRfluIwlhPWTPHuHQD7lX+Cl9fzTup7zyP78LWxJeBNyo3b\r\nGADnnH7d1gMazH/JRnf8e5tdV2CrVGPx1Pamm7oqjYqjDeebsdQnol1k6+my\r\nICSp22kV4yvudacWwswhXdR0P02ltKgp71kKyMdeaYB4XuiHncC3YjEe3pL1\r\neJLJi7u2lqgMG6Q3+aGGOBIvW5ikhn3fYvWWHxsggpYbNwiMdEturnJV50hF\r\npT6wsrP5LGj4dtjwPav7oo07EjoJ6NbqK3vUfOImbvGS5nOk7P194A1vGdjb\r\nMA83uMoh23cZTSoPlixvn1kdKFBQVwtEBRM=\r\n=gaSJ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.11.1_1648720565938_0.6482323523441291"},"_hasShrinkwrap":false},"2.12.0-next.2":{"name":"gatsby-plugin-image","version":"2.12.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.5","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.12.0-next.2","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.12.0-next.2","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"da4d313c7d3ce70961b32304d17b1d419f63144d","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.12.0-next.2","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-VJRgcpphBvSslLK/YqVGXWZnsM4V5ItPD7NAvZA8SR1EsL9bAhiJ8FJKeXyOOCKuV4meKO6mkpeaIeDzbN/tJg==","shasum":"094f08d990726a2837a49029d451e05557a7e5c9","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.12.0-next.2.tgz","fileCount":99,"unpackedSize":739467,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEawLCq5QP+2putoIBsw/Yy6BdomL5ChxIuVkbx8R1DuAiEAncM6NbDAo7AFgwyRlQ+ygFopYT+rp2docDS9i9WXX3U="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiRsU1ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp/Pg//SSOuIf9VQAORFnNvsvRr6T0niAgaBrRD/LEvAxM6a7idFl8T\r\nB55qvdcjHgvNqGtfkmklSaxtOlV6kiQTWpzyop8o8LqRfb8fCFp0FXqqXu/4\r\n/iVkj97abwqThLZ+GhiGGrjBBoZmKFflp77h6cri9NcFx1bTD9E/xBf4sYYc\r\ncEGSICjIN5OGLlCzNPmeJowIwMQ+m8GPtTuAIFfsjoRH1W9QrD+o8+G2nNX+\r\nI4p2JIelfv9lQ8SBdCzxDFyCdSzY85Y6P65188D+Gn0ydLHiJGgopOxmJRIf\r\nvQdktF6+zzcIUY079MPOJX0kgh8jofPxAABHa/R/v654p38CBfbMA8r/z8VW\r\n8OLsYtCddWdORLd9VSYEGi0DQP8Pbfrygb68fzxZ48bOuS0Nh478qEzW5JlE\r\n51qttVvmaiEcot5zxpmHG8T1MH2kguYYAMEf5o5trBp5C6XmBAcvjv9N3Muq\r\nGMlb7IOp9UzRYkqq1/E321RiJqzXs/JJndo8KSUXrKlr2+Bz/KTejv8AOvsX\r\nTQA3P4nZvjwztN7Moc9OJ8h40d0EYloFNxRVJTiS2vfF4ksj1P/DFj1QLbKg\r\n0mZhIJdZq0oDHGhShSbuSo3X3w+UNIxFDClWjUSqa25ia8mEPRW7DdkK8fb4\r\ni0sC1kL6HsZLBF8+Vvr24Vqi/fsTs/DWqr0=\r\n=yuta\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.12.0-next.2_1648805173066_0.7369133997748332"},"_hasShrinkwrap":false},"2.12.0-next.3":{"name":"gatsby-plugin-image","version":"2.12.0-next.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.5","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.12.0-next.3","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.12.0-next.3","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"b474dbb25518b51ca8cc1ce75fffb044e7d8609a","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.12.0-next.3","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-bCMDo9WZykKW574Sn1QuNMSjdTVhucxVjKHBu2EFpMdH+3volvXRwoACYR9TrDXRTgfAS05x+eiuHJAhOImjYw==","shasum":"5e3ef9ac5e197c30018a677c01374b4f5b16e945","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.12.0-next.3.tgz","fileCount":99,"unpackedSize":739467,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHa9NoeQgwKtF2qAxiB4L2FVaCui6kclaH9Vr0B9JcNUAiEAhzqjgI7psDhcmQW288XaoTFQtDE4NqO7+3LlK5y/GBg="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiTunCACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmrl+Q//dPjgo8uXAQlozG/UFc1/ftSCms95gtOCxixTH/JmnVOljKNm\r\nCCp7mI+cbmIEMZ1Rnfm7735utudz9Icaysx/nK5JrVQTxTJReMFc52s392Xt\r\njg/+BA1gBkBmfqdVsHXF9WSF1dAcKlnqadR2WlZY2aY1KahAQXbDXPJRXhkt\r\nDgi1Qy58PADyQ+gbRQ4hwLkwT6jGu+hBuZD79/NYcme3spLVqQ/GdVvd068b\r\nxSW8Txac0vuO5fGEoGMjhnTb7bf3uIPfMBruH7RALS2RDCMRoJT8zfNeo3E7\r\nO4jTU00kVgB3JxOaFsiHe+1fHmAbseNynEj6A/1s40l9FcExYae+1CD2BuI0\r\nFe9JvgoC+RBnnOeavVcb+dg3+UhiDO8kbbEGLwejpzsI6tVfDI49Xsqwnx7u\r\nJGC0pcqVW+TlOlkCzhZYrnLO00M8j+IfFI6/eC3Lg6o+k2JDGQ+qM7vLKlW/\r\n+s8ykTu9xIHQH6oDoyvBB7irEng6ojSzzNcVXDNFH6yR5btGY5MyQSNNpCAV\r\nh88hQL/Ze8488EIwXTmjjVKaRNkn2s4sWxmnH4z+V1ocwgca1CSc24q6iGBc\r\netaesW4pB6yMeOvAPhlUXksSebjcpoFCVAlJvRHjAQ0XWUfJUsXCldj6otlZ\r\nhiVN1kTUPcYKsGt/Dnff1kjg7bX/GgwEPEw=\r\n=rZMa\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.12.0-next.3_1649338818318_0.002019137000486282"},"_hasShrinkwrap":false},"2.13.0-next.0":{"name":"gatsby-plugin-image","version":"2.13.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.5","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.13.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.13.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"de86cb74ff6f7d229b33402969ea30e972f037c1","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.13.0-next.0","_nodeVersion":"16.13.2","_npmVersion":"lerna/3.22.1/node@v16.13.2+x64 (linux)","dist":{"integrity":"sha512-btdbbPGKXvPn/olb6hmztH6TX6DvifaF7v9HFzpAU99mwJte49YtaOpkTfSKPyQM7LFUYKPi/5h3jWqAnxnlZw==","shasum":"e0b20fc19ca2344dc71eeae93e57ff0d82a8c87a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.13.0-next.0.tgz","fileCount":99,"unpackedSize":739467,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICsRWSUq9KWeJQtvsoYgXhBDDza8WuYOrSOUiJu7WV1qAiEA5fzueBWr6M11RfGhHgh7D0qEyqpWOLkL6HWNJ1SdrDo="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiT0a9ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrOMhAAmRf4YPIK1vm0SAD2jLVyBdV8J9xUWF+RLjJFfZo7tmT/Oxgg\r\nJu4arrAaaC3Yrkw0rGpJUnKEcZzr0UyZw3MBXA3ZKnfhrMtsnaUapNCyt/jM\r\nZycB58Cg/vbH/p9ymyxOZ3/twRERThOaFe8t3qChPxAJBrMFQvQULbsN7//J\r\nl4MFUC9in9wohutykL2K6kU1wCJCPQY5EDY4zVIp+YrwoGCBoj6URfQdJSwe\r\nVlPxXOjMuoHmRtD2asRUIDU1m+6fomglFZy7Ymzlta3S/2uJ6ayXiIMixhh1\r\nPE1z99y5FGGtvcVxOKNlOrautE0dTCaQ+gdfo8Oz0WFbrgy/bVZUoMERWZy+\r\npY/HEwoiU0gUZ/KiS/Tv/LQOP+xKqoKnqsAeJqi32pHd5gyloJ7SC0lZD8eZ\r\nt4VA5JrqHaCmrFHWlvZWDmUeB0z8upHzKgkvCChh1gLLOlmWw2XL3FFLeJXo\r\nxBRRLAx4RTVBiroR3qWdk7or3ogJ+5OFGuIG/jBehp/BejQK3BoJUoiiuEt+\r\nGouQXTDtG4UuhIFqkRos2JaWNC5Y/7wKMJPRIadEnlTtO3TeWbD5vw6U3Pnk\r\ntcsbGR1H6jKDWjif35Q4UhN+1/7LDUFNu82q6oKWpdrPKHPoAGn4hXuoRL2Z\r\nzglh1iYNLs/odkq1Jkgmw6sostZ9qrmFHZw=\r\n=Fgap\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"j0sh77","email":"jcjohnson77@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.13.0-next.0_1649362621075_0.6485247206654126"},"_hasShrinkwrap":false},"2.12.0":{"name":"gatsby-plugin-image","version":"2.12.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.5","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.12.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.12.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"12e90fce284eb0a64b7d1f15e293027483826372","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.12.0","_nodeVersion":"14.19.1","_npmVersion":"lerna/3.22.1/node@v14.19.1+x64 (linux)","dist":{"integrity":"sha512-QCwM7BI068NgOIzm2XaClA2c023+4jwOD8N6K6nZUIvOk0SJWUcQimyo1AaBPjQWyS8Qcel0swb4j7aq/Bggjw==","shasum":"bfb975eb2fa7725819d36d2124aa6c2fb8e59861","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.12.0.tgz","fileCount":98,"unpackedSize":736994,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCeET1Snwo7ByeOYww3p7Wr2Uu5IAs0AHm7ome2mLeDogIgA6h5nz3W1nss80tlsELOWIGovX4Sdytc8JYKb0Sct3w="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiVdq/ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr/9Q/7BRdyjoJKYHNu604dH7JhpPrZDRD5a/APeNpDw0f6ggTD3y8Y\r\n4K+s1fxEeIU7ov9x0ChAnJl/qv8bi69XnBDsn+TUZLy4IpAKP9rGvnOtQvLo\r\n4lko4chVsevOEeHPdzCSwmet4O9h75iTJC4RgTrNNmiK2m2KphtaRohRD6N4\r\nxZCRaO9vnLpMvUMqHIvQljIKTVyQSyCgfcB3i3IZqOnh+3d0wZZR34tO39MR\r\nwsR26VikSg5F9wvXnIZmRW/ix1S2st8ca/w1QH+Ul2YKi1Ar8VHxcXHSlNtr\r\nyTRTGSbPGvK4FLvM590Ljdk4DwS7nPySmRLjrAU4zwNmoZNlDvsNS+kNqdR/\r\nSnQWqtJwJP9p61QlU4DvDvbi8alkh5xBrdvUhrv9GkYdLVRyO1RMHaMdsS41\r\ne3IXTZn0GyVI3VWVFWlDxQIoHjIcpXFiAimtgn744G5uwFiwqzC+UbkbnSa1\r\nR9gdx7FT1SZlAOb7bx/Cl0ZgjDvTBYFdQbGms6RGysjfAOnGDryovXDGYT/5\r\nXzsYk8uyYTQIOQILAqEY91jCgAhuXmj9IMvrhUNkaaEZDbEuGRtxBuugJ/Dd\r\nZ13Ap+rmDhgf++/ektSFQqnD6G6Jm/X/PbGoufZmwF3nN7A71bDPzPQhLlOt\r\n1LxLkJYMYaNsJezdXQrGjtK9CqldHTpvKoQ=\r\n=R+ra\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"j0sh77","email":"jcjohnson77@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.12.0_1649793727536_0.35107023005312654"},"_hasShrinkwrap":false},"2.12.1":{"name":"gatsby-plugin-image","version":"2.12.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.5","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.12.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.12.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"4765c4514325cf1d4bd209854fd974ba56e8a751","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.12.1","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-Azofblt5ZSk2NqCOrBI1WijcJw6dVHCKz85lz6J7qB3Fvy+YVjs/vbUODlXUwi3926Q5m7C2zdH0MQrk4T0DDQ==","shasum":"302324125a1e018ff669772495f4b291bd00a832","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.12.1.tgz","fileCount":99,"unpackedSize":739446,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDIdXqagT107R9E7bODclN1zSMpVm08hZd2P8lZM+W/eQIgGsHfMLY+BysZ2xMLcz5LMeWXeGwT5Qq9yw38zS4cBc0="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiVf7UACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrDRw/9EwzJjjPNfvgL1L1nPOg24SfStMXaMT5UGJ4XsJZwYC0SbnHG\r\ntk5XmconzIItsRnTSrisXnP2wIUAd/xYHgs3721WIbN4w2WYGwA7GCwhp8vb\r\nNrcAsZaQwZS+ZqiwF3/w35y7T9kJArBGRi8QB/e1aq8tiuNyoXm8eTzaU5HG\r\n7HdWZ+hex5jUQ7/HnsuqVnjFDyX/ehvk5WoNWbyE7xZf3pW04k+ytMXPuY0J\r\nMMoSKFArbbYEiVWNVboT972BGmZMI7eK4Z4lAw3/UnSK7v90Su7lfYjLsDJC\r\nUyHs29cwH52zoBQtB8UoyYLBnNLJyhaEwjUE4qQeTpGp4c4C1vg+7QQ7nELH\r\n3rE5uNJS8Vg+pnHnLK080GJ/C2x4u6YlIvzybCC8Eypz7+8+LZ/vqA+aQ5dM\r\nr4ZBI2r4s5hmIwGZk0yRCdHWHREgF2zSjV6FnqgFS8v8T9ih/CrGVZXY6juL\r\n2iQ58DuLWaj3zt7UNl6CxiItKoQyCrtdW7vMKaGEFlYcrhpWc7Ye3xVytDlT\r\nByHnDlNqWxzE88P4C7TO5fcopS7qs1FwgKUkFrTUjP06ZfuUlLvAm/25lMO/\r\nelIwRvqpK7RMiibEkjAPCLhuem/yNcKVOtX1IAKcgZxfC4PadUpLN2ibm7gi\r\nDbpueHrEBtBCmX9o69HJdjEXnAltGf72p/w=\r\n=9Uet\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.12.1_1649802963920_0.5746105716821248"},"_hasShrinkwrap":false},"2.14.0-next.0":{"name":"gatsby-plugin-image","version":"2.14.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.5","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.14.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.14.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"32614f53057169772d4e8469d2985d9a54ef5aed","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.14.0-next.0","_nodeVersion":"14.19.0","_npmVersion":"lerna/3.22.1/node@v14.19.0+x64 (darwin)","dist":{"integrity":"sha512-J2WgSaNarzjcwxfb3es3ySNlHoLzRkGE1nBjmE5b5RSNKEHvFjUnpi1u/JMJtSllTYQc4WmZzp62P6zq18rj1A==","shasum":"84d5270a1dc852c2591948178a02ba59bde2f982","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.14.0-next.0.tgz","fileCount":99,"unpackedSize":740306,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGHADs5eAuxpwaoudTEg4UvRYZfiCKIdzM4FW2TT8gGVAiEAw9rIMicjPdRdvFNtJCZqZFaLA9PoujDtmWmfRCuZn1E="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiYUVnACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp5mA/9EP+gez1ALfFVx3UaigUKaJPnGYCIAcS9zL7W0cWXBm1jfmgB\r\nyezt8al25rGUrsvq9ztZZNuflrvMEuqtaNuQNamqCJ9BF9f1pGUfqxGC569b\r\n4gEyxnhDykvJBP7mFA1CQ7Gow9OSWQRVsPEi2W++vC3X7BqvYakMlr39pw6X\r\n7sDBrAceSMiqA0+NQoWMQWBQdKMXbnAjtImjTOWW6ttpjAGTfD1SgA/uMjgu\r\nP2u7iKZTJPtwpvcvCvr+h0k8eVs/b5wpn2bQAPm0YgrvVJqEtAgKWdkcmJ83\r\nLone/SVkSKTbQQBB1FBt7slSB9lWQdW8SXbYSaZ+xzzNZjiHfYJ5W53c9cqU\r\npKZAsLQf9VqC3PkbPNj54VNBJEVfLKn+SLAVd+DIQC6Gc9zmGiX3d7zAZuQ/\r\nWdIPjMP/12+cofMUZpcMwjzK7RevzBdU3Oz9OL/98n9rA508DwjSIDKJzA+Y\r\npn8jcXJRDDs4BmiwwS+Ks+AKI/9cWJthg1plvXQMvSBuftz9EauaqlpoMFXs\r\nSb+HMm5iQzQuHkNPafoDWGV78SfKyxG/5O4/C+RMCw0C1bVKcELm/9+YbBuu\r\n8UiaAqoJIuUBHUqa04tENnxHCjO2F5dyPd53462PfSYPOUJJxoZW3r+zO3Aj\r\nLyWwt7jpu+wxV0aNH0OWXfdASgZ3wLX6xfw=\r\n=Whs0\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.14.0-next.0_1650541927618_0.511708230441424"},"_hasShrinkwrap":false},"2.14.0-next.1":{"name":"gatsby-plugin-image","version":"2.14.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.5","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.14.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.14.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"b4f5f2d4d1a4f5977b3388e5246909d8392505cd","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.14.0-next.1","_nodeVersion":"16.13.1","_npmVersion":"lerna/3.22.1/node@v16.13.1+arm64 (darwin)","dist":{"integrity":"sha512-ask8uRtT1jwS7iBE1fRQ+ZfO+1p18v0Ep+qW1Rx+miU+7PeH9tYG2MDIs6Vy471GzLFniRLQERumiVdpYIfreg==","shasum":"0952dd985979a2c40e866e20384620331e23dc30","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.14.0-next.1.tgz","fileCount":99,"unpackedSize":740306,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEjBngWu1U6kFmB1Sf2SF5IW59rv3r37ByiSC2Tva6smAiAOBKLo415B3FgECS+GRla9RjddR0lTEwPsLXc8QtLpug=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiZqeQACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpVmQ//aOm+4b9ufd63MHE7WB6Ivt/6Tg35yu6+GVSfhGkVmBf2gMEp\r\npMZNmb3Qwj1RgzPb/UplxIu3QrOE/XRLu280g9iT7OIKcZZHGZ5TWJoyQQ9+\r\nHwLeT4xrauA3g1mIC/WiJC9acfsHFc9TkqgmV8G0zAvIwSY3DnKkuFU5pKEd\r\njGvWsdObO2y4GScarDDlIJxNezAu7t4rVX65fkwjYcxuTdl0WR2pVfdn88jC\r\nsjdd2h4C5j/tdW/au0swabEYgf6N4/rorb66GOKIqBHeK5SB/60JeptzZXum\r\nkH8LYTXtv2o2PV5Pwbc+/O/agsoGjhyHGOb2+WX2Yurcw6sEKI9Z1y4nPc7/\r\neUnYiENKZU9+2kP8TOQDI439bO64TUyUCXKAWL/dP6EPBm6wTssZObaXJWqK\r\ntf1P+4MkTI/XEFTwGMayX48RiwMEzbnJ0qSdMzUQUvd7hLSh2uC0pRIPSW37\r\n6Eae4FUFC++gMaZU5pNce7hAHJVRvlC/J0PjDE/Z/G9QMb/hEwEWRNxflkn+\r\nbqIMr85zqpMHXJPZfCuvuE8e0HbnSOYMRQjVCCxjglolnnuuZ4y5hOwpAapx\r\nP91c8FXmWQEBE9D//HdPqZVH1NVhVRcu7ETxlYbj/7cz/YnX2926hGEzACap\r\nD/QkjUsi32NEX1SGagYscf13b9wf2XFuZEo=\r\n=Cvf4\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.14.0-next.1_1650894736723_0.0584400973094068"},"_hasShrinkwrap":false},"2.13.0":{"name":"gatsby-plugin-image","version":"2.13.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.5","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.13.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.13.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"89509ff7893787cf7359bc64b66a2ec32ced51d0","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.13.0","_nodeVersion":"14.19.0","_npmVersion":"lerna/3.22.1/node@v14.19.0+x64 (darwin)","dist":{"integrity":"sha512-Pvt84EFSneOpJPq/Vmfs6kSviIMPdLapokmJKWzT+on2Aqz8HH+/BsPZLtmf2JuN0BLxO3kD5K8ASKaCcwY6TA==","shasum":"18e78fb0b36247999dbbf42189293f6315f485f2","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.13.0.tgz","fileCount":99,"unpackedSize":740285,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQClvqumIGENK9Yg3GVG12wxsAiu7Vz4u2G2BKDjtf3bGQIgDW6Ce76MYpqmhwvOkopaw1RwMO/CQySieyaXrU4X/KI="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiZ9d/ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmokTw/+JFys290qszIJjgwfpAOTEgH8Kq+pJG85AZc3xkfAwfYkW3sJ\r\nhMwyuEc4xvAU2k6EvBWox+Ec8xOkWcnG/bAdcnYPVzZsJHCRaxqNiXY8No6g\r\nAM+QFqQDU/A5gISZleHS6bg+9oaqiBH+ExzgGLiDn1YwS7a0x3XC/ZVb66Lb\r\nUUbbzNswXTqtVJm49Xfgy/2We3LIVsu1Kg3ds4PM7rvmGHW2GVSiqok+ZurN\r\nuzJOaPnpRWiOsPby5wSAOrLpHo5SPUdcAJ1LNV1nTtG/pkPmwVtcTS0isABi\r\nH2xyzA9SxwNcVIqncFqKn1lcEVriIyEV7AZRZgln27+Mrumo5kKa+XieW0lN\r\ni+sKcUwNnZvV3ONBL0mmzp+TxaA7r2cNOuTUjWjpI1T8ufTuA2QQm1lPOYJr\r\nZ//aPGIRVzltZVQaH7D7DkNhmy4OIl7avb0NKz7zZDLZY8dZ1Qc04TggZW07\r\ncX77V2FVaqWoDL9fZ3EPF0YjA3TAUdw0qC/oWX/Ef3eg4TkSr01hcBLV7kZQ\r\n+ErrwNKQ/NChUStNvg5hX+3dLHQC68iuwIac53PxVUzqBnnDwd4iaV3QwV7H\r\nEyN/3hxK99/EEQ1D1s2AjdnYdNApsetT2yJC0SbgDGu2yTydyc1KPJx3eM9U\r\n5INp7CFCSz1ZNbSE56DK2IvBaRSIdg2WIG0=\r\n=O2g8\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.13.0_1650972543320_0.6287342772444162"},"_hasShrinkwrap":false},"2.14.0-next.2":{"name":"gatsby-plugin-image","version":"2.14.0-next.2","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.5","terser":"^5.3.8","typescript":"^4.5.5"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.14.0-next.2","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.0.0","gatsby-core-utils":"^3.14.0-next.2","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"beac4d407477872db31feb4e74368375fefb7dc1","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.14.0-next.2","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-gkmRQlfu1PH5FoHWbO9/6k7RvnirIbTwTf8pTmfJkrLbVMWKqi8mJD+IXna0uAwKQjcLmUWsQVKZb/dAF1xvkg==","shasum":"2b93924b85121a4f5d7eb09ed611cc5d9ff7b363","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.14.0-next.2.tgz","fileCount":99,"unpackedSize":740576,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICAkEwMzi+DyQgVw1b4dFlNp81jLR0aMeSvkZFLwqoU/AiBD4dDtQHshWtJ/fh453zkj4wV3LaDPOd96RJObaLc90Q=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJia7OUACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpN8g//WhSdYAbNnRNdhqzOOctsk4daH4aVABIpivyOBX2X+DBXwMuk\r\nHfhYV0Pi0dErjatvcfldhwPDcm+TtvRXPn7TtlnyQQoN0hOVr1LJ9rJhnovV\r\n4VfsrPbOjOvSymjcBXFAc7Y4F4m9uKoN7aCzRXdi8b/LibXF2GM66bNkPC47\r\nU0M3Tk8UeoqrTFIwWgMdEBQGwwwX85rbVzBE2rrQs92Z0RyYs1h2FULipQB6\r\nUVGDbn7dlyHaofZu3tikrS++2KPs42LtYqVm9ZaOZBRUXqxr2wEsEZAO2I9h\r\noB0twaVbrbNaOUM2OE15gvw2f4tvj/mck9okbyJZo0+FAzxhDbrXcW2PI1Be\r\nWUVBS1s9yl87n389bLTwTgLzQgS9ZT0sNNirO4l3WVUT2NglZhMi+RT3fDqL\r\nIBhiwSbWTKb7M9wfQaQutsKHPVsN8Kp2u+dUYrZ+92fWPga/23D+am6SRiRS\r\nJ4PfqsCHgqc+Hx+AKbOtNLakF4jQ1kxbG976DOny7KVOj21x3EPG+rRbYsLO\r\nuFtUwme31Wvx0z8aXINeSqCSc8cAJqTUXxb59l52rfM8xofJXcAsek92PpYf\r\nWfI881Dm5DL5mLv+kCO8AD57aA/g5h5G6WYAk/VJ42+E2G545JS34svX/HLG\r\nLqa5pTtCVf3UjKCSli8d12U/JSELH2ufPxQ=\r\n=W3ai\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.14.0-next.2_1651225491816_0.2843455315281238"},"_hasShrinkwrap":false},"2.14.0-next.3":{"name":"gatsby-plugin-image","version":"2.14.0-next.3","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.14.0-next.3","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.14.0-next.3","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"e51c3a32c74ef7e02f61ba2921d6b7c1f720f174","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.14.0-next.3","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-lP8gZMBLkZZeQ5ByqfkKAOguRr4INi6JXpaZkLvDTAPvjvwP+FQk6dO1IJJCFADOoAF4SYLxG3w7YfuGB3VHPA==","shasum":"83a10ba3fd0539437d490d146035291ba663daa5","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.14.0-next.3.tgz","fileCount":99,"unpackedSize":741920,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHS+PfqDpT5s7au34i90eAMClMMwDY+tFtgBGUeKFp+kAiEA0Amay98E6NCX1pW/wKfPd6BH+w6ua4ZB6t8/5QFf7js="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJicSc9ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq3sA/8Dah1v37iMxowom/Lw4tvbsMS359LM7E6WfsN+nhwik2oVR9g\r\n9ikt/TI8xmUM8+k0q1yOQpLgd8XbiN1TV6KB0bGqCkqkOwFs7eNINlMBcP2S\r\nk7XsxnGcvDlta7z90iqQPflPXJ/JxrVwuQjxDF7s6+8s1XjBBPRTHpjJRGSm\r\nna9na8TYgee/dJcgb4cDOQB0YTOfXi+wL1U++ghS2XJUUib0VI4f5YnwE7pi\r\nkuNN3biMsnsHVW0r56pN3f91TZdjxdTDx6zJgfRTJ/7U9khu6MMSimYMDx0s\r\npV1lemki6Ru8rJEa4z88zfmMrGtX29eGFS7ub3rq6Ih0G1GejEutsM5mWATZ\r\no/Ck2iSoWU7te6d7HA3RPLStFa0cXKxaIPm2si108cQPSaLKO0vjb5KY01Hu\r\nR5z7kcBVTU0kfoDJid5l618Ce+MfFhIf7rcXq+m4sUpYqHwJiz5WFisiOP6V\r\nrK/vjng+GBmZ+iar0RBVdjohQwTA0EgC95dl2Is3JLLIuStcLgeoewooyGus\r\n1LfhR6muuarhLWI0ve/aWMqbNPIFnLz7no2LWODDgUXbHnySWSWkJQQrQTup\r\n3+FSlN5V5eXQBX7zn3kiPlQz6Btbbw2NJ2xuyksh0TqB9EqLzsshII8zWD39\r\nNatOvJ2UDOONBMfR3OyBbmi2YC3uRt724mc=\r\n=Cf0C\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.14.0-next.3_1651582781161_0.6797038266728017"},"_hasShrinkwrap":false},"2.14.0-next.4":{"name":"gatsby-plugin-image","version":"2.14.0-next.4","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern,es --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"run-p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.module.js","./dist/gatsby-image.modern.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.14.0-next.3","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.14.0-next.3","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"f358dc3c0222267aed66c6abccaab014085f8eec","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.14.0-next.4","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-Pah2q1NKSyIxk1vQlyfejfTZkiGt91t39srBIWzPS0H4kncc6WddraTvEdt38xXoq4DS9UfgsLVmSj658HXeRw==","shasum":"760d22fe7a78221e04e18f93024889edc71872c6","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.14.0-next.4.tgz","fileCount":99,"unpackedSize":745902,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHYBAR0jx2M5ojvAUdtMB847LN3TWUr5axh3fm9Fyck6AiEA7tcqnUizG5YAbQuQhlMoC4Gxyjj+GWOt2dT+FN5k63A="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJic5aOACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqI3g/9GsHTpNuJ7s7W5moGsU/WcmIZxDbBE6fcFuMuWP6RfShs09jO\r\nT/L4gDw+KND4fAr5tExpKqbLB0ns11cs5RwUs+HV7dMKxpLRhs/iE4PIxFVC\r\n9pozNtIRCdt78fhytroF4qks0einOwHrNlxC3JAps/9zSjZIWXO4wbCw7NSo\r\n5jg4NAiT3SMizDJGMQKWfEo6lvjOPAu0WJfcYG+D9X1n3xx3ZuvCFcttwN42\r\nL6n49XnmTfjGsKxFCW8KNYSH146vUW/DQVHnprcO6x6qu+x9NZBdx1EEV93g\r\n2kYySydJ8UHRdtzg2MV3HU1bfX/AQHI7626e8BTH4SxTlsR6tnfQpPYzQZFc\r\nP+nOC+RXisuC34oZm3GlmYQh2wvG78M+0MOrm1waqIRMD88WIfw5Drdjt5gM\r\nU95+VApxczvwwQWz+ZEIAwIHKyOBfzV7db4vCig3b88kkLEAdginvqzp+Sfv\r\nETZVvP4dnkpewSJDEy3t4U3BMq3B+W/w4zwF5/SHTSfMPGn9R7xSG4LXwwS+\r\nRIHs+t9Wwtc4qEVyzcuPGwToXZ7Mnu3lNdnEZbPoFhCOO/9+9gAUZWbB32ac\r\n1vNcyLnGCpzhX7y1VDDij4/USlKVM/ChPIlJXhyYVRlmyELKJ+bR6oHxrIaJ\r\nElflfM0Osc/0z5De81Rm0g7YVEXcpihjbp4=\r\n=W3Cq\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.14.0-next.4_1651742350177_0.8284869981235032"},"_hasShrinkwrap":false},"2.14.0-next.5":{"name":"gatsby-plugin-image","version":"2.14.0-next.5","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.14.0-next.3","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.14.0-next.3","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"0cf0bd94d6d9cdb79a342a3e2ce80f02b963c1d0","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.14.0-next.5","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-cyvcfkB4lvPZ7Kd0k3UW9YsCntYCntk24xBT+ictvrN8du45hta/VNpuQoNuEEZ35xPoKKVZ9CGGJfHaydo8Jw==","shasum":"9d55395ec2bc1ae71dadaf2e4eb5b775bfc154db","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.14.0-next.5.tgz","fileCount":87,"unpackedSize":604107,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIApPSf/sQuA1rcyHNc5tLyraQFHkFeJ5zafS9evmSZbzAiA/YYemTbKzqp+6iUprQootnis8cZfBjgLzKwYw2/nwyg=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJic6xIACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpOxA/+IawwyOpIcVPpUUlo0IiTH5qY3SMLXseDs+8pN4C8LNc5q3y8\r\nXeocwOyptnD5OFpK7ar6XUIZePvyInpToU7iHdNDtD9222yehNH4wxoTwCSR\r\n1Z30MdeJVpX19ZNo033vr79CFjlxBepL3jHd6qpLSzA38uKOZZp5gh9JQmyY\r\nFf4NSvF0RYztKYf5pYIdnEIIVGLupbFEdid/bjcZ0700IoyOzK8gBvvuFS56\r\n32ibPu2secNW7mVohJ+XXT8BT35iYKrM6NEuVMIH5zDf7Ee1Z9tt4542eHsZ\r\nR2m21NAuBWzssADjDboHO+KfTVH+GPRmAPgbUTNB0+GPBmc9E1AIkbyR1tce\r\nOYBpIl5bYvuDtBDleIqKknVinX2iqJyZC5iKmyitsC/JQG84guiNmZmdrWs/\r\njveb2w6nRYRVDgUoxGW/sS+WPai67GYBK4KdFX+Ne4K3NSvL+ItJLCbJ3gnn\r\nl5D+kdoBuYaOgCHouNldNb33KyH4xy1ZRYgq9WEdrKZ0pZmrKxhPfvAZItXy\r\nCo5z0f38///yqrBn/57huRZ4rD6nHblXv2m0y8+GgRMdKjbUC6ayq2eZsfaU\r\nySWpNXQD6yUpu2uBrmMzW86wNqta8olg20MOWgbrvjGQU7tXlmn7AmbEXV9A\r\nNgkUanNM8DQBETf1uE8kxEW71M4vric6H9A=\r\n=nQqt\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.14.0-next.5_1651747912474_0.4378230774449725"},"_hasShrinkwrap":false},"2.15.0-next.0":{"name":"gatsby-plugin-image","version":"2.15.0-next.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.15.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.15.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"4e415ccd579309eca1a5bde4fe9692ccb37e466c","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.15.0-next.0","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-MNaJI5+NODZmo6uvShHPUqXR1sZqUNB4guLBypCK38gzmeHp+AAFgiyrddM+9j77MWzbjp36jpcEkSeqdtiTRA==","shasum":"ce6a19f990649eb3ef6ca9f27646741dd2d9f0fb","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.15.0-next.0.tgz","fileCount":87,"unpackedSize":601364,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIH/iyuW4Dx6PF38SLPk1MlujfRA/xqMGXx70dCjDThY7AiBgdrmbY6YtZ8fwar3sMNHFiz9i9AstsmmQuCz1uqJaRg=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJic/FGACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq1jg//VoY3A75U0fZojuMZ7Pvxm3RUjxKMcPeNlgZh9619ByPPP+dQ\r\nFpsJM7i9LEEOzYyq5sKivo/FM0ElRaii73QjhjjWEfOnfQu72gnCGxb/vHCs\r\n8d2bUK6lEMWiKSASBbT8yyRk3/iYJOTiVT0UjTkeUxzKE2Xoood4Ix2A3dDo\r\nHaqmtJJjPFgFa4YaIGxitwaR+zUKYGIhKtNLJqysu961D0Ev4xInx551sVCg\r\nJucWxnstAbeReGnT7sa/N4mm/TvmIIXIQV0LwgzSb6V6782WrX711rL3g+uK\r\noAdAcWnEtF0Nd0Jco8vJn68YR2wsj2rN4oMK9RIlI3e8r7BIKbvypKTBUqZm\r\nmFJeRAvk3FenimJ82uK0iEvhLd+AzQh80eVNqCuLVZkhNcryUpFhxtKWJsMa\r\nSIINWZ17GW/v1udcFCcHze2Ar4AYxJbI/trP1Ae6Of+TEglK3MikxtAzUl+X\r\nRwFmkINRYg4PcfBsWvrhrr0o6+u7rlLxAY5q12sWEYKfzty8qmFIdAXQ9Fkt\r\nhc7pxUy5oMKhm5S88zvjualORCPHKHYncVC2OaCR6Q3mPoq/xPAiGcIktyvd\r\nmOML5aNM7Lh5d7/IiFvMNto975n9AlIsgEU6HaIyiybYrXgXGeYs1YBZreeq\r\n1mCbqjwb2ZRXkDbJH4KKVlZgjRWStHkzjRQ=\r\n=pTgY\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.15.0-next.0_1651765574621_0.03259662259416207"},"_hasShrinkwrap":false},"2.15.0-next.1":{"name":"gatsby-plugin-image","version":"2.15.0-next.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.15.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.15.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"15356829a46c2f35973147c120e3dffd3b0bf3e4","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.15.0-next.1","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-ILYXcW1q5mHdLOjDpk7l6Yj9LPmimoZBxy+9LBAkuijXABRtukOW+5wO5h/pvwCtYWnoTML5PkhOI40b/F5O3g==","shasum":"947495292d33e94ff7b4716582ae5f712325af1d","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.15.0-next.1.tgz","fileCount":87,"unpackedSize":601364,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFvELg05SkCXhBMbcaNQ5rFYsbX0PST1xlTCXEZLaLadAiEArceT9QxeePQhP/eoXmVe12D70lsDcGAvlAxxMdoarKE="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJieN6bACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmowVQ//XOgvvhfdfkEtYCSi3Bm52A3mVfGikXdwBauJ30u4Q8HyJEuC\r\nm+SmUKMYrw59G56TLGLbHNu3hkmwxHY525iBV2A93WBhwCwBTE5aAwI+7dgo\r\nukrtZjpnXlKGSdhKgHBw/e6P1+zYy0D5rrEHreC7NDr+q85VASCmBpxwG2iz\r\nsLqdhq0oWa+XbUCRegszfeVhtoEPTr6H3zX2I8pdPaWRHQVu0ZfRlWXB7yRc\r\nxgwhSyMl1ra9vmtSHf1PUBKRc65TNWrA2Ro8ydEUp2/39AGLjaLWHqPnUSo4\r\nUb57p4ll4lluzxIUbKBrVKAVt84HIWiqvH9wQdXYoqlw1IfEfjtcw7s2G8Pm\r\nn4ypoQFI+Z71Y7paGVcLvfQCW5D1F9qZEn9hb6zhz1Y3yZMd1bDp2zVnCvIn\r\nrWw3NdHEeJ1VqLrUKuYoJnZKoeHl+LA4Pj/wd/LmvvwsxbxAt0lNDVGj0aiY\r\nYTKmKa/85arXQqw5ew1nVC+MdZ1GUmtUx4NewszAHc2/PBA1vl364ycGQ63R\r\ns7HH8RNkuybw9hUUiDE+RLorUWl09SWbwmoD4EqXIrFw7W1EZ1WlgE6jDCaI\r\nCVrlzql+RUOi58573hUBQEtu5rhjmM9VLVjZkG4kVKeuS5LUB/5s0eIEpeGr\r\nWZTCNfTCsluwx+Nk2ka6mYPAQmr/dudu/T4=\r\n=7QPF\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.15.0-next.1_1652088475067_0.821113511847612"},"_hasShrinkwrap":false},"2.14.0":{"name":"gatsby-plugin-image","version":"2.14.0","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.14.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.14.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"2c324f6d521dcbae6c98f4af48b9a695e9dee861","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.14.0","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-LfM8V7kJVkkvq9S0UaVYlUakMNMdrL2RTjnnAUjclFhA+QQpI1uOuSY9iQe0zcy9VUZN4XNaRnubmrQp2MlL2w==","shasum":"90ee6c7fbc897e2c33b26a3cdcbbcc9ef15be05f","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.14.0.tgz","fileCount":87,"unpackedSize":601343,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGRJyvmFTYkVJUGywkgmxnL9WM74jldKXyUD92kIqZZmAiEA4ntKwp+UWwpTH/iXwiCrCU1PMl+RgJ8CmFLVJVGUNeI="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJieoAOACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqwYRAAhUur5gIj7sUnPxd0YsRVNt4aXjoig5PkzobZMu0ICq+5gadz\r\nEKJC8gb4LnfFc7RNdZngK654OYOWhD0x3cvPtMzqpBfDkPxj0whVwuRTlgSP\r\ngzZVaC/SO+0FvTjMOF3E4Xb0HwFgJlHBPBeJM+2lS6aN5C/3R35mFgp5pOSE\r\nLI23yGOAeHrW+m6N3+DNEnykFcU2R2wlx+f9tOhPSRJTY55UqdCOsgwVmVmi\r\n98P9HmLI+SH+eMTxnYWh+inRnTsv7F2Mhx/N/7OZZY0FS6wG/CpE3MxTH4bE\r\nieo8JBsRbOosEy47r7BY5PPw+WKyoDBFu/qSmH+X9RLE9CItFSNfvbDUiSCR\r\nuF6wDmvbBHA52SkMnKd5vGQAciYvJWqfPU2BS0oPb5+Vi8T8zo6YCjR+DJEc\r\nVlYThHCX/GeL6GMSGwxRH/NIFGdaTKNFs/cex/hGVMc85UGiBNp+fx9BjKcE\r\nxM/nL1tPXPzqNK3CzkH1e3AKWlx7mghhO1lj7DjMv1ViSeb3lp8H7/WmZloI\r\nW5d3dsvi8Fws65bwUC2oAm4vtLwita1ieqWLGD3k+CGNTbFwgu/KV4ZsbTzm\r\nYI3TxYFa9G1tzfaV4YAx0RcqZ5eME9nywXdnENcq5YsiBHbjvTmppZFcx22A\r\nCIpjID9f6pVsLiEUulI5CAFyUB2ZESMCb9Q=\r\n=/RCL\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.14.0_1652195342685_0.07447321764149684"},"_hasShrinkwrap":false},"2.15.0-next.2":{"name":"gatsby-plugin-image","version":"2.15.0-next.2","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.15.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.15.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"54bd223096255072f414c933985ba27964b32f1e","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.15.0-next.2","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-ny4EwMd+U6DK5r1z00MQj+XMJKFt6hiH9Z9sf6jzscBofX5+9PF3ONkC1DdV8S06bG24unwVPNzM/s6ED11cLg==","shasum":"523cd1704697c21eb22e3228125e2ce19f8fbdd1","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.15.0-next.2.tgz","fileCount":87,"unpackedSize":605362,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCo8LUPenI6ol0om4LuDVvTKBvvqDzWur7UHHJhwQTvnAIhAIQKCa3/Pw6zGm/n/lhFGNFrhlY6x6faHJv/O8TtkAQV"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJifMFhACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmopfg//biIQxDC4MEg7+dLZiqp4ch2/VgUv0BdWR4ZgKfSV4R/G6q/G\r\nHiaSVoBWHfyVK1E1u49CEJC28yKqJaef6RU2XE3WqcmnJB3gf1fpzh0Cz0md\r\nA+dbF29w/n/s9+bQjNFJdBY9UBRURsU/F0Bwo+a/FTgxFBHyFZ8r3B70UhQM\r\n3LrrNXE/AwxXm0wljLxHSYC64YJiyi80QiOlclkj1rJj5Hke4HpFD2xTctBt\r\np5HipHGfsglYxSQoVyFIo8gXM0/7qvweqm7MJB5ESSVfZIfbYXxDXwnQzK8P\r\n1A19W5hiLoJf9A+ExlgsuSEJVqKpSL/uN1hG3MKzsa/TglNmCJTMET4ObPE+\r\n0EH/0JWXdmxuwgc9wLrML/3yn1UgQM/zfdW9V93YUoq2fvOaEK7N/lG8Mo5v\r\nL2I5oZXnsyE20eLB62FWOXliTfiQB45hAwCe/ErR3eraUa6de8b3gtWxc1B7\r\nXZwztw58bnwFd9yxO/VvArqyvpRcyBUjAeQgRSv/1Y52zy6P2C9lH07tbZmi\r\njQSKWBqFMYOEnRKKkSVOzbrdZKwd26kTnJ5ROyQcOUK3rNeRM6pVpz3He+mO\r\nqUDNlVcUFVKJBldPpnzozFEJwukTefxFfECp99+8WCMUNzs5jzf0SDLZmDLG\r\nmXl4GA/K8TzeVyKVLBwEezzCqL8vJd4u6LY=\r\n=3+YU\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.15.0-next.2_1652343137512_0.014309740872938681"},"_hasShrinkwrap":false},"2.11.0-alpha-luda.46":{"name":"gatsby-plugin-image","version":"2.11.0-alpha-luda.46","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.15.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.15.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"d605e8d543fcd94c9bd8c04bbb0e4ccd3079034a","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.11.0-alpha-luda.46","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-ntVOjKys2xYwaQph0FuAW3bNs8Lfhefxdvav6WtdqHMDFMkL54re//PuQ7wJ9kQxBRrsPakvNsMIQUgr8Hmtkw==","shasum":"abbbd391056bc3a3099778b0eb0f4476cf9f33ee","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.11.0-alpha-luda.46.tgz","fileCount":87,"unpackedSize":605378,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICmqtfSP3VXUDWTRSd3f7GO4Gq2jE4VjCqk9G+S6efIUAiEAtjcFT3g/vI1fCWqLh8fHmvNbkP8VOy4LzTd7ZrnVag0="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJifMKFACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrL0g//QNt0nnzUGGb6Q1ArUxgbkTezH2DwIwe51OIUzlLWPhKl6HF9\r\nL145n51UZHQwHvkdqJxzhfsQ9sW8wgO/m1TbUB5P48AvVsL2ME6BemErhTFx\r\nRkwwsDb3uKUBdv5YKKTeeHUTsboc1d4J1JoXQjSYrzV2S3SWNRGDQVDVzc95\r\nBOZ2cScCjSF/sJUufaPZB7fqCkvrLx0EkjV3R8JCcDBtodgsxyrq0GCECt1f\r\nwmuzfsy2ufkx5Qhpi827tHNbkv/fPirccsSxbqNvNjyBXrIbn0pR3XClT2Ex\r\n3s1FpO+0bV/KUER3WN7nreP9y4HUZEdSn/3bIDJUMThQ+Y2FmdwX4/5lVzyv\r\n/KC7LS8DxHIpUF6ZOqGvMiNIbN5PhvPkXxPQUH6XT/XLWjCAzICECbOoAjBe\r\nNcADVz4Z9He5js4EEdOvvduuQ5TsmEd0s/Gj4IZsEgSJUIkgMcOUHoFPy6bL\r\ndZxYTHkg85vpWtdKp7SlY4owt6s9KLgQrTpM3cRz0PtrOO6mSZ0QQXyNiSjN\r\nAx3UjSIxFobuyQdk9azmnSkmlYgjCpvu8rUqdNungNLU4gGpFJiGxgmsABHY\r\nKHF3dJDhaMT2MvV3f+ORHUaCf6yB9pu+FVQsgCECe3RdGjtStfqf2SCk9rAs\r\n4BG+SY0RTKL2p/v5YZYLQWpIOXz2MOwuupQ=\r\n=bLAL\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.11.0-alpha-luda.46_1652343429621_0.8609587415803654"},"_hasShrinkwrap":false},"2.14.1":{"name":"gatsby-plugin-image","version":"2.14.1","scripts":{"build":"npm-run-all -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.14.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.14.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"4d48f5bd1ebb5988a5b107e73a65bd69870d8595","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.14.1","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-9ez7/MqjZLwvFqY37miFO3IAcqF3rkhUMyrwct+JMk2c1AcXgGyG1acgKGkJU6maiQoIqSKtyzjoQD8+o3f0Hg==","shasum":"902b7f6a4b9eec869896fc0641e256e783f8c57d","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.14.1.tgz","fileCount":87,"unpackedSize":602335,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDmpy1rok8PA4Y3JQsvS+KcS/NqwM4M8IFb+Ivk8aovWgIhAN+KCCHxGqpvvhI71lM2ekbCyeJICBPDdeLo5G57jDJ4"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJifQk3ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrgSBAAleh2ejZuVSPu/ohilOK2xwldZRUYFnRJlr3ZGeLIIVap/LkP\r\nDMIBAefro/cV1dtJYgeGWzVWn9g+h4Nq7l8udkGgyQKFiB0baqRm2xMkVqJS\r\n7VFJBGAweZmJSrrkydpK+8HZTDKaa744q/g5TM5jNqCv7AtrKbwfTf86b2gl\r\nsUbEcPq8cGoz2fnWuVvXGSTJ7etiCsUWC9jERbLhO2gRbo3MrJW+OW42XybF\r\nYkJb2jQr2IYnegg09Pt0ABfmoqbqWyMLX9h/LQZnExKU+43C60iHlaF1dEvU\r\nH6vaMQzfujmg4xx/MQ8FAyuuo/qDVutkZg7rWrYtLvn0QTuJ5D4c4MkfuqmO\r\n2JB+1JMvq4D1g351hTL9xdM+QwEoqFtF28janDEBenfuwQCPe3hZnK28l1Yi\r\ndG8VUem5LjAICyFC3CmkrWI4w/BdHsZvuAHEv8yxxQgJ5A9nAyUQxovirJo0\r\nXwHDgA5I6w06X1mM1bG5KIlx8MBraZw4m3fVvI/4TSB9d2S0yoqfqR2CyQxK\r\niqaqvi40nVHtrOik8jQHTO4rrQmUZRyFCv/SxnFtyptwYO3F0lZ16Om/1n+b\r\nB6UfECaVBhhGgQDEH37/1/ix7q3CESt8/h7YFrAEpBj62jAZ3GOhS3+NTIrX\r\n1QYm27zKkL09hLkNRaQLgXazTPxW+aCt3Fs=\r\n=tzq3\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.14.1_1652361527417_0.8846127694907251"},"_hasShrinkwrap":false},"2.16.0-next.0":{"name":"gatsby-plugin-image","version":"2.16.0-next.0","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.16.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.16.0-next.0","gatsby-plugin-utils":"^3.10.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"81b82c8c408afaf763e326e3c68134b6fe174516","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.16.0-next.0","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-PrE0Or2zJPr0F1A8iwff08rUBmWkyKY631757VllXjvgRDL12T2KVHZW6uNWGM+IMLoV4fotnNNddrjGAuIocQ==","shasum":"77b6cbf7ef33b4b46339a200cb6711e955943c8b","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.16.0-next.0.tgz","fileCount":87,"unpackedSize":604261,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDpDN/NmXBpI1hylfA7TOhp01jCTtk1Hkz0LmzqHPGlGAiEAlhgWi7zir1m8XyyNrfPJUV7uUBvfjjuMolgpYkHp+Vw="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJih6pHACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq2Uw//WKT48U2qGtaGyGV3C12+emtG+ryHOiewpaqKydZA8hZY7xt9\r\nIK9gxFUS2C9M9Sx0/Wd5MBPGyvfPxP+jFEWYV9XLTHUWm+k/w/SOeP6ZaV2o\r\nqe5c0UrLnIvzJCpHcj7Ulx6zY8VeLbBaD8kInyxHepvHFbOndGwBjAV9+KBe\r\nUyO7NhKJVePsA6db9FBv21xT+0JChEMBHBH+R5MuMYIf5ZMHDBTleijMAs3D\r\nnIL5m0qI1Uztm49xiry0mf1MU+5cs+EB9jpMHgSVoatuSQpZSi3+flv9bK8i\r\n1l9/NHdkNuoCsL9RPvzqlavJBve6XwH446XW1tR2/A2ztGjyFKnRMG1mLwnX\r\nDTQyyKDTI8QyGZkj/w+Ur3y+wxmwPVTmArT+8YU5HVn6Vq6u6ZpThg/gdVa7\r\n607C+UKlOcd0UO4t4y4JKkODBtXngWovRMlanyyF8FZfzSiCIxmdS+mpb2nc\r\nADyuSZ/5sJTNHeUS6LV2xCPO0p6In6pP5/x4zCGq+YBMfSZggf2L6N0I6hWd\r\nqOFoSIPWLCcBQ/gPtK1CiHb2icXt6AFNHaSgfT4dLgcYY+T28S2jXf3Dno9B\r\np2mAhUvb49pX+CkBfwhXWieGkIwYalRkyssgGRq4a/BIXz+b9m92mxoIRpXJ\r\nfV4+C5CSLYuk+V07QLgkGbCL1VZDbCEUlFU=\r\n=noV7\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.16.0-next.0_1653058119240_0.2642055173998501"},"_hasShrinkwrap":false},"2.15.0-alpha-wp-image-cdn-auth.42":{"name":"gatsby-plugin-image","version":"2.15.0-alpha-wp-image-cdn-auth.42","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.15.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.15.0-next.1","gatsby-plugin-utils":"3.9.0-alpha-wp-image-cdn-auth.42+a519fd474a","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"a519fd474a64a4708a86508d2de7930bdd449f97","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.15.0-alpha-wp-image-cdn-auth.42","_nodeVersion":"14.18.2","_npmVersion":"lerna/3.22.1/node@v14.18.2+x64 (darwin)","dist":{"integrity":"sha512-PYzUhR2mtUlI7ZnfAxIMece9odyftbXsrfpRCXNka5SvBPEDBOxtQcgTYHX60ItGbqkXdt4+EDaDGmQb6Y8voQ==","shasum":"f4aae107cad5f84bf0d5300fe08cc69957cfbb16","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.15.0-alpha-wp-image-cdn-auth.42.tgz","fileCount":87,"unpackedSize":604319,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD2/vew2gaTD82YRgQm+r319pMcvAfOAyNDRbQcXNPRQAIhAIw6jhAjmWCqAnVtSsJstomkJ4IaUNfWwwj4s/0maaUN"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJih9USACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrT2Q//YgtiZUtrGONyjLxjLtidMmoB7mGlbIzouFJrx6aJwPLsAaEX\r\n7SgLE3v6XsioT+9p0oyU6gX7pgLqQIDmu5yBdBnfw5EwzDt0Q10RLhCiwjfv\r\n4U+t8mBqM8yUw4HDe/xwpJNZUcCkr6kz8UzBfrFeIArlgGdNhhoAZV8UnQ6N\r\nzAq8WLSvdvbGltzNDauSsnVlb2F+ybbtnv6pAnUI0vzeY9nvPkDOTKL2g6X8\r\n5x6p0+FuQ6Xuhl4YTwFxgO89KNOswk/uOqPM+deYPlueEhumFCJ6X9iNac+q\r\nvyxMQ7wnbVKe/fMd/JJXsPeV+g5N/+6lOLyzmmYr2TqGQ0HPuqXAW1PYjIOJ\r\nfzgETvyvRKa5kIRbeDTGIfZRb/GB7DKWXVWuHblbAqdfDSR2EzF6KElJ2TvQ\r\nt8Q0+vwfW7pRoa0KadZVVy+/DI5NDPM7xoOE5XFSJMj3w3RWI7F4QHgu1irr\r\np5lY9yIPZJWPavOrBPESIq/rfXDRdUOE1rITUbZek7RFxAxvw5jrs1PBFBJg\r\n4QXsIAwvDnsk5/ReIgTgDUW06+VcjznAeniKAlgxFRWSbWW0CWHIE1Ot9Isl\r\nJMrZYLTuRV1UtI+zeaJLlzaiTctvr9jfUEainvQVWjAASQfRNLWmOS4xvkba\r\nio2+9HNkVP+ai/thDaocvSZs8wdTxGyDKAM=\r\n=KYtn\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"tylerbarnes","email":"tyler@known.design"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.15.0-alpha-wp-image-cdn-auth.42_1653069074433_0.2877699754308767"},"_hasShrinkwrap":false},"2.15.0-alpha-wp-image-cdn-auth.45":{"name":"gatsby-plugin-image","version":"2.15.0-alpha-wp-image-cdn-auth.45","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.15.0-alpha-wp-image-cdn-auth.45+a65242ba21","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.15.0-alpha-wp-image-cdn-auth.45+a65242ba21","gatsby-plugin-utils":"3.9.0-alpha-wp-image-cdn-auth.45+a65242ba21","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"a65242ba2196cc04f3b0f5bd8a06ba0e987f483f","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.15.0-alpha-wp-image-cdn-auth.45","_nodeVersion":"14.18.2","_npmVersion":"lerna/3.22.1/node@v14.18.2+x64 (darwin)","dist":{"integrity":"sha512-l4FA6jk/YAaFR2tcEK6HD0YHhTZTMHSGB8WNlfIVG1yrLKrCj3omtMedSC/ODbX8M4uS7WkFOKfkgGeG26+9fA==","shasum":"659069ebd134b11916df000253a99c82e4bc1c84","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.15.0-alpha-wp-image-cdn-auth.45.tgz","fileCount":87,"unpackedSize":604381,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCmzww6Nnrkofh3OGWvbad0wYTEUlUOrabyKyVPImLwpgIhAJfhKUOYNfVBqeqb0BH6PKrbI+YW9my1GOp+Xcxq3LKZ"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJih98MACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrBag//RQnKAUE62ZrtEmIe48DGxpS5mH5RqZbMKTW/3+2X9AYTHqlc\r\niRqAyO2J5fNYF66M4ckNGCNKe5aF84uWWY8Vnuty6R/bP1Q/TpeIsLGH0TIT\r\n9z1oinjIgq+wPNqIfXAo8XyraQ6nREtChlIr9GIJxTL2KRLPSyrI9RMVkoKY\r\nMaCv9HtB/zR54hS6r6y2dOPRK8M8fOUNZhVpM7L/tk1fGv7M6mLm4EHIYCXp\r\niYnLAcwNj/YfhmS5kOunhmYaYNbKaTbPGVps+jIS/ex70yC+n6k+iEp4orSE\r\nz5Rvjgi5e78sXK/T7gRwa9YhzBG0LOqQYGpZwjA1m/2M/Iefmgty12nI6Lhi\r\n/c732pTIRfo73CMQM+iYC0bwEVrk2Nuv+lK1GLskdezrs/W7RTXqZBzRMV+5\r\nC3sRYc2z4OmDWSKhtTH7HdmDySA5A2w8p0h1YbHH/30wC16+PINXOfURVZUy\r\njlJoJ5C7lLEawThouO0qqwNQr6UndCn0M7gPKIjUImAuwANjsHivGILTJJGy\r\nefym/dNfHUrU/2IT0SENjqD2Mq5HXCIQ9sT8tj0f6erJ4HClLz2khEvZRurv\r\nT+wNYfISMdPES29/M1xHAYX/HN8dS8u6i5WZOaMEPmiexfRnubMxBLscbokV\r\nVUmKGDQX62waBXo5iGHTZLKhVsff7pYoR78=\r\n=EOCB\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"tylerbarnes","email":"tyler@known.design"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.15.0-alpha-wp-image-cdn-auth.45_1653071627993_0.5069726157004089"},"_hasShrinkwrap":false},"2.15.0-alpha-wp-image-cdn-auth.46":{"name":"gatsby-plugin-image","version":"2.15.0-alpha-wp-image-cdn-auth.46","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.16.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.16.0-next.0","gatsby-plugin-utils":"3.9.0-alpha-wp-image-cdn-auth.46+f1438c33fa","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"f1438c33fa831c1e813c004a5dd79a81279e4c8c","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.15.0-alpha-wp-image-cdn-auth.46","_nodeVersion":"14.18.2","_npmVersion":"lerna/3.22.1/node@v14.18.2+x64 (darwin)","dist":{"integrity":"sha512-tjXsAJFyAUQDphPz82v0EhqjBz6iPPQOL/2h8klcTibski1j5wyCxSpuBN6Ex8xsS6KDYbmLkM+WkFed4fv58g==","shasum":"22f4a976878fa98d2a35cb5f5234ae80c4cb1a2c","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.15.0-alpha-wp-image-cdn-auth.46.tgz","fileCount":87,"unpackedSize":604319,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQChP6zpY6mXdO7bwehJaLncQ3+Hu6MgPnReahpEFGwEBwIgSuYxf2PA0oSewOEXianXZyPBmPpSf0x2vv2x1SARyPc="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJih+HkACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq3Vw/+LhGBmMvz7vfyzhxAlehbDOFzPX5Q9mon40VKFtv1r5e8i9Dy\r\np1JBL7rPmz7t7wJvSpXfpOedKjswMLJPQRIynXw4ncl6UsjYYPq/NnJ+hVON\r\n0ses0n2CJ60QSeSOwcOa/3JyEw3HUJrZslvVitYOKR9xylgpVpvzUMpt9Lzy\r\nHK6hXvs31Dpv8m+Vndbd0OZLD73O0x+J67G1dlPzgLSO89evARV5/geoD22s\r\n1jZE3mj40pgeTAvo7mUtEG5/NkgMJ+qv+b+hRKcGNlrNZBsMmuQmrnv8GQon\r\nO7A/fDdpWed+ZQr4Ug7OBGgJ+EJ1JwRbr3d+HygYtFAYcYR2wdgkVSmn+fRm\r\n1LM61oI9B//RQAZL8ug2uMnef4fAkQV13RDviqehADmQPnAgylrYVKQJAjen\r\ndrZqz7yA1bqBQ96mV/X3WYqiNWYN+FnLnM4yZ799MZmgUVu9iRGHJaMZHuQm\r\nx4V4ZQuPbc/LqBY2zY0K5lcpxcblmrIIl0fATK8lfGPsNIhNfS2bN7LIS4lo\r\nTPsh0vfrSEo7HW4bn+DPRqzkDds12A1Th10oki7hAhA+CF51seTW0bTaGAwR\r\nZEYJhaRlWxsJkvd7hpzHcm/hhUUwV8/tQDPY1nZMf/OCn5OmifHw22G6PxhZ\r\ny/DP1d7P2wrTEqZ0/tBKk2Ebc7OY5CC0/Z4=\r\n=q4X9\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"tylerbarnes","email":"tyler@known.design"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.15.0-alpha-wp-image-cdn-auth.46_1653072356379_0.30285974726288223"},"_hasShrinkwrap":false},"2.15.0":{"name":"gatsby-plugin-image","version":"2.15.0","scripts":{"build":"npm run clean && npm run build:gatsby-node && npm run build:gatsby-ssr && npm run build:server && npm run build:browser","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.15.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.15.0","gatsby-plugin-utils":"^3.9.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"56fb124980599a6af2f737240a9c5c763721ddee","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.15.0","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-+r9gR9vz1W9RCQ+yANcHCE1tvbJNwKw4pV6A5B7ca5r9fU62ycWvGIOfAkVZntxOSh/oCBAzwnLI/TD+oBmdEA==","shasum":"5c2f2de7bf053518295da4b2dafee5fddbf23897","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.15.0.tgz","fileCount":87,"unpackedSize":604644,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGuFZXOmDyLrbuLG2iEVsRKQUXq0kCBJQ+irK5gBvpjQAiEApOPKMdI+ZBuAFU3ZhD/PxJv3n1oAelgoKsDBHq1o39I="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJijSXMACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpDLg/8DJFZzU+EXu3pZRzGlPmGwLT2B3Sw90OCR+j1/MMviIAo6sci\r\nYr4IpZZJ9NJ8TccycyseW03rTV8fN3oAJ0fMCzlDINKDJc09H0l1FVQNgaex\r\ncGZgNI9Itkmqblqt+9woaFmV5jLaQXXetDxcPzaa0S6j90ejhRImIQsm8GYm\r\n6NOB18jvhDKaJkWj64ocUS5smTq6SWtxSkdkTN7IwxacMnJqkOqlvZHEEHcC\r\nzc9hZqDtOQtfMK6qBxTQpzmHzJXMsEamw3zpZkjD4CHUFwPNBpoZyZKdZsA2\r\n+Tqm2tPtwkynPRbO4qkBJhDHJugXLtyatdLKbdee36W5adBc4v3W0uhZzZY8\r\nkqkpOctbxLVlgCjrTvnrgvmEDdQfMubUPUTyAiCVN0napURGphj5yyqBm9/E\r\nZ+25pUiuMXTP/m0xDt/Wu5qKBClq7IQus0azUMdjTNOJlyWMmL3DSgTNUEZC\r\n6exqeOVeKgNu+QlX4AL40AIDBNVKhtZKmrVQUJIXZ2rjrDcxBqMviBedgU5S\r\n3cjjheNpv7vRjYEDO0L1Bpqsk586wlLGfcIMNssMAK9ArnNk2weqGI7SY4Aw\r\n8np9nAKOUmzTFsSzK5xNUnMfOxwtaFmgIEzNwYe4pMdQstlDslOrYMe8vm4T\r\nimYeT89tiu8fusbugoiW7zB0mMqRetwH6G8=\r\n=6EZ/\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.15.0_1653417419788_0.7881767929718586"},"_hasShrinkwrap":false},"2.16.0-alpha-luda.34":{"name":"gatsby-plugin-image","version":"2.16.0-alpha-luda.34","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.19","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.16.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.16.0-next.0","gatsby-plugin-utils":"3.10.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"87da82f14e5633ad893296634c2356a083ef0b9c","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.16.0-alpha-luda.34","_nodeVersion":"14.17.5","_npmVersion":"lerna/3.22.1/node@v14.17.5+x64 (win32)","dist":{"integrity":"sha512-zWVx2fd/5jAxCMjHlwCdRCBihYHnaFCEkwQcXO4YOjagYRJoE/Sb8f/fIi2R0ZNshqQrV1+JPuefzaRiknlXEw==","shasum":"bcbd2ae31bf97c8f5ea9d364cce56dfbb751a3a4","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.16.0-alpha-luda.34.tgz","fileCount":87,"unpackedSize":607986,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDJtavbwf+dH3qzMwyezVVu7b2Jle4Gkr2LUQLkz62IlAIgXb6nsjbniKomu8FY3lknZxenBaxrArr3DZ7QU/Yk6XA="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJilJB/ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp2aw/9HHP57ffURRWNxkpeoazgk2nWClfyxQ9IZGfnd/Dh2eie1iYR\r\ntCDxpSQbMegiWQuRSbrgbB40yvfhTibu47zE6zSAqENJNF2Olqd/tpoyRf6e\r\nqJpJLbNaeThFPV44/vGfZ6lR70t+pht/o/hclZviB7iojegNk2ylER53wC/x\r\nQsrHazKd2CXa5Eg6woGY/G/L35cPMow7Oxx18sfx4ahc4Z3lgzYLozxDgde2\r\nAFdhX+mB+sNXx35RnqVP7EPuwUhOlAgvM3+5jHzhl4RYEDnsgmdeXu367dZG\r\nCPD494iQl0DvdCVqTUTKA/6GVDbuIydoBRRyQzF/vYj6zOXckg6/IcRwAS9I\r\n4xSF2xfQ+3qNFHumAiKv/9glVo6TVy85KPLO9Z5HP3VGLg+9629c8MY4ct+C\r\nyYnN+v7fQVvozjuYqJBT/C8yX/yR0vpxp8Le/M9IykNxSjT0tCmt3gNXdxeP\r\n708HKsQJHJrMeuCultamovbJARTVsXP05Ig/nUBQic6qREqtm/MRzhJy7Hvu\r\n7FaiKHrMfVGEzRfJvM9MYQhmh6IsxHFHk7YUYo47uW1CY+SoGgyCZyRZf2ck\r\n7oVd+cBQB3HSIyJopRSW2GaOXdeB2Neo+6VDYaunHQ0FZtG0vh4X15Xk0/d8\r\nuVW0vVwiKiXNa7AiOVDuDdTxY43NbFCtyCQ=\r\n=KJI7\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.16.0-alpha-luda.34_1653903487145_0.2977051236314212"},"_hasShrinkwrap":false},"2.16.0-next.1":{"name":"gatsby-plugin-image","version":"2.16.0-next.1","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.16.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.16.0-next.0","gatsby-plugin-utils":"^3.10.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"1cebb717017de1fad88a5d66106d4c1dd7e546d6","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.16.0-next.1","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-cyfFDaxLggHt6DnKiXJrY4L6Vmj70QdDbCbI/lVUXU+3hMp6bhLZHZaTIHi9qkxv27JlDTta7Kec2CLzAUyaRA==","shasum":"433e9afe8dbd48a62ce6c687df892e2da6b2ce7a","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.16.0-next.1.tgz","fileCount":87,"unpackedSize":605227,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHkSKGMgvdpq/GBZM7bIAtMND3nVurTo2SZtaplYf0dmAiB26wFa2trK9OfBEy17sS5nqpKgOdb1it0QvVzJe+35ig=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJilc5aACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpH3Q//W4Dj6Y7vjMqkH2ctFsOBSrUIs2PB8OxQCYWv7Lwk8oflSGJ5\r\nwpWjyuWHlXTRFQZizWYgrstbx48fNo1PJKOMzwivFVreF6zqZaZpljqB2eJJ\r\npesjSbVttSWtFPdgjD0gtbWnpTEzrtGKYQfqYPSxVdSYPYIzxP24gyJ5hGN+\r\n7/tE7o7Ose7G/kFvHOsjoF5DfVPL8FKXJT7SHvMqzyuX0WQi2pqP7W/pPDe2\r\nr+JEkMZEQfOGwV46GcKV46SMnJTZMEFCYAnV8ejwexnEZyO528kg1Zt5gt0N\r\nw83mvfWcdAuZYapKdOst2BFCWGJLlIOtdLluC+3T+9DARVzsb9I1t8oWWIhX\r\no2f4DiWKiHJKejs9Kw5KNGt8ZuwDY/wK/oKw7sW6S+sJBqdpV+X/sYRW1hIL\r\n/3QpHtZMslolw1PelrbyyOlK5AdwAojrJGzQuFTJyyUG+f3iJo05FtCkjHIy\r\noO22G6KCQ3v3CUIb7hzs/uORClYnBtgF50FFQ7yq5sxm1s6il0CoA6G6SMaT\r\n+HJfjCDg/V89qXifixUmqWraCuB6V/2gabn2Seo+faOm4LHuKmTV9ALmUz64\r\n1EZAWvmlDMNxhfhx9jLLaVjYFHvwD60sliamoksSdjKdww/uT4ifMTNWYD9/\r\n3PsVqSVPqx7zdZ7pBqs3HqXj84xJ/12vxEk=\r\n=TrCn\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.16.0-next.1_1653984857920_0.4883891466525885"},"_hasShrinkwrap":false},"2.15.1":{"name":"gatsby-plugin-image","version":"2.15.1","scripts":{"build":"npm run clean && npm run build:gatsby-node && npm run build:gatsby-ssr && npm run build:server && npm run build:browser","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.15.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.15.0","gatsby-plugin-utils":"^3.9.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"2652fa800cf5f21861368b332ea55de210cabcb3","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.15.1","_nodeVersion":"14.17.0","_npmVersion":"lerna/3.22.1/node@v14.17.0+x64 (darwin)","dist":{"integrity":"sha512-Zicg8tOJJfLtKp8bN7BqF4aH9Sf3C4sEJ7sTNV6RDtLleFy5GQb40mTVIV+yvxD6AOXKko9wicc5XOrKBvRXyA==","shasum":"6b4f34fed2c1a6cea9dceb45b7ce377b849635f9","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.15.1.tgz","fileCount":87,"unpackedSize":604562,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD5nBYFWN4imFgRvZmcd3+R7bIDo/kwoGA3AatxMwzk9wIgdfzF5g3pe0hhTbLWtWNVEMtiwqU2hSGhIu0GzK+Mdmc="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJil0bzACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrpVA//WwAiUgpICGoDpqREnkp+KGZOwOXH+H5X3mbP46N9Jhw1wPQV\r\nKEWs2rqwnIGEs9r2DPmrRbkjgpVhL8C2jMIAWrUtP5zTajEOTubFACCOxtSu\r\n/jfencq80zQ1J4PKtt4q9ebJS5Vnn3zYbQWiT7Joe7swQP2+IrJuvDyB4rKZ\r\npmYpOL0b2h7v/waGxa8XDdbclyCR/tSCIr4f2lsvPEKM++l599U7H2oLrvDD\r\ntaZ/5Cb16kw+aAJ4xz5ietBSia8jGF/9honKEUYDiLm0LL1E3xDWTwC9r/NP\r\n/du3/pLidpi0Yvz8uVOEtOhpHhv2S0C/U8aalDZBeTVyDlmrX1cUQp/RIFPN\r\nEtryeTOTlS1Ma7jzO5odWl8b3HHrPq1kGj4HWtV3AtvPnaAztj/iK4B+m0I4\r\ntGH0kRJvHkCpNkpY0OB1heIVeffrvjh/3JY+Nv/VPdcaopdDYrPWhnCWZq9B\r\nnyMSNIKMSJxsTHBo9ajlBJUKFDi954aBBwyWk9eteozTecNognKT4uZBWSdV\r\nj4M6TQSf6WVLMqiBKjCu69Y5JvMqsfZf+MG88gqTj93uAH4HAaTK0095nRfw\r\noc0/KEyM384BD1gyRIgr/9xVkNnyDyKYo/PeGKM/fjFKKkVyOwilTmjycYGe\r\n+Pd2ac8BXvnyxZEiK4DBMmcaOT8YhH066tY=\r\n=7zLM\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.15.1_1654081267429_0.36051742758946315"},"_hasShrinkwrap":false},"2.16.0-next.2":{"name":"gatsby-plugin-image","version":"2.16.0-next.2","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.16.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.16.0-next.0","gatsby-plugin-utils":"^3.10.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"ba182c6367c636d58b2180dd024526708e5a5fe8","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.16.0-next.2","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-Ut5jSAzR8hDSt+bC8ZhSXKkRjW+VOxks4Opx5R7ivSAwUiXpP10XHqcqhzlF0g6VRjQkPCTb3kyuST159/ygOg==","shasum":"9457926ec618e60fcd05e1c5a81daf1b27f68e8b","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.16.0-next.2.tgz","fileCount":87,"unpackedSize":605029,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDe1rmH2LSI3O41CdoqEsSGWgQI1JoUcef1m84pgA/rLQIgCe8Ih1trlyrPz4mpYIvmajKZECZ9pcuNKgfRaNdqPDA="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJil1OYACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoBBA/8DTikwus28TJpA4lwWsxCBRqmzCWD1IxhuFzGwHc5FoKchDqt\r\n9Fcpob4MPqFfgV2ZeFWgn4+1ixAGpY4IWnZcKXaWaLS3uRlnkePwhhPIrI2W\r\nxX8JSz+QHExtawEeDI159nCBc0az/jJ0uy1I7exyoJj7ypgruCR+fbg3m5z4\r\nUIzEDCJ5kFgTMImAnyRbDDQ7R98Rxr+UtS/tMErMOUN6L31aYITnVz/LVKye\r\nKDa+q4MKY4rLSfKdsebxIJIcp6Mt3qOuFpQIEDFS7qvqH/ERqa4Dit7rjGrk\r\nioApsKS+kMC+DhaG1XSoOc0VuLNRK7BTOpvZ/UAqdb/Rfu5GDPVmwp9BZTEJ\r\nk7ZmmwXhqzWvKW6BkQKaoxk66jiRPo5sZksiu+fcu2qcuEHK19iLhzJ4Fd/G\r\nCeBMGfkwozQTec9TBRH1lUiqT8+ZaID05EmfX86hKn9XOeVMcFiiJ/TCS/Gq\r\nQFbSOtPfZoho06D7+j85dK61VP3Us0GHIlAJ2OvZ9LH6+7Pr13+IMdNsraVO\r\ngkSJr/3+4y23ehN5iVoUGkoZ20MHxAmlyAeHnckEH2EWVX9mJiLMn08AX6K+\r\nICagbaH0Lcf/SspNucBBJO09yRK6J1YUF6cetn135+fj6sORjV6a+wQsPo4p\r\nBAcrUdubscFinKXmggOIVmjdhkjYwhUtKFc=\r\n=4TTZ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.16.0-next.2_1654084504179_0.9541580060627326"},"_hasShrinkwrap":false},"2.16.0-alpha-image-cdn-caching.9":{"name":"gatsby-plugin-image","version":"2.16.0-alpha-image-cdn-caching.9","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.6.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.16.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.16.0-next.0","gatsby-plugin-utils":"3.10.0-alpha-image-cdn-caching.9+92ecd09e34","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"92ecd09e341537b4a078f01f197a84307fa516c8","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.16.0-alpha-image-cdn-caching.9","_nodeVersion":"16.14.0","_npmVersion":"lerna/3.22.1/node@v16.14.0+x64 (linux)","_npmUser":{"name":"veryspry","email":"ehlinger.matt@gmail.com"},"dist":{"integrity":"sha512-pe9ByTqKTPZwEf6CVGRUMkIwu8/deXDnp/VtTdrOMRoipO0IhzDoyGI05Cmy2XytXjvCC3Y7fG2nKafG5q+vQw==","shasum":"6b9e53f7da992329b5943735a4fedee96efcb076","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.16.0-alpha-image-cdn-caching.9.tgz","fileCount":8,"unpackedSize":73534,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICQGE4XgJCrrqFsDde1JvAzWJSkuPls/qqUJXqpnR9fHAiA2G/DQXaonZvKDj2rQzYyZjtqUFjbWD9LbVZhHN2cMHA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJil3v5ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmry2RAAl7FjF5VVx2YlIp0exX2ilAd+A6UKHLsZ25lzCb5ujC/5hO0Q\r\nUW+lyj7HXrkHChoOig9WRcb04XHbBbbvju+tN9LtVqo/DTOBUn9at3mMx5me\r\nCtiskPHx2TbrXcUra9MVqIohTDogPYkyoipu49S7Nftd6/Y55dNuJInkZ50a\r\na7ObHQ0bDSYV5DZ9wNS000WsqGpHEdA8AiYWsaXZvJ4BlOieH3ZQTGRvD/h0\r\n2116NnpzgkL1u2y98PuB3F9TzumtAdPY6JL5Vs4kyR8h0ERuQNzThWxceUK6\r\nPr3j7yL53e+eV5JHWSJWBN0jmWH1ndGQnju5h1xrT3Qba6OzDk+N4dxKF4w6\r\nqxJ3ilf/xZzk3ZXzJmETOaJkhd3eTkBcnD1R9R86GQa88iuksNILPeu9rm3F\r\nGDjZ/T7W2q6YhsULBCMHMw5aEX57xhazjKwRthGj8osf+mtR0DaU6btP24VK\r\njRLe7bPr6tj0l1e+zDyBAZVYYSCD7oqcQPNOCAq6H4iG1xdQeofQzKgs4Wec\r\nc+VSuuDwgxp9rTIhkcWYJRWe1o7MuT72exwCjE7B/mZS43dsUumYsgt9pQsR\r\niZbDiMHMeSaDKkDH59CXHXnfYqP/hSxJgeRT8HDVPfa/Spj0lWEsVoc3kaLk\r\ntoMM+FQRufzhacBLBnIbVSbz4t+kModWZdA=\r\n=1xoW\r\n-----END PGP SIGNATURE-----\r\n"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.16.0-alpha-image-cdn-caching.9_1654094841045_0.4663520288701919"},"_hasShrinkwrap":false},"2.17.0-next.0":{"name":"gatsby-plugin-image","version":"2.17.0-next.0","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.17.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.17.0-next.0","gatsby-plugin-utils":"^3.11.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"f35540cd97d59be204ffa451d6e766e776cbd8d9","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.17.0-next.0","_nodeVersion":"16.13.1","_npmVersion":"lerna/3.22.1/node@v16.13.1+arm64 (darwin)","dist":{"integrity":"sha512-nTdw/2KlwqLoOGcyFBxewGy6+7xJnEdBxspNWFXxovzXgfeNeIllYHRSQeqE5Hl8WGdLy8ezfWi7TOCHXZx4/g==","shasum":"24297bb956ff76b9f3e6af766879fff7feae99e0","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.17.0-next.0.tgz","fileCount":87,"unpackedSize":600470,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAdHHb8TbnKMtlZ6e87rbcEWiemGRoJx/SWdw1NZ5hQCAiEA0nJvGFpFlbLfyWT5yf3Im0dKziLV4jBOJfmF850nxx4="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJimNVHACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqGnQ/7BItw8FGzI6Vz9RGM2RUEz8Oim0lIrZYKrtPFsVUn29sMTeuS\r\ngwW5UQTDgdPW9H06/yGVikjSWpEjs/MvspJ45j0ndK730KUPk0HCJeMZ2bsJ\r\nl1m/BtLFmcezednxVMF2G/JMao5tcjvXNAlZaHmbOOJ9pJP9O30YGsJo7RCk\r\nP3goxTTOxm4tHgT5f7l60ndEtuPv6uVvXEExTsJcIYthXUb/Wdq9CYpScVeB\r\nvEp6/3y0xo/T3Ou7peCQLUQEsjFhmwQNQZrv4Ulk/YHLCkV3U00c5T8TCIB6\r\nygjuRL0VUrJKInhQ7hkpCtVYAMTf7Zy/7cjnyMVMWpWnyChq2mEAz2FatRAH\r\nNJPVt1Ew7ZUY0SCa2cNIUhVPa7lTd7CPsqRN/i8RZ5uCzVzwEfOFL2MarB4y\r\ngQk6tlxr4GxDsoYpAT8pee2HOLY2Q9LqTWEx+Id+eZpMrlXuovISD6mF44d3\r\nJGCT1UyaeP0K8BK/kFZu8HKdZt1Ln44skUG47Oys/AVHxqUaY2JPze2eRP4j\r\nwfzEzp865oKn/EA4VTiXxVE6Fe9g9c5v+jRZ0b0T4kJ5n77tHtZp4RZ61gn5\r\nVyIPsFSefwV/RYJru+hpQ1+TmD/KSsvCRnCft9YBXmcd/Ux67xvkUZZsIbU1\r\ncqfuulIySzauLIudV5tM2+ec5bMZW8Z2fcs=\r\n=gkH5\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.17.0-next.0_1654183239110_0.7600877377832509"},"_hasShrinkwrap":false},"2.16.0":{"name":"gatsby-plugin-image","version":"2.16.0","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.16.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.16.0","gatsby-plugin-utils":"^3.10.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"ddb52afd476cf312c9f8c355e15778f4f20b72de","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.16.0","_nodeVersion":"16.13.1","_npmVersion":"lerna/3.22.1/node@v16.13.1+arm64 (darwin)","dist":{"integrity":"sha512-Vsw2HNBU7FYykiI+LMOWf7fJnO517FhCUkiPhbl77Dg2w4X7bNAtFQFOxfBzmrKqDDkJgEglVsdK8ntN1Jkslw==","shasum":"b3fc58152efd866ffa5d20d36badef23151e7446","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.16.0.tgz","fileCount":87,"unpackedSize":600442,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDIX+w1AcrNdviQa/qo5Lz01+LuvWlgGMdTczJ8CQvUhAiBx07BBvLrNnUiZlC2ofgp3UirtHTX1gjygimDiUGTHSw=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJin1TCACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq4WQ/7Bg70tWmbhg8vh+oQPqGNGzBCzyoQLXUSfyn475adclyONyLp\r\n5hCKJlZ3YtDfcgMOP3nXcRftY9NNavgvgjuZiigjIbQjGE8E+dD9geUTb/33\r\nYHGWIGf5xgwk9uPK59zQjCBHx0aOBAtCFE4691xHFb175/lf1bUoKrkHCvJv\r\ndHuZDrJVk1v/iLsf2AC0swsG9W1iruCHEGv5yQLolaL/D1pWvyL3LN0tM0+7\r\nX6MUOlS/ifhMVbztUlKicldBAfMndTYBxMpNL4uCmAloEcWJDHugsP7YlIGP\r\nVyT2TPPCIZLPw7DzwoBHDtFYZ+kLNl9cJYN80e329p/37kpodczisgobmpUA\r\nitWBtvML6GYolUcGwNCZhAr7P7QYstzPBX0j3YmSHRcFY4AQoeEQB6QRpFzY\r\ntA/bYOeEi9EObOITXP69x9ywnjCXWFiTmrkYYsUq9yviHyDHELD7odzP5O1g\r\nOUIFFg3o0Hpa5Dws98rQ7aBY5A7gqGPbgFnWa3j762BQDqXyiiF++4NFxZsC\r\nZ6qZKUnmQuwqnFl8SqQArgHxBvQQ0WuhkoGCAPMI/mWmQb1ntTN45xXduKiN\r\nYu8we0npCyclHP9lS4rBj5fnd2VxQ3KmULxbWAq2cZPV53u9RiMVM6CfFNEg\r\nBRXy0mXuC7LWr27SM16I4E+FCN6IXZNARgs=\r\n=KQGV\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.16.0_1654609090741_0.7626935477047505"},"_hasShrinkwrap":false},"2.17.0-alpha-drupal-image-404.12":{"name":"gatsby-plugin-image","version":"2.17.0-alpha-drupal-image-404.12","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.17.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.17.0-next.0","gatsby-plugin-utils":"3.11.0-alpha-drupal-image-404.12+872d3825ed","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"872d3825ed46a7f5737be9d4ab3844457e0d8f79","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.17.0-alpha-drupal-image-404.12","_nodeVersion":"14.18.2","_npmVersion":"lerna/3.22.1/node@v14.18.2+x64 (darwin)","dist":{"integrity":"sha512-cULqfq8wvqbaf/Lobp6dqwfeXpUssDHNDm1/ES9rPHmMjKPcR6esPWjUZE2pRuFghgzyqnrR7GC0/Ummu0hECA==","shasum":"1c1a9e21f615e840f5f16c0ce0b1fb4fae5a3b2d","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.17.0-alpha-drupal-image-404.12.tgz","fileCount":87,"unpackedSize":605472,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDPvfSRhjuHTqhEGCCNbDpbeC4nGbvA0tBUaIsoSMuohAIgO5jBq3aQJNly9OQe4GUpRQzeEVreBT852aUIJEELvkQ="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJin4KhACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrvgA//YpL7CyOgeAv9XqGUWV9ZXnQkzxKsqcfjTyeB8YTrxc7WluTG\r\ndOGxbHvEBpl1C9g4ybnSfyCSb9gspyaYiFEpFmWzJ2AXXzzOLhS0K8qOBopH\r\nJjdHGHPRVGDWpWppaOHIzyTIaGIMGpwqZD1z3kLrp8/DUUJzlyUmhWa98WU9\r\nLRe13CFWRN1clCLfWpky1vN+ApcDeOIoiTG6HdWE6Chvr7mLo1m/vbAEn49m\r\nmzieNuMa3+ZAPaIILojV8E0nBWhFi9mV2iMyHJ87ekgXxNsktkgoHkJE8Mv2\r\n00+4rmkKj5+PZUHRKVEJ4K9K6zLM41mek74iImCQ4FdO5LfFsFC8Bvu5UH0r\r\n7MbQn+KCyQ2e+GPZndFrL12WT1sg87wBf90RKSL+XkBqpq7cGnlg05UmwvSj\r\n4q6fsyhY09LNp+4L2Rgs7DnCOKv+e3RYg0cHbgdKq4cqlnVnrLZaiZSHUHh4\r\n21wRvLzx/ugY9OtNtReQx4haqwlP4YVqzBsOWKVIfScW2SnZxQsjsVA6X3OD\r\nhYXziejn6GUv5oJRl7Lx55nmhte0B1PMiUcEDl6UXQJeluAyGb/U8l9y2pFY\r\n9icrD91do4T/AMkZIgmedBYvXCl6C95k4Vza5ihcnfwNebw227crAyV8M6Bz\r\ny0DwDhWAdS7c7doWANiK0PbU6z6Wb/jzSRs=\r\n=ha3T\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"tylerbarnes","email":"tyler@known.design"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.17.0-alpha-drupal-image-404.12_1654620833510_0.9252145013345527"},"_hasShrinkwrap":false},"2.16.1":{"name":"gatsby-plugin-image","version":"2.16.1","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.16.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.16.0","gatsby-plugin-utils":"^3.10.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"6330a3e77d0df022fa8b59f2e496b455a38290d0","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.16.1","_nodeVersion":"16.13.1","_npmVersion":"lerna/3.22.1/node@v16.13.1+arm64 (darwin)","dist":{"integrity":"sha512-PnCcJG7sE85xQhCFIMRUJr42T0eLRBJsERfhgHHaiCjUfNbpV02eQ30Wt8i3s3T6Ci/xPJYdnnqM9nTqiCJbTQ==","shasum":"4c6f7f0fee0bdb304207ff6f2e92cff36b106f52","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.16.1.tgz","fileCount":87,"unpackedSize":600685,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCvMVn7RdLaJSrT+ggykHd7+dYCXXd0VPNdQ4I3mVMtegIgRJ9oGwdbohKm15qH1wXvPEBPKLTKJK+Y5NFJpdFYFL0="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJioJIvACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrZmw/+Mhgg3UZxX08PiFJgE1zTN9BEraRENTN+1rjSDc5crmbtm0R5\r\nnGsBCqPWlZWxnZXXJHlFrU+LifsIXH6JIHaLTxF4g68RUiLc/h9U/cAmhH8v\r\nXHtl5dwZs7ewT9LVjM/vyRIrjDFikFQeMSOgsmLxb9IPJFtilpg/G8B2wMau\r\n/Z+tAPtp1Pany1GA+6atXMJXEiRBH4wa8ACw3SmWuOXEnmHRdwN3yTlE4ZvP\r\nEWXhk1b6K9vSCWoSQ8dhZt9GRzFXp7yWgz9C767e76E+w/SadwXwNZJcjbbW\r\nWV+VLcgCtYYTfdpL3yZIFkMTPIqwy7cfHzW5Oh2Rv/km71O2M3OwuFPUU2y0\r\nkWh7gBFgrSxGdmzI+AZJzjSwYE5DspLWZ0WteUgP8rtvyqIciVkx0LxFLAdB\r\n6T6tjlsSV3weTsksblKvRhZldB77ebxN0WKmOJregXBU2hHi6M6DuPv96Bzx\r\nhUDPlQy/MNOGhSfbOkXTYcwSC9B6iX8LBlInL05WPiPOq0YxlxRpMtqGBtIz\r\nY8HBEUiAL+wEk2SrWyjQG9kGtvDEl7+FozX4I6LH/q3v3m+7qCO5GKFS6k9g\r\nbeEo9hv02Rbe4L151KNER6V+itCN9fYh+ehJeuodGJDhfgTpZ5S+B7csS/z5\r\nLoMUXze9tTbtEnruceFKh1HG7Sa3V90Usq0=\r\n=75Gz\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.16.1_1654690350783_0.4062288315582969"},"_hasShrinkwrap":false},"2.17.0-next.1":{"name":"gatsby-plugin-image","version":"2.17.0-next.1","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.17.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.17.0-next.1","gatsby-plugin-utils":"^3.11.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"2dbdd685aea3412a8be69c7c3507af4b15b708b8","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.17.0-next.1","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-F/HW9+5wJRZdskh/ie61nPfvD8QFn/5aJBSJezWFie81XJio6AFcnI6p7Li/BGk2Kq77SDaMaZnU+z9CCJQsPQ==","shasum":"4af104595c8ed564d5a86d0a555b6efb8f88477c","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.17.0-next.1.tgz","fileCount":87,"unpackedSize":601403,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGzRsalez0/cliUZ3R5shM8DR5yfnZCiVH2YtT8Wi3mrAiEA390jK/JcjKhz9Lds2gZLuH8uckLNVhn2qIzTprrRWQg="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJipybhACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoPZQ/8C2X2qNT80vJLaQYzRQDl1mE3zKZkHAA7tyt8nkIZyOETkgsR\r\nCOh1/rg9zXJWRIE1bLmNTNIM1+97lqN/JdFJN0E4v70sF2KGH6ROI3Q7fiBA\r\nporjDTdGyUOmFOkDMNb4bbtVwy0T93qWoW1qlRFKFxbY9wH/8FqH+QCQKeQ4\r\nyPoxRn5pcdUceVPN2tAbjnzmok3Ad1GLV2Ezg9rkVqj3YzDG8RoLyFI9qnpo\r\ntUNes/Z3DnfAuRm6osVdliXPOGLQkchIiw0mMa6Pv8ySW7vuly83QjQA2SJK\r\nUS//E6FeWG5Om23t+KILlgDcEaOcOaFghbH3F0ZBgzGGCge9zz5D6wWKRTJp\r\njxXAm8vyxLzHWo4yevPY8F5xS2TiEXa8lWvpL9UGFyeNEqrYiZsZozb+vFRv\r\n2OIX3JEsAadVbVbsa07rev0BJEsVzdstPdrNnmjmHWmArGRL90vbbzHDKuCe\r\nmBfU3UqtfFdNitiFsF7jt3+8MHgg1wvwnY85i55AAoFcV++3dEeykZrg1SIt\r\nV1cT5/NoAcrwNZMi6J5PCofKdS/bYuaPPQVhsrslPIHUZ5VcH0g51UMyDm1Z\r\nGMhV+FLLXJZsIYz22Y1iggyUm2uJfwFwUuD9RSFj/1CEI8Nu3mK7e4i4CrGY\r\nUmSk1JnHIRjTZzWb4t8bDDpZjl93PSgsqyY=\r\n=Nqsb\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.17.0-next.1_1655121632771_0.9909952355627505"},"_hasShrinkwrap":false},"2.18.0-next.0":{"name":"gatsby-plugin-image","version":"2.18.0-next.0","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.18.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.18.0-next.0","gatsby-plugin-utils":"^3.12.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"e7136908e238d1bc6c3d66c306533c81394535ea","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.18.0-next.0","_nodeVersion":"14.19.0","_npmVersion":"lerna/3.22.1/node@v14.19.0+x64 (darwin)","dist":{"integrity":"sha512-yYenhHAUT6/t9Dn85eyd4rd+nSMOieHOL5PuTItk9rr5VruSjcUGIRrI/bwjDiNRsW5UyO65Jg5QMiCupsaHlw==","shasum":"19dbf4c7640ad1ced84bfaf860d8c970913f28a2","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.18.0-next.0.tgz","fileCount":87,"unpackedSize":601403,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDOCDrKuMib9kty00ctSsT8GIUr3ios/MRKqajq3L98OAIgRHhFbrutVSi1WOsvlmIN028E+qj3M55T5cpMG6wyqVo="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiqun2ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmpp1w/+JiTLUgkDlINGhVn9c+VeYErMCQEi3NizpWLU/HupX9TcRbAW\r\nCm01qHKs5c1n8GKp5pDpc/YyGoP0rU3Qy5bdCxNzcIphPMT66ExZ7HwTGzjO\r\nN5twE+rfNZ5heR5tjrqxP2OsZm9XtDMN2FWf06EuPnrpF5rB5kt+Rna0l3YC\r\n5wqe5I1hv4lhfuDc6XJJIW39PdM5kucejXj4aUMqxEDaQnqZXtOPSBWYBoM1\r\n6Fk65n/iPVupBjb0B/9VO59/p+u/YItq+3/N/zZYssBAmvAwCc3+zqyLMvjm\r\n2C0Cp6GqxAtuI88tGXDuBZ8Cdd7reV1n+PE6aJfDuJ0h4Cm0rb2X5IW1520x\r\nzB5XD0z+c54SfZKSZiiwL/pr9sda/W/zu7xkS9EtYhiOuzLJXoURrQr2Ax9t\r\nMhyQVUrZD8BlnGZdlbbob9b1bYRj998HyyLX3EaqPo4hW+aqRgNmRbSIxE3C\r\nn56XCVHz/XnxsFghQz01DWfHI1Tx1AOuiY/uiYqjqkzfn0w7KCfJGR04BDXi\r\nQwLtTZaGnBlYaedwMPnkwEMRlxBVXPyuMqTR4Um1g3C97DCtWt+x2vZtPBP1\r\n8H3TugJz1t9uCAwPCtWuM5WXS1hg38/Ogwx7B9XHZ0Y1+XLOKrkwLoya8sw8\r\nKALIM09+jmnuFQGk4MS64WbPk4aU7w9EqeQ=\r\n=ehHB\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.18.0-next.0_1655368181905_0.9366694485491611"},"_hasShrinkwrap":false},"2.17.0":{"name":"gatsby-plugin-image","version":"2.17.0","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.17.0","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.17.0","gatsby-plugin-utils":"^3.11.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"4046323a40c4b6222066d47fe89e088ace9571a8","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.17.0","_nodeVersion":"14.19.0","_npmVersion":"lerna/3.22.1/node@v14.19.0+x64 (darwin)","dist":{"integrity":"sha512-YBVYczsxq04oA3+tx80f94FSxtCjFKc9tKj68Zp/NRZGmLL5/0/s++UcMHxzusmC2P/rAKfDlQ6HNOhm5dwFhQ==","shasum":"8106818cf09409f22356a61c7e1a2ceefc4f934b","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.17.0.tgz","fileCount":87,"unpackedSize":601375,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDIz87FyM5BFsJMhyG9pCxQ3qtkNceiE6GKLivGxp349AiEAhAygjk3fJm1OZBz+Q9H8G/WbbZmXs8uufsq9MHeoiLk="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJisYxdACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoaNA//cuGnbWy3KS/Oq1PpbtkSjPr+GD6E0T92Tsw1jj58ECWUrpAe\r\nJ+unsiqchn9ok54sHgrqUMLOc2qfJW4LN8d8DDNiS35E4RoAqBZOU+/OX7vA\r\nCDlo7G3br3GcDNhCRDWUccXbnnKeJCtcwLJm5qcSiWm8uPF+E6n6V8WP7bx5\r\nOPfKbguwOJEGzpLB/9/7PDXRBiTuMkBaPj/W8sXA8FxmyM9bJoCqNpGO51ZV\r\n+qzMqB9C1UVZ2IwHaPQDWBtRCYNCnxx7xaZLaKnzHvKbyfz8ba7BetwHeT1L\r\nkKLVPEZLB4WUcp3+2m7nCohcjnrSLLp4Os5KHo/fRw6QLChYgeSUncijpMSE\r\n7SCtO3WmUDS2odW3gGEHeuLBNUu0IDqsYlBvbIm2CYZtZk3PfNE96ilHA6f5\r\n7wAhXrk2Zc9ibxfNZh3I465bNQPZ8QTzrAGYgMitNhnzK8d5aYyXQf/vv48S\r\nzKWzb0QeU7tDXgMrhHr4QdCdr8V7LJ8FGIKc0z/ePKa9zhPPeHkO4ZKUH6NR\r\n79BkNGlJ9RmLR6JPSWi+Amrp+DBOfrQlkzbzvaQIpKEjc+M04MTNpmpz0se4\r\ndIetlM+i2VCHE4/CxCUII1i0DCsUmyWRqBESl4y7pp7Yx/ey5DdGOS5yMmMZ\r\npAithpT9sqdbmTH4qHCm+H2RFw5yqs6zT/8=\r\n=eI79\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.17.0_1655802972816_0.366867078168265"},"_hasShrinkwrap":false},"2.18.0-next.1":{"name":"gatsby-plugin-image","version":"2.18.0-next.1","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.18.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.18.0-next.1","gatsby-plugin-utils":"^3.12.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"d510137ce096733af3fb39b8b09b5937601e6985","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.18.0-next.1","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-J9x2SdCORqAgwv+g84NY1m4wGIaL7+WkUrbdSsuB5L0N8IZN5+w4R69H0eTDYGPI0neOwpsLKzRMAlh4/87XUA==","shasum":"3ab180b2de854323c4a5052a36edc47d4d228da2","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.18.0-next.1.tgz","fileCount":87,"unpackedSize":601403,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCoK2l4YrBNJS4dNH5HOZppcip8maTGTdkyQmfDrCUcOQIhAMIN4CKN4DLtTVJyd5ArzneLWkSEn9REJnLzVDrHTM5i"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJisq5YACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmpzcg/8CPR33H4rdRDhDdJJzqZ+W8jilpVAUbVopgCng9HttdFKCR6I\r\nKEFh+d8nOuArzZsKaHC/VHZ7xCaDmuDhlO7W6JYAq0OY6AKCAQ8mYRBQCoUg\r\nExbtS9iAJrnuP4r6JjhhJ/G+ria43xYd9Nl9CQHfbeDbIgN0czMK+ayK0Gnd\r\nU3lF0WA59OZ0FPFKD14MCqa33uR2PY3Ovb1eVd60cvxZNAwXCEQzToPmtbOm\r\nCrv7JpdPOyftZ2KplZqCJZDJPL2Lbwn83/hywB+NcZoeHiC605E5fLaK1Son\r\np2Sf4aEMyBNkXLm6llh47DQrlzzfzDzMajlXQkeqFFJ/OJSoCmdaz8M1yQd4\r\nh4smUNtBvBwd9cN5Bs2FStwL82ItarMTJQ1NJe6JVxDIXpYGmOrYFHl3ASng\r\nzjvg+QCdenQb5Q/bAWkUd4YJvHEZRi8G2YdBeeL/yo2y9XKkKpDzUmBIX1xv\r\ns/teCxpOM8OWo+sikDsE3S9YOdr6NN5qMS4s49GfuIIDblJ7JwSFFHU/Ybdv\r\nEMmxojNcEuLA586D42MNW4JR0tWSzvxMWztCYtP3b+pVEdoUvyifOrGygfW/\r\nDntGVAIEoYgvmdiaBeefKVw8tMPKlGBNfiawb9q/sf6+fcCB+MkreoyLZrRH\r\nkZkzb9JuEXSpoaLGt4ubS8373oBPhKpFttU=\r\n=rAMB\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.18.0-next.1_1655877208529_0.08525485702868973"},"_hasShrinkwrap":false},"2.18.0-alpha-mdx-v2.66":{"name":"gatsby-plugin-image","version":"2.18.0-alpha-mdx-v2.66","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.18.0-alpha-mdx-v2.66+44a6cf3807","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.18.0-alpha-mdx-v2.66+44a6cf3807","gatsby-plugin-utils":"3.12.0-alpha-mdx-v2.66+44a6cf3807","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"44a6cf38070298fdd759766cdc2b343b327ef964","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.18.0-alpha-mdx-v2.66","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-4NZgYsAilUFZuD4J85Gr98DcvdIZ3xaR+DZJrbtmM/gvNhQYIHMoFybSL3KMsVlIRcXPAleJ3pHWtRUmmchQKA==","shasum":"12b37719ea72ade98e34539831ee86227a24bb14","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.18.0-alpha-mdx-v2.66.tgz","fileCount":87,"unpackedSize":606229,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD2mbd5CEHHa2a/DbhBSatiOSCLUZ8F0J1PE36vtFQ8ewIhAKLD8fuh6G8GBmFB5PYnHBifaAz9nSZmTf80AHwE8VTV"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJivFrQACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp7qA/+PCNgXz88NA5wbfQ9rJR8/JJjLCj8yD5qOTruUTHYhUuEsBw8\r\nk/9Bj5EV6KtCvVggxZT1qE9KOLdJe5D8w9kqUk4eIlVOCZaPeaDBLSQpE5CX\r\nkpC/moCVrPAjA+9HwBco5tlrueDRoTUnjVj+X0c54zu7+JtOx2qg/9ZjPIiW\r\nxbG9IwMNwnET6ay+3qWmsTuIDjdhtveOFTjfPuN/Q9hzCkmr59BMQE1JyVDC\r\nO9fYNS1kLaAaFa1yVXem0J2nSygltTcyrjwjGsR8ICzW8zBJEnpBVxEiAXbE\r\nwv4LeZoQAwtpH4IKIvsPSbsLVSgrluYAGKHuwUhteBvG4H+fuub+tJWl2pTe\r\nkoQ4P8DJwhMybc3jIk1osKid7TWXAenxT3QcOt5fEP3RKbDOpgIybozfddHk\r\nivBUn5d3gM3bMW66WaJqzwcAq9AVi453M+/b6RQoHGW/gNreK+XgQ6qPgnZV\r\nUheQZJKaIesI62+Cq6LUJKb3nnvfIyZaQVno+rVoGgQXhn+4xUrznlu5zXXH\r\nfmyOWz9nLv9g7hUxn3CZIAcMlOnxwfBc44oBQ7Jtul0TqqE8Qgpp2oYka/+4\r\nROP0339Uxshritot626zgzmQdqHtIk1r/KG4JNUwoVhZXzD2NYQ/1IEa7xBl\r\nxDuRvRqbucWcl50hu6OsNuVuE6mvNu2POrI=\r\n=DrjP\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.18.0-alpha-mdx-v2.66_1656511184636_0.714625764325608"},"_hasShrinkwrap":false},"2.18.0-alpha-mdx-v2.68":{"name":"gatsby-plugin-image","version":"2.18.0-alpha-mdx-v2.68","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.18.0-alpha-mdx-v2.68+f8d42b10e5","camelcase":"^5.3.1","chokidar":"^3.5.2","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.18.0-alpha-mdx-v2.68+f8d42b10e5","gatsby-plugin-utils":"3.12.0-alpha-mdx-v2.68+f8d42b10e5","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"f8d42b10e529509c7a9135b0e5b099b1df2bf993","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.18.0-alpha-mdx-v2.68","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-fCsztrpqFkCGvuYuWxQbFeKrqTPASYTTInh3ZaParzh1UFxOG8QEZXDFBYhH/6km256eVjiqj79tjbP9QqKIWw==","shasum":"37c3844c9c4710396ab80f413fb99c6b332f7557","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.18.0-alpha-mdx-v2.68.tgz","fileCount":87,"unpackedSize":606229,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCU5Om0Y2feUxU/7XnVLCFWFuL2E80fqnF5CIkbUsEp0gIgFFEP/WmGOtzRlXS+nOnJl5hsPgqsmR0NVVh3ip5q0KU="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJivaPnACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoLoA//RQrPdOOLjInoZFmQF7Gk1+m/yMbJ7NHkltQOXlDS10OWwiRQ\r\nGmlZOgp07NoBSagj0TjzBrMVesOivM527dohGkeyzG1gYSqG7QZ6scPYB4M0\r\nIpqIBUcDWl/wHY9bYu4Wbx6/4UkS6wc5D+QQdwJ7MWSh9AjNdwfZqeOGMhZQ\r\n11zK5IT2wZUYCccRsp/eO+o1vt5Leu04yzEPI0P4cjZgc/b18mPSej+mI6Bk\r\nCD+aEJvwgQbPLNRcN+WqodGdxGiTrDopJlkF/yNfDI+SSOyfoUyDo7VwhPlK\r\nlp2hYBrEtbBdBa+/IechRwmqwFz2LDCefEy/Hv5vVsYOZ/1QOxBVtNMFyhdJ\r\nhBwgrrgx1A/bKlEKh0Iu46J2yt1ktjqPJWT+NudWeI3uCvynq/zJT3SVkMAv\r\n410OX8PgwJUbQAMvVRPK0JZqkvEQVAA9X0a9BTnnXGC7n5cZkXLvWy0AaqNw\r\ngNSEDNvEx7YdVvAJ7kbOz7fCdqP4tT+3KUKCImTewp1Goqvbus/8/2Pw3NLd\r\nYVDrSYLiQSOkc5Vf3LHl56IGdWWipwiwyWj2Am2g13ddyYtsezflP7okxcrN\r\nGEPM3YcIflowK/yY8arlErwEtwUOVqYNMviONXthYKuwaTkvITf48pCNvjnG\r\n6YdhmY8OS+k8FiTCB7AmqMz1Uj84oo1lOeU=\r\n=vJfe\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.18.0-alpha-mdx-v2.68_1656595431706_0.6867202052733312"},"_hasShrinkwrap":false},"2.19.0-next.0":{"name":"gatsby-plugin-image","version":"2.19.0-next.0","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.19.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.19.0-next.0","gatsby-plugin-utils":"^3.13.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"b535098fba656d6bc5fea22861c3d35e63ff71d9","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.19.0-next.0","_nodeVersion":"16.15.0","_npmVersion":"lerna/3.22.1/node@v16.15.0+x64 (linux)","dist":{"integrity":"sha512-vEqSVIavkl01Vg8D8ysJNrlaLvgIBExVLkvCD4wDKpBW8hos6wPWr7vdMcFj19AhfMEkLb6VQV2EMTh0pq0ctg==","shasum":"a926199a85b97e5e6b6a84b1ddf4e99ed3de9dfe","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.19.0-next.0.tgz","fileCount":87,"unpackedSize":601403,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGKDyf6qrqVavLqcP+e9VyzhC2xE0M1PPx+c9WzX9Y7LAiEAg5x+o9e83NWCGNPwpjo8cAieg9uDQqQoZjUNUiY5reA="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiveYNACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmodGBAAlsbnjqhYEOTmaUvo04bW2CEDdRZkT8ocbbtrqzBIBIFt/hRm\r\nWbteqAQGG4ARZRIzAqIbIPkrinPRJ/zt9CJ/38HgD6gVwczaR9JYErurWHMk\r\nLa/j0X/YEMGEbAZb2xlTZKwrPpjCKxYLgbjXNg5UiWrVskRcTxQR6++60DPt\r\nKRiyLOF7EeWkmqNRraZnRtRFpOt7KbHx/SaTO9hd+SlT+B9jtMTPmo3FKoe7\r\nmCdVdXTFdB8F8p/ztCItQ1jGhBRkYmmREp+5qM8+Z6bHGMobi8xiJ58KFgFK\r\n/zK5emp0IWj3EdV2TJHhAaXxDM/AXUH8+93M57OlRMB2Y2g8WbM4NUOxAWVD\r\nK7ixtSskiUPBAGQ7RKGXdYSjG2s663iHQpPcIJB0PrWCRKBFdX6pzaRdIkmB\r\ng0XOpoS3Nn04Q3dK0pIHYjlgiJU55D3zlMvoDiq4gPOK+R+jfMJuDtwQvkhZ\r\n3gBLF7pTDMFielQFz+iRub3gdcU1VJ6eDVV+hd2d7EoDvVdcfG+lU8F0Ny68\r\nbZajT9V1ppTcZRRSYweO1s2lS9v4x1bdFIvZ2uhTx/2oKxvTzBCqPEGO+tm/\r\n7AufBazz7ibkXo81iSck9uFVbFt2ZutS5o9fMbViRMyVxnjYGVEEMs+jSYR3\r\nh0A5E6QZ5DDdGb6GbAYuzt8+3YLSuUluVRs=\r\n=Z1KB\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"j0sh77","email":"jcjohnson77@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.19.0-next.0_1656612365179_0.47784005462961043"},"_hasShrinkwrap":false},"2.19.0-next.1":{"name":"gatsby-plugin-image","version":"2.19.0-next.1","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.19.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.19.0-next.0","gatsby-plugin-utils":"^3.13.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"fc1bf10a7d16e742c1c0653fbafb5ca3b63f11cd","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.19.0-next.1","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-TwnQeyj747egfWHhPxzXY+Ayv0IspJTq6upSNxYPmHkpZP6wjVzrVZCd6xvT5mLehSv2GvT5dl8iHHXWPbmW7g==","shasum":"c26e7d7ad67bff1243f13b6818376de29f483278","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.19.0-next.1.tgz","fileCount":87,"unpackedSize":601620,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIET00UlzZBWY79BCClddeijJpJqbJ++iOCVK/46BlUy8AiEAjG43NZPkTsqPNkwb2z8yjC050m0EwEDBA2scm4d+9gU="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJivs/fACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqjTQ//VytJDcqwtmmitZJhhM7dOHBu/IvaHukDh/Bg8YFEJPn4uRPS\r\nxvvKXm+ggsoZT6obU3T4aBjH9xAJtNrAN4DUmkIwupizYd+1jrAs0Is5B+Se\r\nilMZ0AV85aEd85yZXXRAncsTGHAkzbaBWi6uOJCi0/i+1e2LZPcEDSdjUqnr\r\nOSBCq/AEZMbOiRyxPiL0vvvbw3x2vDoKsscMhttPd6SQMAC4WeD9+v8RXnI6\r\n6qIbiX86o5Ig+oP9G8zzOO9wP7Q1GAjxjP3OiLfuYHCODPQ4GkOt7ndLzK9B\r\n+bbJb5GKEkqHAxwuGp0A6wasYQMN6whVjRFeNk3HYp31dPXPVTh15DWTZCLK\r\nyLDugjnB6yCawMiTTZmDwlQgttAeA3GyV9jBpRlhyHHp3RHf0qac/O1yYls2\r\nFgOxbGAWqVXyTkWIwcskuPM+KWnZQfqlyxXkJqqqvilu+pDWujPsJR+RNyr/\r\n7w+BQKA1cJ3MrXdIuBqq9B3hB5ttwk99yz8oJFtqGWbxiB0dK58060F0Ktbk\r\nlmytDwSJIRTqJccG5JHmR75GLyC+QiOgkzHimw3ilNuX+VRnukgv2hC5UMw2\r\nSMQlJq+BM0ahNiwOrTWsLOLx/Ui/p9lu3ugwa68ljrkBQk3ExMq5q8QTJqnk\r\nyiVHwmxEAvtpNEsxY6bpaqerknfeMkHg4OQ=\r\n=PHSu\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.19.0-next.1_1656672222789_0.08369370277728083"},"_hasShrinkwrap":false},"2.19.0-next.2":{"name":"gatsby-plugin-image","version":"2.19.0-next.2","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.19.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.19.0-next.1","gatsby-plugin-utils":"^3.13.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"bcfa33aeb22aceba4bd80772704a747626b164ad","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.19.0-next.2","_nodeVersion":"16.13.1","_npmVersion":"lerna/3.22.1/node@v16.13.1+x64 (win32)","dist":{"integrity":"sha512-k98jv/f6mWcD5hBBoqViKP5M941Y13EzB6IkHAyuCxXhHpD4uTUSODQ7gsU+b/Q24HT1UCneCqI6DaqZjCl1UA==","shasum":"f47b3d3c3d50bc45baee1a127485fe511510b5eb","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.19.0-next.2.tgz","fileCount":87,"unpackedSize":604363,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIC55GEBxA+1jTISvZEtsYRG/a8VUD/ZfQ8xhFYsa9+zQAiEAxw7Ufz0I685Oh7G9DgME5FRGAlLexJvWiRNm7FouGZA="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJixDkmACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr1vw/8CRnDxQQ4AA/BfI7qEggLtu8Y0J2AzK3gIoKjm6jBT/NEiyO/\r\nb99KR1kfx5xBphDBmVh23+Q+V2wx5mu5bNfXAEh0UzqGcmddvQYpNl8uWzEj\r\nddjhLl3ucRTPuAbMXfw+9nCKY6u5dlsa2LutR02xZI9Zii4NkNlppR2H0rc4\r\nGnzJ4XuCtwJyDOHkkrCai2btnhkHjkW/H79WQ+DYh6+4zX6fbkaQsgfqAMdv\r\nNM07hXs6ADQMZ9GtjXgVM7UbZUD8+uZ1dLrCpBx6yYc+wc8wHITT856f8IR8\r\nb5xlw7uhT6i+C5rVMCzLiC5v2VASbZ3gbTrWl7WhhSlx5aV/OBLYa/g3yBdU\r\n6lptiU3uPQJfIH1lvSSmXA3s1nOHQ/85kNdCn5U8qJNDeiErequi1JT6lT1+\r\nLp2Uk+qB1ld2TBzRul+5Jwc9KP6GUDih227EuxA+RwCH6/6hQ+sIsH+D3nls\r\nOYWNGzIg+wLsQUTfVCy98GmR1N0gN+a1HKZ5sv3gfNw84fDtnz4bF+a80ufe\r\nSlz/zyD3TKzp/+mQVDR3luqKvNL698l3T7carSqIwCBYBJbz5+YtN2ffqMes\r\nnsuTZap0WyZ46cmLPUwaU8gmYMI5om7w1mS4YTcHP72Q43j3gsLb0mE9OsTQ\r\nnbp8Ed3BR7R//GedOkJz2lONn3F5ZLx3Znw=\r\n=uXQ0\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"wardpeet","email":"ward@coding-tech.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.19.0-next.2_1657026854259_0.7953206833974096"},"_hasShrinkwrap":false},"2.18.0":{"name":"gatsby-plugin-image","version":"2.18.0","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.18.0","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.18.0","gatsby-plugin-utils":"^3.12.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"2046e0257758e4fb85b3d7b9ef7f328d400ea4a9","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.18.0","_nodeVersion":"16.15.0","_npmVersion":"lerna/3.22.1/node@v16.15.0+x64 (linux)","dist":{"integrity":"sha512-/WvMDUiZvofmxHzHeEPLNL605FU1AK5pLXKKS8aekRigbNbi+Gip2ZROFPJtj4oxyKDmtD+HaVCNf1q8SdhPEg==","shasum":"78e720f15b5b5a5620a6b1a0675cdf5d5232bd93","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.18.0.tgz","fileCount":87,"unpackedSize":601375,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCKluPMXjZ84Ew1k20H622M08Ii8hNhtB7hNbLw72SeXgIhALByyD17n8Jy23D+l+BWehi+zTPcd+Dy8Yu9jtUEGvoJ"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJixImiACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrAXw/8DiLLRUMuEqg2YqauP7t/cphRQ3xbXo8PJwXzaEhcxC5c/olr\r\nupKBXRGrBWcB99kIU27Vb/FtHhfy4x/hpyq9x0Ms2KGf46HA/PJHDNnr1R5z\r\ndKG92jqpKJ7IGNnjHTFYshpx1ABtIJArjdo6wecxN3vJ/fNLMYGIoWzKqY9z\r\nJB0C9UgezUXnyfd1CSaSa6BvqPUZ5EAS/PS0GLYKr8LgV5xVGf4Ztqpj2i2O\r\ne928fvdLAoj7BbVgi9RWy46MN0rZKW+gaOWUL170vWj8GxJJpqC7iC20k7q1\r\nhQLDLpUQ696vxP0WJqGSJbWXGFxbCr/39nveRCi99Msdnq3o9DqZH+PMvjlv\r\nv4qhZ4flnQ4GhWb5SVoY2pPrrmUsx1jxNgIs/FM5RQJSKohgzLN5kyW19GGf\r\nNEFzU02Z9+7kFz9TULPvuyob8wSR09IMtwlN3f5V5dTQPQZqVdcSdnQO5T43\r\n/j2WZSX94RSgXXzK6UdJodCsC1dOV2UHxY95YQveieiy1TOElo2UG+a16nYK\r\nYzhGFo5n9rFgQ79Tn9aHS+XTZEJ/Lo1XNCz3GFcAdl1sX7A3bdpL9Jor2BBJ\r\n1ovcI0jbMbSiMDFokhrn/J4o8ko1wiqUt/QahTaH6Jry0eCO7kG0wjXNS3sn\r\nFXXpGpP+M934VJhydTwaHwmg2GBJExqicyw=\r\n=TQrp\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"j0sh77","email":"jcjohnson77@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.18.0_1657047458677_0.4650582758214983"},"_hasShrinkwrap":false},"2.18.0-alpha-image-cdn-jobs-resolve.32":{"name":"gatsby-plugin-image","version":"2.18.0-alpha-image-cdn-jobs-resolve.32","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.18.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.18.0-next.1","gatsby-plugin-utils":"3.12.0-alpha-image-cdn-jobs-resolve.32+e2b5ce3f48","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"e2b5ce3f48bd16cafc7abc7ae7fbbcf4b22445b9","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.18.0-alpha-image-cdn-jobs-resolve.32","_nodeVersion":"14.18.2","_npmVersion":"lerna/3.22.1/node@v14.18.2+x64 (darwin)","dist":{"integrity":"sha512-IDv3xmA4mWybKH6ahdUoL9OFbenqwPmMokKcILpYuDbYbxAkpxRpK7tHHcewUIOfnIXYwm0rf5lJmZKK3vwSIg==","shasum":"2b6e18d14f0568c85e87cbb1eb01814cb3aa78f1","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.18.0-alpha-image-cdn-jobs-resolve.32.tgz","fileCount":87,"unpackedSize":601472,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD32Ft7AgQjw9XovSuNsbWGnYuibshIiAXqgMHXm1YwHwIhALPWmdYOs4rzkOzzNF+TjDYgb72fRrB4Vp/6R9JLTKqV"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJixg1KACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq2CxAAg9zhPnYbtFiGyt8UW7zI+WCJOdi0lfMUkHECmbw8kNkcuM2K\r\nZxYlek0U876hf/PSdMWi9ckuasxoAJl2YjFjGLcHKYH5XmXOrdpkjSPoV471\r\nRn2LuJgKEiY9PI2wWuBCuPi19JHtXkjoW9dOpUJxwqTkmE8CfdO6baMIgxvy\r\nDyYtbw3ECaD56kMXkjA8YJTHgXv+MEHemaj2pMPJq8dKwFX6tXttTG2fp/LR\r\nelwlHEbfBH8+8KV1ZOk4TmjupbonyN4mhY99J7i84GkEyN08HrCh3/rp8Nvv\r\nMOd+SZR7TNFoABwQaqzCfY6r8GcpI/fw72bHjPR3Se9V2l74dJsH0x9OIMpT\r\nTViDHr8ds2gyCZyo4iZ38smUMbV+wkDJQz/K0mq+kmanJ/lxVFHRHcihel/r\r\nFPb3GZgiIJHoxsrQXf+w7xG+MxbZc8JNoLgzONwMB/zlS/Bdmj6uI8N8kTHO\r\n6lTYqVKhq96ZJZjvx5lRr8wXvU6xhrDKLgT/w205yk1WJfYiAHbD6VneioSj\r\nzfUG70qJoiYpCJzOCL/cUNoZ25U5gV4VKFbJRLs7KaqwqrS95PxbfuTV4JEd\r\nJKaweiMyGI+VStQxiMRUZ8M0Ze45ISA1Mghw23OZfAn9oisKzhCAQxTnasgt\r\nbVaC3jxxBnJm5+AzRphTDyc8nUgzGb813rQ=\r\n=KtwC\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"tylerbarnes","email":"tyler@known.design"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.18.0-alpha-image-cdn-jobs-resolve.32_1657146697916_0.9083270532282637"},"_hasShrinkwrap":false},"2.18.0-mdxv4-rc.68":{"name":"gatsby-plugin-image","version":"2.18.0-mdxv4-rc.68","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.18.0-mdxv4-rc.68+6291deff90","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.18.0-mdxv4-rc.68+6291deff90","gatsby-plugin-utils":"3.12.0-mdxv4-rc.68+6291deff90","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"6291deff90df5d0321ee8e941e9c09de316f4827","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.18.0-mdxv4-rc.68","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-vcY3pXvwgDnKJWWRyQNkdy+vuVGwZ9hFeWwrdU5KBYRfAyF9ycGGX+cv/QbGmmSZkuLua8is9QqyGtce9uZgPw==","shasum":"51effe3af9f3796ac49150385f4d0d402d31b0e0","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.18.0-mdxv4-rc.68.tgz","fileCount":87,"unpackedSize":601761,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDhrWwfP1gzShK1f4lIM43gZdQUOBPXXopSy8FNG5xYwgIhAIf7H8dT4P2W+W7/9sLtT5uY16maSpizMBBW+I2o+Sv2"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJixtNLACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp0dBAAh+3HkStAENlyBTfDbT0kmCtX5uRW+sx7KjeYshJdH0OyrODm\r\n/chHrczU88W0SSwL5lTd9HkTm1/IW7ShXDzpME6rCWLYElLMXKKxlNVIN4A9\r\nCEJTF6x/IbYyBBi7gXKSfny94y3JK/dBW3HxV+dP07mabIMpSW4Na7wVuXrm\r\nsj8vI5QaKIg9Zoisq9ujh+eizDDN3Z+jW6aFZYXEfjYK9naA+ZunOAQeG7kP\r\n5E4q3X+0neh+TDmd9TKC/FuS8ihLmszyPUAsFM89+PzuDutOxMcj9GfYZn/2\r\nzTjYqf+uhjUzCic2j5qKUuLMN9RpyQlMQubCR2/zTP8Sj7Y1DP1EfdIAp+R0\r\ng7P6H9Va2ErV+4srIjltX8bRtYrMpm/7x/g5sdKFenCY/EtNBZWKhKAP9Ion\r\n2/Psl7J8rOxRykAPKAGClVhzLLklNEBAk0+Ha6HTxrML8rWXHBnH9vl2OJBF\r\nOn0/XVWUucc2ChhpIXY5q1I40jn8gbzKtUrAaj71PAURoCtxNnZXcg/MatpV\r\nkpXBt4rfq5iOyRt9Mn7J5ywUzxeDlIhwL7aOt5K+i3PuHVCii70FoWljqyj/\r\nKb+V9xDMIj1B1ZMV3JnVQQa1bElBpCp4eroFBzvyuCg9d40KWwbZB3XIlSGD\r\ncgjgwb5tsZjAhIYJFcpc3ELkE5DX3Cr4+oA=\r\n=sE8u\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"veryspry","email":"ehlinger.matt@gmail.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.18.0-mdxv4-rc.68_1657197387081_0.25231241815431593"},"_hasShrinkwrap":false},"2.18.1":{"name":"gatsby-plugin-image","version":"2.18.1","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.11","microbundle":"^0.13.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.18.1","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.18.1","gatsby-plugin-utils":"^3.12.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"c6aa79d485c32ed81f22ec056669e8cd1766dd62","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.18.1","_nodeVersion":"16.16.0","_npmVersion":"lerna/3.22.1/node@v16.16.0+x64 (linux)","dist":{"integrity":"sha512-PsNIWq5bVALRRshbKOL97tqZTT2r0iILlP+K26YHfd+54DOUPqjESGZ/x7rnv2WMBVFd+Xtkmrx6M1rW86g1Rw==","shasum":"4e3f525c8e138368527c7bf17f839e774522908f","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.18.1.tgz","fileCount":87,"unpackedSize":601375,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDeyIFAsJDV3/A/CZ8HxX/EriIcejhX7WGQA0h35gv7VwIhAJThkflBKrT7URtjYLClJlVL+gkeRufEfm0Pjwod/x2A"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJizaI4ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqXPQ//S2ism/fst8b6GyZkjOL9p4xBBN4i7G9EahObInrRpwc4xGRx\r\nuqxMR89tOfmRrocHjR6g8t342FkvxLDtYXQq5sKZktQ+DIfL85ZHEMA6UYcH\r\ncD4u5powtmtyhDyDO/EOyAf7hZbwXeONffmZi/5qrVwfy7kPMnHk+xFY6Rqz\r\nReOewVk5L4MB0uzw3JNJhyeqlZo4L2nSNrTt1XTuI8Hs8eva1C6ow0mh0nR3\r\nQswnFM0nwasHqerzmmVI6J0fjkgHS6pz2uD3icJMbdPMggLXo4TX2dStd/Cm\r\n9J6Y08/4/5mFLGac5v4EUsZrp7X63zSBNQRraFgBxpO4U4SKi0ob7BIKq4YE\r\nXFfqr1lp4Kc+vCAiuzpoyWkgPGPtZGCbkFO72F9C32apjvs8lQCDVTdSyaQq\r\nwNtPsCaGY1IRe8+aCF/3iawAHjKuvRtZz9e+FZEr/qj1BKczD2JiiURX8QOh\r\nhjNERGfk+4T++3J9BCgirEb5Ex98Gecd/N+it72dpBW6kfxctJrM4RnMIzGq\r\nJJDFhcByASJEzf9MNFnSuxJgBJQPjZiTaJ79HDrQ2PA55epXiqBx3nJXE3He\r\noG+RMa4nGwuRRnA+CcCP3Az7lFWdns65OS/NkFZIfXoVlrrtmo6wSlvW4NrN\r\nSe2tec50WmQ/DUCYspiXWadh7cjRxMFG+bg=\r\n=NKEJ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"j0sh77","email":"jcjohnson77@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.18.1_1657643576558_0.7327500873254811"},"_hasShrinkwrap":false},"2.17.0-alpha-gatsby-metadata.60":{"name":"gatsby-plugin-image","version":"2.17.0-alpha-gatsby-metadata.60","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.19.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.19.0-next.1","gatsby-plugin-utils":"3.13.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"4bfb485445ff3fb334cd6049590bd589afbfb761","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.17.0-alpha-gatsby-metadata.60","_nodeVersion":"16.13.1","_npmVersion":"lerna/3.22.1/node@v16.13.1+arm64 (darwin)","dist":{"integrity":"sha512-5Ywh1B5jrH7QHSFRoWqNCvoVTdwVWZOeqcoIJ/PIu5us4gpddEK7zBePsYCGry8LqSv/WxnnMRxj7nI58pc5Qg==","shasum":"20b93020b200f1070782f425c7ad19dc7128a6a6","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.17.0-alpha-gatsby-metadata.60.tgz","fileCount":87,"unpackedSize":601646,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDOUDS1a36eokw08fMwJrpGcf5th6fFPgfc6nOJEcfmCAIhAOU4fhnjMKnZ7mQmQAx3N2I2G/X9WNI2prKEDA6z3nLw"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiznhJACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpLMg//WjYrjO+FhvseeMLeUJVVDvzg0iU6AAdc2J7SLVIyvJHD5Vez\r\nXdnOWT527jvAbPM4Ojhhg3BZDjhA2m//h5ry2IO2Ro2J9MzON9T0Gcj8D4uo\r\nuhrHp6GnyZ6sHwu0bRM05eSdYSkmv7JwhxxG1CExynv/yE4VWvf+MinA8+Qj\r\ndA9HLbN3uHllrAxLTVdK2nGT+0sI/wg4Tm68p+ec0hK/20C2LcKKMCCX96yd\r\nl92t454XELol36GMGL6rHNncuI6VDpLo4iZoJmyaWKmo9qiWvXiwi1aMAqZ1\r\nxASoMD47JR7ln49orZMO2UuTR5R64HTgzycY3ynr5NiVwDxRGWS54mrepV0x\r\nMbXFpaYsCJqqOB9+1IRlXtr7s4f0RIRr8fgcpLnjlb9LCKLB9pI6yr5NVa1z\r\nX7169kSdsOJlJ+sqlcLpUZvVN3IZHKPL87EvmzSG17rc98pQgS/cWbYaSAzN\r\nrSIpksXJdG9kIcyKz3t3WK8LPKLgHPdraaalkzQ7cbZ0HfCbpv5JwUASzryT\r\niAcB7+lRUXVivm5MZr4aXLw/CUJws3gKl0mM81OJd+wsEDJ+mOOIMXiXQM2k\r\nZVs8d9q0SLDmXIKYGi3Dg+BmOGcTVLsnsEbVJ15j4PihQxZLZWL6ckRoK79g\r\nIG+ZpKaQnO22x3kyG2fA4zfetFVi4sgp+oI=\r\n=vPx0\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.17.0-alpha-gatsby-metadata.60_1657698377608_0.5931435056163838"},"_hasShrinkwrap":false},"2.17.0-alpha-gatsby-metadata.78":{"name":"gatsby-plugin-image","version":"2.17.0-alpha-gatsby-metadata.78","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.19.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.19.0-next.1","gatsby-plugin-utils":"3.13.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"b649b2d26a3d69375b5f6effb16d919a06908b9b","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.17.0-alpha-gatsby-metadata.78","_nodeVersion":"16.13.1","_npmVersion":"lerna/3.22.1/node@v16.13.1+arm64 (darwin)","dist":{"integrity":"sha512-7pYjJMd5VgwJ1jUM0c/YwL6hH63BXe2KGsGw72bMG0mZr17XsH8q4BGf1+jY/cklMZRmydfqccp34xgqmjnzpA==","shasum":"952a425620b26907ffabd412832e2d09793e55b7","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.17.0-alpha-gatsby-metadata.78.tgz","fileCount":87,"unpackedSize":601646,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDbiwgqcIGNXhOycpV+Pv2jCv+dNfiNBKUsTgBRregr2AIgVWnx/4fWnJm3KzAfwMIOJlQiKFBXyXGjUXosLG3RRkM="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiz9XaACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp9GA/+NROj4MZqw7ck7P5faFPjHDEDFq3M/Y7pnffcYvhseiLFfLx7\r\nKg7gIeL8PbFDVTHIaIcxxOkD52/pKCvD0S16K/AEASph845yYf3JKqu7uKJT\r\nbV4f6dqqRjgfqsQLS6l+cRDYamN3owi/EfD6CZBubrzPSogpLqddpgn9ugQY\r\nDHGE4C+UVLt1FS2ZrCn+yAYwO/9ho6yIAm1bKXP/Sdw8csPJ6Xg5wwf997TQ\r\nNmVP3kGqYHHQrDP0wboXkMBzsSy/KI9VS2e3MIHd15v+xWTbJuCgQK8MJdWh\r\nwV4b3k0Ph8JlRw86SiWBkFRyx1hhGZGJOr8oygamQOFamvEvWE3vaO5GPnDS\r\nDAmjg1iLRi29Ss7KUexKubUcGXWB5mYMpkblgZTeAn9BnJp7JmdqShdP/2az\r\nmAqQsn6xvUZ41O6ESGFueYzYHK3UftfjiCitvX5LOatfIMdKOANMdGHurZGJ\r\nnE8VzkWvRG/r3ozIeM7/JXgIMlRPf3qnrslWQSpB9qDTEl4TVu87tZiLr1pT\r\nwmYWovIVMs8I4DI851dwghX9vcOMroMbbLw2xY37ZQubbKAcka+Kt7OnZd0l\r\nHSrxiYRQacscoC6HVzCEhc+JHbxisG89AzjV6DOIfxVTCXY0sFUQ7zuT+IMC\r\n4Y+A0+Lgg8kc5hdAM4oBBP4c3kjrE+b3spM=\r\n=5nwE\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.17.0-alpha-gatsby-metadata.78_1657787866319_0.7774829138897836"},"_hasShrinkwrap":false},"2.17.0-alpha-gatsby-metadata.81":{"name":"gatsby-plugin-image","version":"2.17.0-alpha-gatsby-metadata.81","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.19.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.19.0-next.1","gatsby-plugin-utils":"3.13.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"9df3cc2e381a207b927f96741f73f67cc35a58ec","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.17.0-alpha-gatsby-metadata.81","_nodeVersion":"16.13.1","_npmVersion":"lerna/3.22.1/node@v16.13.1+arm64 (darwin)","dist":{"integrity":"sha512-gm2ahFvfROD5+C8+yUegYn3zQUGj5rmT5mlwOtdrj/yyl6bjnxXNnm6eRLMKkmsmaZm3/fYst7Ix7B4+nURJMw==","shasum":"a4fd846e922d7eedb4344ab83544dddc9f37b776","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.17.0-alpha-gatsby-metadata.81.tgz","fileCount":87,"unpackedSize":600760,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD5vaucukMAZ2ng/lBCeEUlO/F4+qqOl4B6JBpMIOsdIAIhAJeBDxp5oxvt2dUjjGSAMlU/EoMuuVTqKS96n/tGnZWU"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiz+TJACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoYyBAAnzz217C5jCy3y2JpngVZW8wC/2UChevgyfKkHybX4kbWhhl9\r\n0K4Yoiml1dQ2o6PW+bbg+WX2ZvxApXT4PilEiB4lM4wbBsj1q50vFWDHPFIk\r\n1iaNdiKJP7mausgcnVkGwn+Dpjy+SQZ+sd99MpS0Q3kVsiNv1CadYw/GpVoK\r\nKi5KzYO840tNEWfRDX/VYLUNy4y8gUIxjcw3OSS6+2oNHTGoT6gN0rhh5500\r\nltYcE6zQEWRoO0SG8M08BhQrBgXPEe2n8pSgFXBr5wGUIvfA8V5IrnjfE93Q\r\n1KePBrxIq+M+Qe/IZhXjTzbK1zjyuhbSUA+P+IgbrZl63hgenkrjZ4JJGduH\r\n9aq/UJeykH7o5PpDIBcBjZKWlnGgOA2JFCT4lcRiY7xKyaHjPp+cP624Kh6P\r\n+0tbP6FYbwilhHFJRIFDh/umvRUKHLVgBmV5z2S2/h47f6IjTEJzfGMOARBz\r\nQl1UxE0UuhVMjYhYBPaHjZjdFgCABjxQSbkhWTu5Hpdzb6JBkemt9bQXmOL/\r\nolt7hfmt4UoWkN5uZead8xdE525k23q0hg2YYP3VxfTo+aYq4fcUI17a6S+s\r\njPQv/0UlDI2mYumRgPbkQv2ksLHCj04m0YK5HEhR639PvQC7UN4OMAeFH+6h\r\nvPtiUIIsYgQmRBeavh3zgkWDytTy3nBn/hA=\r\n=8jlX\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.17.0-alpha-gatsby-metadata.81_1657791689245_0.44391619083494516"},"_hasShrinkwrap":false},"2.20.0-next.0":{"name":"gatsby-plugin-image","version":"2.20.0-next.0","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.20.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.20.0-next.0","gatsby-plugin-utils":"^3.14.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"277bca67c210958f8cf1f7612a489b5f6f0886a5","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.20.0-next.0","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-7sOLjAtoxuCwsTLTW6v0iZh1kk7tacIw693lv/rX1kcpBS/XRMXQHgAxa4UT7iYs2qacXAc+JUwiKiZQuC6vLQ==","shasum":"bdf36f785f92213afea7d0cca4eb167b587c588b","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.20.0-next.0.tgz","fileCount":87,"unpackedSize":601620,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDLD32W16SCaXVlkwZseMvhxQatsYu6SI/bmKqCWt2z5gIhAPORG3YR2F1ERT1lE5f3HD2UmoCWBIJZ3kS0udiQlxkV"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi0BzAACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqR+w/9Gbk2SG3GOPMGjYSonJmPusE1MJm0suvy4ooKgt0jtlzP2Gh4\r\n5Ex/9QxJDqe0t4LZQ4QRsBaUxHA7IrJncu1OLYxbrX/TV/Ts3Q5MlqDJWwhh\r\n8iApIiUBMtqXiUsusaFDIEiARCLsEmBUAxPSVMaS4qVe+0xQhC8T1JLl9drM\r\nyZZpNh5nqU1wocjK3Ib943goG0REWDGNCE0d0om5sDtqNs5TcUj7yLtmKkcS\r\nGBS3+47yyXQ15+AO+g2JYwqmn6yPWFUyc7fWJCpoHCF3/LSGUxRNXtMOj2En\r\nyNIbnNBOlyTyODAgaFxREJO+nOC6cR9J+WrhzXdn3jkd63vpmkNFvvZcYUpF\r\nEwSSBHPlZb8x6TexlNV7YqUWkf1+/PQWtXbgxmcFE84Wwy+ftRw+tkF0Y8TB\r\nEr5nGSRUFOIto7ZEasYsFBAhLgUpToDJKUpP6Jl4DFHmzKsY6gAEJ47wqDul\r\nODz7BC8jVBsGpYJ3eg9kj8JjuDcD0f/cy7Gc5zOfW53Z4nalMJwU1oldxh9y\r\n4KZ3Df74ettJkimjLo63Iv5Uqc+pVJC+LN08hXUuxurw/KKbr7aedhpL4Au8\r\nbFT4GSGdtt8m8cE5hHAuFaXSiJvKrD2Nfj0U6U0GxMLRtmwsjT/IsXAVAyl7\r\nFhBi29Q1IrX805JPj0XXV4fLIXqhoqaonxY=\r\n=fkv4\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.20.0-next.0_1657806016717_0.6424122080645605"},"_hasShrinkwrap":false},"2.19.0":{"name":"gatsby-plugin-image","version":"2.19.0","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.19.0","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.19.0","gatsby-plugin-utils":"^3.13.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"53bedf19e998aee23db6a7b85205470ee6e3cc0a","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.19.0","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-Eu2LY1nfkTdr5hJip5TcZNUqzWQps2Zq4KnPJmgmxpGOYIbrgu8B2kEKQM5hKoe5flu4Xu5gj+CObEMlBj5K1w==","shasum":"da65ae7d82c64b2adc6c146fc8cda1a097f6f417","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.19.0.tgz","fileCount":87,"unpackedSize":601592,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCsxaPrAyuXXxz1O1rO4rRCsMg53XLKZz70iM8HjnlX9AIgN/RErsVqheuO/kzDaU+b1tC9WBTD73gDVMHaoZUOcOk="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi1mGKACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoW6A/9EqULO0xeGTXDoDpuMHCQlG6DJkU4aKAAjvUIf3rHMBITcdXI\r\nliZzu8Lfe6urNYAolq1KrrxwmJR1hpC80waDVIX7sY+ePXrHhl4vj0EbJxxD\r\n2yf7dGaPJxgKdfb8umQYI+Vo75dsTLQzmXZh2ATjfHALiei9LbM4jdsPuHzg\r\nNlITdXwr5jj7TBvmtY/07yfuiayrIf8KwGCnPC+D4JZgNiCmXB0MzEmoleo9\r\natktGaVuQxEn0aCC1XCNMl+BHDIRuLdtorLm5tBF2Cd5+l1sR8Cvy+ay5q3M\r\n0/Svv+nDFXEneXd3rseNyuJYbwsb+VGBwLc1ca1qg8eR9hc/JIB7bD2sPOL/\r\n+AAWNOXrJmC3KHBZwtRlHI7UPzu901U5RPZKlocwqsNIvTnff7mzipL/IHbN\r\nrQWWEkVvNGr1Fwn75JakUYE6/lCXxTk4hWR2GQ82zELEQeKOpbUBRomleyCj\r\n7kUdtzS/5Qu57nqYkYyDVq0PGTrSHnRDjXkwOEMhfPRqak2fDwwXhzgGAQmG\r\nBTSflJyB3Dns5SYmiN3PI8YmSKBKTPeInp6oO0nTnNJqK5/G85Y0AHHGwc/b\r\nFrxu0uMGindPsOpG5KdNWpUGMHz1z/WxhBP125vDwrQkfK+M26M/qtqY64ai\r\nCj5uCI3LxrZJEqH8Hp5InrBudBqchJeSTnI=\r\n=kKov\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.19.0_1658216842438_0.9083090166758985"},"_hasShrinkwrap":false},"2.18.0-alpha-drupal-self-reference.18":{"name":"gatsby-plugin-image","version":"2.18.0-alpha-drupal-self-reference.18","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.18.0-alpha-drupal-self-reference.18+7e41ad4fb8","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.18.0-alpha-drupal-self-reference.18+7e41ad4fb8","gatsby-plugin-utils":"3.12.0-alpha-drupal-self-reference.18+7e41ad4fb8","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"7e41ad4fb8b605e6530af358f0a3eef082682f90","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.18.0-alpha-drupal-self-reference.18","_nodeVersion":"14.18.2","_npmVersion":"lerna/3.22.1/node@v14.18.2+x64 (darwin)","dist":{"integrity":"sha512-Z4xjuqUOosf3iYFueh0S0eZdjdTtFQxcU8gUqLW8XTGdf/8Ae7JKb5tVLUbLCk2rtNTMCqom0D5XHm4sqqLXtA==","shasum":"f4f649b45ddc6f6ca9524100eef3bfa711bcea89","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.18.0-alpha-drupal-self-reference.18.tgz","fileCount":87,"unpackedSize":602241,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDABunozhDb2a0OGWNyxqEIXIg7NzsaiR7/WzY8OiZqWAiBrO146R1IaLFbgRK2r62DgFaYVj/L49PI9tqmoc17j7w=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi1wDrACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqE4RAAmUoAH8z4PqPNILEHDTn9OoFMuBolVixaceKVMQNwmA63i5qi\r\nwGOZIOonNheMsQ3j+7VplXJlY+QhY4WVOyNVyEMDbkVMhbThd9Nxfjtbqq92\r\n6JcJKMTHWd1VpZR6u1zULgyfW04enASI3duiOYviWaLPGavjheysfwrecHuf\r\nFrGPr7KPvi1NmVBZHBRPv5lV4QcD6FvnRnn/sxuJDPiJHipDl+2r5pv3464J\r\ncLnJdsLHDnaqKYDUa2TvjDMDMyn+7D0lK0UMZOj6FhagsUUugjeQW9cHuB8N\r\n1tIBpNajdqDElIOzCWMQi6fa8SYx2IG/Nsu93FNcyw1w2Vs346qLejzLTh7J\r\nXsIiZrmVuTr9UwRbmI45TPfNmZCb8ePRX0Jjs4RV3rhFnQDu8XNzDqmvuYsn\r\nVmyW2nwCtIhwraKrXzvQxs7UiY6kdWcCjX2aIyXgiWSIoEVLUkKs1yjPp4u+\r\niSoJJUeZYBXrtdgYzP83PQqhkTAJYmkI3xg1Bux4aEoGGhqX2unrqi8Zm/dU\r\noJmPxltbXq+bYYke/wCiPlf7OibCxnS8cOi/18rDRZ0GqPccKIU3it6BannL\r\nFvuqzvBAryYNWKXdnHFubcPoHEO3+PURg6rfYWaLy8Ku11notuIoiJ72VqjY\r\n85pm8CTYfrGykDrDx0xxr7Q87fqmV4i/DyI=\r\n=d1E7\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"tylerbarnes","email":"tyler@known.design"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.18.0-alpha-drupal-self-reference.18_1658257642785_0.2994730614915766"},"_hasShrinkwrap":false},"2.20.0-next.1":{"name":"gatsby-plugin-image","version":"2.20.0-next.1","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.20.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.20.0-next.0","gatsby-plugin-utils":"^3.14.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"fa06f1c47e665f8fa67bcc9b4430dd85405419ad","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.20.0-next.1","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-6Y5i2+4MUd06W4IUT3kMkASjQiMITw05suTqxdjtioDK4RP80MtnWStz6wB/zS2T7dpcmksLjo3EEGrmyXwAnw==","shasum":"62c7e4042c995493e6a42f7606ac1ae453451f6b","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.20.0-next.1.tgz","fileCount":87,"unpackedSize":603917,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIG5PTmAze2WbpcENOM65+IO4U9kO1LqmFy2rAhLK8/ebAiEA62aN72HU65E/gIT4T3nsT1YNfJv5w4EVL+AoYAZGths="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi2ki8ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr4gQ/+OipfGdxXHNPGgepaKjjbhy1J7ztlNTmz/EzqT418u9LzOPeL\r\nx4GTvxcJVusMT0/udQUyHDV1xvVPArklFI6vtxcnZN3X4PUq+dKnxP/146bn\r\naU5/7ouKXGTpVi5P9hQptMF3rqjl7v0idf66Kh/yFynWgOKRywI8xOa9oxHJ\r\n7p2OcPkN2CZOJGEU985es2fekkpAL78JBUEbKnCg2pBsO7+kwGioO5OamA4Q\r\noMcwvigzDMIytW9hlbkxQdB6XcIMpKKlokcnLCmEmo+yVgEoo6X6UxWwotah\r\nkO/M+h9npCx1MjzalxbpWQkZ9DKi3uD5BTcrHM4oD8nDF55OgyFT6TcIM5P4\r\ned04n0i80/RBPWnfN8fQgXzdgUB39m3vaCn9bD3by7rW2UCwWZJ6gd6Cozq2\r\nduQQLZ9jZdsSlF4cMi1y9Q5HF6mg2sHKoZzTERDRua4PQhqoHhjVwxiC81tp\r\nt8FUBF2MEBYNEMar5/tZvSW6kFpc0dX5LREpDdWYJTzlQttEKHQJzM0/5hMC\r\ntpdk6Wwqeyit8IHB43C9uqdFuRRF+AVYdWHyTFnOsZemAuRSyM1ulU5PS7JV\r\nrvftq+h0yJZvh4t4AVAUT1EmtYdgcJ6LFWiDSLoQZgBRkE9vBTorE6neMq95\r\nI+LmG1k4v0MSeqNnM23WJKOMrx/27ZR4Clc=\r\n=yUop\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.20.0-next.1_1658472636043_0.8408503295687144"},"_hasShrinkwrap":false},"2.20.0-next.2":{"name":"gatsby-plugin-image","version":"2.20.0-next.2","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.20.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.20.0-next.0","gatsby-plugin-utils":"^3.14.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"82172de0a4214d95c7b5147084e65a4c7a5d669e","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.20.0-next.2","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-HqF4ueVI1NGDr+NNNYnTEUtsRAGNWHrcLxc6YiXup/qUZfR7FS9QqnK4MsXmssUjW3iUBxVdAUg46N1OIQoEaQ==","shasum":"90267ec436031195b305ca0576abc43f4bb87f0b","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.20.0-next.2.tgz","fileCount":87,"unpackedSize":603917,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCg+WIld++Vel9wbF4DhpJKojH+jieRZ0HC5R5JQqgjrAIgEno9rjbDRrzjd5RkCebUUdBvwl+5F3JnDjKC3fvMe7I="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi3mCOACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr+JxAAg8/etT92G6h8XsqUqmyxRI3WF+Oaep8oDnQ4vzYIQ7kir6tP\r\nKFSiZbjUcpefUTmTmQO/djvrnwGAUoT/qBHcSgbcTuugHdvbZNzHYPKDAtId\r\nUtMoc/tztJnLX0g9N+6H/I5tg2uu9naZNYQH9O0Ca+UP/k2TZwTlQuQIYStJ\r\nxLgHQHB5321VUNqNxFoXkCmUc4WbMDjEKmPAd6Cssip/IiC4+UbNPb9KMy2s\r\nnjDt7HIn4aguRWZzFChX4fXwkOloe1C2TBwwr40oBAC7+LCO6xR7E5fP/tRK\r\nUC3j78tqOVFBaMnU3EU5OEiG7nJse4Z42GwwWdsYsNjy+JsKJum2R5u9Lrm6\r\nbrj0H5MXZahH3ULxSPKeps6875nZnG0O9VzlfeeatcbcrqPQqo8vgI97bXC9\r\n3BUa/Ab70Y2hDW7jFqtZQcDWOEjObrDL2eZuOqBcBR2ckyVE5cGl/5OfEuE3\r\nbJxlq2GgTq8Ej72T4xg62T5m/N+MfwoOR8IbLUera/KlgAu7Z6MX2KYHJwBp\r\nS4WVqECjbKYV+Sr+4opsRXp96TB3dnb19+Zf7f5tD5xIK1xTl1Tkw/X/GG8G\r\nv27MECh54u4+G8keUjBdHqaszk/kAOF6cBsRzi8OyeaW+78L4IhJ3yItIKom\r\nrZPYdUYVl+mxkJNkYG+vmt6fI9sVE23k3SU=\r\n=rYR9\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.20.0-next.2_1658740878508_0.7461725530032917"},"_hasShrinkwrap":false},"2.18.0-mdxv4-rc.76":{"name":"gatsby-plugin-image","version":"2.18.0-mdxv4-rc.76","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.18.0-mdxv4-rc.76+253f3919e5","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.18.0-mdxv4-rc.76+253f3919e5","gatsby-plugin-utils":"3.12.0-mdxv4-rc.76+253f3919e5","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"253f3919e5767b524c351b99de0ac42ac8b854af","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.18.0-mdxv4-rc.76","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-zg4/GCNIwuRnIZgGrwCXnsUdKkHeH2jMR5yrsgFVU+5UtADcq672QEOt86uYc9ZqTURMjTc+5ARWgIvxMUpXNg==","shasum":"2dce2025bd6753459fcaf7074a0717d8cfdb3e1f","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.18.0-mdxv4-rc.76.tgz","fileCount":87,"unpackedSize":604058,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCXV3sjN2/4V58ustLc7d0xWL++GHtWr+PEm3S9cRYXQQIhAKFgZi4OmDONADyh7srzGd7FNF2uK6CoVA6n3vKUPgCP"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi3qBdACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrwmQ//TSzsvKpWdejsSHNPk9bVgLp07DNXC3F+WfBxW+YGs3roFqV1\r\nc+p2FMSy40gTXphf04u88jAwKEEhhbnH7f8ksfUUVzkOFdK47w2kxKiDNL47\r\nrwM/p+088PBJyorfrlWqrtpgznBRY7FUJbIjFHEDGSRolR+6ptQldbPwspqP\r\nMYytNonjI8Sa27gYvNTHR7Zo9NDABPoOovJ7+UpJM6NeQ4cekp6wgRdksuHR\r\nQ3YgtYm1WXwJ8U0y5Uk0vKnMoSBde+ml5+3jsMWNYSyaN7KrDzv8MUG4gFtj\r\n4/Bo5f/n9XIYHSVdxJC0w3/2VWyy/p0PW1qbKphHZ0mW8zggSmZnURq84atw\r\nrWgxFSRpUDUaPTlqDMIRNo/SPYZRgNOh5V2K4W1bS/KJYTRZvY8aqvi5yreI\r\n1Z42lsp2YXKxA8g0CN8xxLANSqTjInkT1Gq2JcY65+meLLb1KMzynTsG6tqW\r\nsQ/mQUhv8mvDjxoaS/YzcuoqJdPe3miIrcxoKac+dvV7rnnOV2pLfps72dlw\r\nju+vbpfy2ZAdU7LcBIV/RUIr3P3M3WAwiovWYVtynpu0NV31Yqp83rvZGnFe\r\nCt/Z7R84f0TY2UY0l5zPyCWLYahSumZn/ua43yqIUDh+G54eh3OZjyu7sGnu\r\nYWz4GrSIApX6FQ+1vGv9gg3XbDdc7+6LHoA=\r\n=/3Yj\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.18.0-mdxv4-rc.76_1658757213459_0.7324868786305814"},"_hasShrinkwrap":false},"2.20.0-mdxv4-rc.60":{"name":"gatsby-plugin-image","version":"2.20.0-mdxv4-rc.60","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.20.0-mdxv4-rc.109+253f3919e5","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.20.0-mdxv4-rc.109+253f3919e5","gatsby-plugin-utils":"3.14.0-mdxv4-rc.60+253f3919e5","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"253f3919e5767b524c351b99de0ac42ac8b854af","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.20.0-mdxv4-rc.60","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-AJljzMOK+G+Khm9nWG49JmThCRiuT+Dnu0QHAhRnVMbXk50GzRyn+r62VvjVreUKXe5Ky4EICWISWkmebdTGfQ==","shasum":"8e533a61cbc4c0c5b0faefb8aa314d6ac2317833","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.20.0-mdxv4-rc.60.tgz","fileCount":87,"unpackedSize":604060,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFzYL5/a68D/jWV6+nhjT3RskzOgLu8vFr3mJxmtXIxRAiAVrn5TEe19k2JawzfP5ZZFHXn6s7kmE42U8vGSEWfS5w=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi39wpACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrcAQ/+JOUpXiYz8N/A/+gnC2n9qcXRK2uPQbZ1pW+hthwNfBF3sSaj\r\nLA/2u24VHCKW8gXw3NhDk6AWjjoaZK7irmqrua+LCj0lyHCIHa+XxTG/m5U6\r\nB8H1dE7H8NMA+XpKwoAdhXrhEGys2ZKlxBBfl1OVmRWqjzPilOJfU/STYoKo\r\ncxF+FvlEVE1G3HJ9IZWINaWhYynYtpZiRlnZT9WhOS5Wf6VH17DXGvgQZUV8\r\n3+y7owMGqOyl+ziXUgu80FDIiMpEYTUxy705+Fn+wkPVfpbY7cK4PjdVkpCD\r\nai/7mbQSjbrhglYxEizpx5caV1Ttpx4xItRxd4aOjqw0nI1zgQ9ZnutrPjel\r\nwEiXicbhkxYTK8UNOYVTZATnsUb4viCAeyP2RaHmioyJ9H4Qn1aojCCvmz4B\r\nfun0xvywjoKJiqz8rJOXGljT1rKVMoVwHmIwe7j9Dqbevk7Uv2yGptz4+UUO\r\nsU/1ThmmKy+Ez2JvAPjDHylD7B5neKZOE9EkAJi3AWLIaR9AHzckoKAD4W6H\r\nhcPPinyi8a17Zu9iDu0hub61HdRSYeDexYRWZmVsmqx39lEVGraR8dbIJFXV\r\nhZ5EpqRadyIvGw7NtQ4e9vNzdxEHlwMafMutHtr4LCU/ekhnLCR+1R4ulAIX\r\nUTrkFA/TDaSG9Yis4CiMZRWHAKoEcPeNneI=\r\n=W41o\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.20.0-mdxv4-rc.60_1658838057325_0.3803460934853289"},"_hasShrinkwrap":false},"2.20.0-next.3":{"name":"gatsby-plugin-image","version":"2.20.0-next.3","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.20.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.20.0-next.0","gatsby-plugin-utils":"^3.14.0-next.2","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"5a5f5b901f0611e37cf527f95109bd1f4eaef58d","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.20.0-next.3","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-nr13z0JZE0Ql2y3mXajkr1sG0tmC6ugc6u+uhjupOZE1bJyy0iycrW24Qmhc182GjNHnEP5jJnOLb5TyUMUQCQ==","shasum":"93e22ccaab7c506d1199469b3517766270fc47d5","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.20.0-next.3.tgz","fileCount":87,"unpackedSize":603917,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEM/da7sSX38btImq0pINjUPdRpMZucmSY3U5f+t8wdfAiEA+u+50Faa8vPkfU0ap9sHkm26UFEmWO8DK4gNKEqno48="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi4PrMACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp2wg//VX/25aLq9spMdXku8gL24qSTQfFTLsciqVwcn2MPrOi4/3zM\r\nV12sf5RgXQXQrugcJSex6BGmjlsiM7BpcOrLna4f0NY6/9LQ6D8EJBRVi1aU\r\nge7xjaNtGs9LMKnvOTQpoa3d4T3pN9oPSuyGdsynP4EietCsBwMV6PwYt5bl\r\nbdRfj9dQa8OCxNzIQ5O9m3G/4AlHnKn4axb48GgE8F2XdebXiAOIwH9sIM3x\r\nu1ZY5oI8FlSpXbw5ywTO6HmrN7sLKNWw/2UsyPvASH6umVTfazYKgJKHeayt\r\nEWTm+MfdhcsH6ZwKF3euY9LY749K1VJGRNDONThMC8joeNLdoTye1O1aPHza\r\nIN1GKA9sJbtJ6viLWQpO93NiQK2M7iNCnRhuyAncuce6AWJy5+blJ5DvNaIu\r\noJW0ERS28faqA4rZANCi/brC/D2RDsZmBei6XDU11rdRhxW1kg8z7NjqwetR\r\nJlNQH/VqBIzIESmCtnGNPW72cngd+YRl5a3v0/2r6EjmD72fcqKGfIphSEE9\r\ncrAkjClLDxwCsI+CUIWoCxTgq7udnUTIMaJQe6KC4khQMM4GHNdwZs6E0Bgw\r\nQhY4DcxqJLOJJzC1qQEUcjJl2XYZdbJ3l/WN1ILWziUbVa40SpZiIEfM61ue\r\nFsbbwIaMRz2j/7pwyfwOZPWGx4+Tdy7SUwE=\r\n=YlD0\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.20.0-next.3_1658911436446_0.45697006169076104"},"_hasShrinkwrap":false},"2.20.0-mdxv4-rc.65":{"name":"gatsby-plugin-image","version":"2.20.0-mdxv4-rc.65","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.2"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"4.20.0-mdxv4-rc.65+91ed769ab0","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"3.20.0-mdxv4-rc.124+91ed769ab0","gatsby-plugin-utils":"3.14.0-mdxv4-rc.65+91ed769ab0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"91ed769ab0cc48b3649da1a48cba53f8880a006f","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.20.0-mdxv4-rc.65","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-oevkEuzDWua90ubjQHo1+Lhz2q/sbgkNAvXWRNFDldoW6CiicQ5ddM4ZINST6M+enJLvAIvry/hgBFEkTqfWzA==","shasum":"4b4d7ffe14faa6186b588e024efe1526aabf5325","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.20.0-mdxv4-rc.65.tgz","fileCount":87,"unpackedSize":604059,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDb4WDl1mMdzbCBEgZzMPPWGCQHnv5ZbeHXUu9PwRDaoAIgZfkHj6225Lf2eQbR7PTSTChuUzvD0nqtdFh4aEu/S3E="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi4PzBACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpuUhAAmgWGc7sKJ0f3p8Ih+rQJw9KD/CXy4/R7SB5YiXxnuTQFw2Ju\r\n3noYEBjbuJ3ygVIXVjHflCthiHmQwTRWaQh4jCiRFa5+X1910ISnMdQZ90E+\r\n3ijjIA/HP/lNXNEyyjXv0Dri6IvgGxNfilxzda2QQ1g9YbycsbbGkc/otZYV\r\nORegMcmsH5GWzeqmVjHF/3kB+Vta65t/y5nS63Pap4U6cQKtc5bM9ker0T0s\r\nNN63edMR6GtD3jEhFvHMhlUWvTuh7vd0m0gs9aLDK3X2AhOU9ojOnc5KO+ZM\r\neG6vAqfuGvHiXMlp2SPjbVmel62rOW9r5uTT0fcZLb2uQmKCf2QVvcflAsPf\r\nudIaLUrOLeJUFT0QQwa10nmIPEdDMkq1O89CIwmkBOvEDTnUyt1idM/X+1ge\r\nLYEIrrXzLglrcAi1W8rN3/McVu7GEH4hhD+Z1ub1G2xqSG2k3v2Ck+FQqBoz\r\n738wfnzOxBXxewjCe3A5C//LN3Nnb0EPh4168E1eOClzvDmmdNfE2lHz4vww\r\nikhMUEq3xebY1StfKsUcHGH9kL48pCtrjBWJuUd2cLc8RPY43JkVNxO/MdAY\r\nfmtsxOUfkb873bPVvEy/cXieAcXF0FS26XxiQwZoT3DTvb9ry+ppMZislVTP\r\nsIOm+UF5UxB5nuvSYuH/QF3B9UKWGWzKRZA=\r\n=jFFo\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.20.0-mdxv4-rc.65_1658911936958_0.805051485622595"},"_hasShrinkwrap":false},"2.21.0-next.0":{"name":"gatsby-plugin-image","version":"2.21.0-next.0","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.21.0-next.0","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.21.0-next.0","gatsby-plugin-utils":"^3.15.0-next.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"1ddee58dbf04f09aef77246a454f9600c956ad28","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.21.0-next.0","_nodeVersion":"16.15.1","_npmVersion":"lerna/3.22.1/node@v16.15.1+x64 (linux)","dist":{"integrity":"sha512-gpWiCJimsDe+Q3n6fKR5q/EYsprohVfdppNZzstr9kyHOrdBNBJ8EqkZEyCXnLT533dNbob2EeulPYitxknbVA==","shasum":"c465840bc8e80a12e2e1cb495c89ffa5c099cb25","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.21.0-next.0.tgz","fileCount":87,"unpackedSize":603917,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAYIsMFGSbBdmYZVIpIe2vqR8mx4xTD8H01J/Vt3lBDiAiBbz4ZZ0Py9c6ei1aevOecwCkJ3kd4jGL33LXln1Z5Pxg=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi4rKaACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq/HxAApGhDphzVN6dBNEDMlDcvjyyCEjF1n//kUdhzFac3jfdtELqp\r\nBGhmIc0+ZAVtB9az4p+q6gQjY++SzgzgeBgQKoem1o8NVAKI7Dnjyu8/VtHp\r\nFkdlPu7nqbvmEI3SftHyWN3gc4jeYVYuxfNlSth7HXqG8Ni5EdgETAedLnWT\r\nvWXk2CTNkUynL+XOXkRpRg6akZIdHfRrD2oJBmjBLNrhP+fNgDLyL3LUmviz\r\nY3kkj5QUCic9bVJmNGrsgMrG0rOxYR5/OhlGr/tRJuwRlHDPLOhmg3/Q3box\r\nNNdoYjXSug+50AaVZSz6r5528ZjuRLtwCBWD++VHfbyXtjwTvlghnG0bHz7v\r\nsLd8/h7FM6iPj2HC/AdLkqzDRWaTDQObzl9O0hGSB/SOe/X0SVV40r2PvZ/f\r\nO7Fohw9O63V5ODsl9LVx8UPvt566/jcI2WA8x5riiHUMgzdHBO2vBovXJ24t\r\nL70Y7SvC6GvFoOXaXftRq+YmulOYCe4or10p1VpuvQKL2xMxMrLe4vJ5hLDk\r\n3KwMwdhew28o5ta2WPOaXgoNhX8304NmhpYWFlqk45cvdaPl8MGu71MeJLXR\r\nYgvDLbAk49b8wC9kO8HQBWCdZMOEPtHsMi6hQivhSE4mUlt9cdYHw9Wc+HK8\r\njqW6vYltNLvfujBHIdFazSftwmKrPzZVVEM=\r\n=90C7\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"},{"name":"ascorbic","email":"m@mk.gg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.21.0-next.0_1659024026177_0.42931167634950174"},"_hasShrinkwrap":false},"2.20.0":{"name":"gatsby-plugin-image","version":"2.20.0","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.20.0","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.20.0","gatsby-plugin-utils":"^3.14.0","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"3ec74acade17fe80c6281c7d0caf52a78a018810","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.20.0","_nodeVersion":"16.15.1","_npmVersion":"lerna/3.22.1/node@v16.15.1+x64 (linux)","dist":{"integrity":"sha512-GCZs0iY9kG3adDxp5/xjUHmjhBA6y1SB448eMP0JD7iw56Ddd9B/eFrTqpLNG6lBIFtBjhyFKHIzhWAG7yEHVg==","shasum":"426e36e5fdaac7c8f97c7eb28732130c37bcb117","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.20.0.tgz","fileCount":87,"unpackedSize":603889,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCECE3smgYV0eYp9DgxyxnM3nsrQXt6K4XLWix2hlAhnQIgNBwrjUXgFsrqYqk9RvR1/69Gf8YNmIiRc2Ddjd59jr8="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi6VexACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmru8g/+LkPKiRBDgwCiJPKUqQHsDITzqCNjnoFhNC3fq9cvjtEsRM5A\r\nUBfvXtMH4lpBak+YJmhpqpF4RkYG7hitcEeHfk0V6sKXn3hiw2ytHnJvQjcm\r\ncOKyQN7U+pNf5L7u7r/vUVDxaAG7gaxcgazSuoJs84orySNCPCjEo/dS4egU\r\nbHD/6YnrfkeZsjf5V6/CfYsmxXXapvpEPkw45J++zRWraBrVCgwUxqHPN/Id\r\nFCSb1aNxo3ZM7n2zH7jZU1PUTL0SsH7mQCFPMiWfzilo9RcQtcH3K1S+d8T7\r\nVzEUFd+hnlQlhqipXqV279Y3SLVjPJW1JU25TAqS+Cps7uJ2tyfDUJOKpDaP\r\nTJ3fjiSK69wIGm8wXxlfYgYyo5y1JVoxwPlNW4hBRHmhFXNCOOgUyrwhHG3C\r\nqNVrU8S+fnqr+J7xpO3+hKuvbk/cUA3bY5WdtIbirIrB9isdZs5dxaikCymf\r\ngaNvjuaH84qcs6aTt68EyvR3DresM+Hhnn144mePyf/N1/p3k3BbaRH2iO9D\r\n6O8M4uLupGnezd38N0LhKreiOpeXkjVxvTK+pEZHAgHmUCPDMpwfyXRey7gb\r\n4n9QJWb1w1YRD2eh93Ysxb2IX50Dmf0hiDQDp4C47iagcjZdgOwAiGKLmXsI\r\n4J5lLxrnAb3dvPDVVdyDVLB7ORLwd8R8fk4=\r\n=3etx\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"pieh","email":"misiek.piechowiak@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.20.0_1659459504901_0.6828754467281168"},"_hasShrinkwrap":false},"2.21.0-next.1":{"name":"gatsby-plugin-image","version":"2.21.0-next.1","scripts":{"build":"npm-run-all --npm-path npm -s clean -p build:*","build:gatsby-node":"tsc --jsx react --downlevelIteration true --skipLibCheck true --esModuleInterop true --outDir dist/ src/gatsby-node.ts src/babel-plugin-parse-static-images.ts src/resolver-utils.ts src/types.d.ts -d --declarationDir dist/src","build:gatsby-ssr":"microbundle -i src/gatsby-ssr.tsx -f cjs -o ./[name].js --no-pkg-main --jsx React.createElement --jsxFragment React.Fragment --no-compress --external=common-tags,react --no-sourcemap","build:server":"microbundle -f cjs,es --jsx React.createElement --jsxFragment React.Fragment --define SERVER=true","build:browser":"microbundle -i src/index.browser.ts -f cjs,modern --jsx React.createElement --jsxFragment React.Fragment -o dist/gatsby-image.browser --define SERVER=false","prepare":"yarn build","watch":"npm-run-all --npm-path npm -s clean -p watch:*","watch:gatsby-node":"yarn build:gatsby-node --watch","watch:gatsby-ssr":"yarn build:gatsby-ssr watch","watch:server":"yarn build:server --no-compress watch","watch:browser":"yarn build:browser --no-compress watch","test":"jest","test:watch":"jest --watch","clean":"del-cli dist/*"},"sideEffects":false,"keywords":["gatsby","gatsby-plugin"],"main":"dist/gatsby-image.js","module":"dist/gatsby-image.module.js","esmodule":"dist/gatsby-image.modern.js","browser":{"./dist/gatsby-image.js":"./dist/gatsby-image.browser.js","./dist/gatsby-image.module.js":"./dist/gatsby-image.browser.modern.js"},"types":"dist/src/index.d.ts","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","devDependencies":{"@babel/cli":"^7.15.4","@babel/core":"^7.15.5","@testing-library/react":"^11.2.7","@types/babel__core":"^7.1.12","@types/babel__traverse":"^7.11.1","@types/fs-extra":"^9.0.13","@types/node":"^14.10.2","@types/prop-types":"^15.7.3","@types/react":"^17.0.40","@types/react-dom":"^17.0.13","ast-pretty-print":"^2.0.1","babel-plugin-macros":"^2.8.0","cross-env":"^7.0.3","cssnano":"^4.1.10","del-cli":"^3.0.1","do-sync":"^3.0.18","microbundle":"^0.15.0","npm-run-all":"^4.1.5","postcss":"^8.2.9","semver":"^7.3.7","terser":"^5.3.8","typescript":"^4.7.4"},"peerDependencies":{"@babel/core":"^7.12.3","gatsby":"^4.0.0-next","gatsby-plugin-sharp":"^4.0.0-next","gatsby-source-filesystem":"^4.0.0-next","react":"^16.9.0 || ^17.0.0 || ^18.0.0","react-dom":"^16.9.0 || ^17.0.0 || ^18.0.0"},"dependencies":{"@babel/code-frame":"^7.14.0","@babel/parser":"^7.15.5","@babel/runtime":"^7.15.4","@babel/traverse":"^7.15.4","babel-jsx-utils":"^1.1.0","babel-plugin-remove-graphql-queries":"^4.21.0-next.1","camelcase":"^5.3.1","chokidar":"^3.5.3","common-tags":"^1.8.2","fs-extra":"^10.1.0","gatsby-core-utils":"^3.21.0-next.1","gatsby-plugin-utils":"^3.15.0-next.1","objectFitPolyfill":"^2.3.5","prop-types":"^15.8.1"},"repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"license":"MIT","gitHead":"d8efbc219c3f4c4250f1681d87757e2980ad6afc","readme":"# gatsby-plugin-image\n\nAdding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!\n\nFor full documentation on all configuration options, see [the Gatsby Image Plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/)\n\n## Contents\n\n- [Installation](#installation)\n- [Using the Gatsby Image components](#using-the-gatsby-image-components)\n  - [Static images](#static-images)\n  - [Dynamic images](#dynamic-images)\n- [Customizing the default options](#customizing-the-default-options)\n- [Migrating to gatsby-plugin-image](#migrating)\n\n## Installation\n\n1. Install `gatsby-plugin-image` and `gatsby-plugin-sharp`. Additionally install `gatsby-source-filesystem` if you are using static images, and `gatsby-transformer-sharp` if you are using dynamic images.\n\n```shell\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n2. Add the plugins to your `gatsby-config.js`:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n## Using the Gatsby Image components\n\n### Deciding which component to use\n\nThe Gatsby Image plugin includes two image components: one for static and one for dynamic images. An effective way to decide which you need is to ask yourself: _\"will this image be the same every time the component or template is used?\"_. If it will always be the same, then use `StaticImage`. If it will change, whether through data coming from a CMS or different values passed to a component each time you use it, then it is a dynamic image and you should use the `GatsbyImage` component.\n\n### Static images\n\nIf you are using an image that will be the same each time the component is used, such as a logo or front page hero image, you can use the `StaticImage` component. The image can be a local file in your project or an image hosted on a remote server. Any remote images are downloaded and resized at build time.\n\n1. **Add the image to your project.**\n\n   If you are using a local image, copy it into the project. A folder such as `src/images` is a good choice.\n\n2. **Add the `StaticImage` component to your template.**\n\n   Import the component, then set the `src` prop to point to the image you added earlier. The path is relative to the source file itself. If your component file was `src/components/dino.js`, then you would load the image like this:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n   }\n   ```\n\n   If you are using a remote image, pass the image URL in the `src` prop:\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Kitten() {\n     return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n   }\n   ```\n\n   When you build your site, the `StaticImage` component will load the image from your filesystem or from the remote URL, and it will generate all the sizes and formats that you need to support a responsive image.\n\n   Because the image is loaded at build time, you cannot pass the filename in as a prop, or otherwise generate it outside of the component. It should either be a static string, or a local variable in the component's scope.\n\n   **Important:** Remote images are downloaded and resized at build time. If the image is changed on the other server, it will not be updated on your site until you rebuild.\n\n3. **Configure the image.**\n\n   You configure the image by passing props to the `<StaticImage />` component. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options [in the API docs](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n   ```jsx\n   import { StaticImage } from \"gatsby-plugin-image\"\n\n   export function Dino() {\n     return (\n       <StaticImage\n         src=\"../images/dino.png\"\n         alt=\"A dinosaur\"\n         placeholder=\"blurred\"\n         layout=\"fixed\"\n         width={200}\n         height={200}\n       />\n     )\n   }\n   ```\n\n   This component renders a 200px by 200px image of a dinosaur. Before loading it will have a blurred, low-resolution placeholder. It uses the `\"fixed\"` layout, which means the image does not resize with its container.\n\n#### Restrictions on using `StaticImage`\n\nThere are a few technical restrictions to the way you can pass props into `StaticImage`. Most importantly, you can't use any of the parent component's props. For more information, refer to the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#restrictions-on-using-staticimage). If you find yourself wishing you could use a prop passed from a parent for the image `src` then it's likely that you should be using a dynamic image.\n\n### Dynamic images\n\nIf you need to have dynamic images (such as if they are coming from a CMS), you can load them via GraphQL and display them using the `GatsbyImage` component.\n\n1. **Add the image to your page query.**\n\n   Any GraphQL File object that includes an image will have a `childImageSharp` field that you can use to query the image data. The exact data structure will vary according to your data source, but the syntax is like this:\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       avatar {\n         childImageSharp {\n           gatsbyImageData(width: 200)\n         }\n       }\n     }\n   }\n   ```\n\n2. **Configure your image.**\n\n   For all the configuration options, see the [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/).\n\n   You configure the image by passing arguments to the `gatsbyImageData` resolver. You can change the size and layout, as well as settings such as the type of placeholder used when lazy loading. There are also advanced image processing options available. You can find the full list of options in the API docs.\n\n   ```graphql\n   query {\n     blogPost(id: { eq: $Id }) {\n       title\n       body\n       author\n       avatar {\n         childImageSharp {\n           gatsbyImageData(\n             width: 200\n             placeholder: BLURRED\n             formats: [AUTO, WEBP, AVIF]\n           )\n         }\n       }\n     }\n   }\n   ```\n\n3. **Display the image.**\n\n   You can then use the `GatsbyImage` component to display the image on the page. The `getImage()` function is an optional helper to make your code easier to read. It takes a `File` and returns `file.childImageSharp.gatsbyImageData`, which can be passed to the `GatsbyImage` component.\n\n   ```jsx\n   import { graphql } from \"gatsby\"\n   import { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n   function BlogPost({ data }) {\n     const image = getImage(data.blogPost.avatar)\n     return (\n       <section>\n         <h2>{data.blogPost.title}</h2>\n         <GatsbyImage image={image} alt={data.blogPost.author} />\n         <p>{data.blogPost.body}</p>\n       </section>\n     )\n   }\n\n   export const pageQuery = graphql`\n     query {\n       blogPost(id: { eq: $Id }) {\n         title\n         body\n         author\n         avatar {\n           childImageSharp {\n             gatsbyImageData(\n               width: 200\n               placeholder: BLURRED\n               formats: [AUTO, WEBP, AVIF]\n             )\n           }\n         }\n       }\n     }\n   `\n   ```\n\nFor full APIs, see [Gatsby Image plugin reference guide](https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image).\n\n## Customizing the default options\n\nYou might find yourself using the same options (like `placeholder`, `formats` etc.) with most of your `GatsbyImage` and `StaticImage` instances.\nYou can customize the default options with `gatsby-plugin-sharp`.\n\nThe following configuration describes the options that can be customized along with their default values:\n\n```javascript:title=gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n## Migrating\n\n_Main article: **[Migrating from gatsby-image to gatsby-plugin-image](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide)**_\n\nIf your site uses the old `gatsby-image` component, you can use a codemod to help you migrate to the new Gatsby Image components. This can update the code for most sites. To use the codemod, run this command in the root of your site:\n\n```shell\nnpx gatsby-codemods gatsby-plugin-image\n```\n\nThis will convert all GraphQL queries and components to use the new plugin. For more details, see [the migration guide](https://www.gatsbyjs.com/docs/reference/release-notes/image-migration-guide).\n","readmeFilename":"README.md","description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"_id":"gatsby-plugin-image@2.21.0-next.1","_nodeVersion":"16.13.0","_npmVersion":"lerna/3.22.1/node@v16.13.0+arm64 (darwin)","dist":{"integrity":"sha512-4qvEFNmWg/dh3Q72zyB4auHlr1I8mtFHwELND/3iYwocb8eyssCJ1qNl47pZ6FJLs8MoqQueEbeMe2j4IzOVAg==","shasum":"d7a01d366e0422c5c0d5d1539a780b884a32917d","tarball":"https://registry.npmjs.org/gatsby-plugin-image/-/gatsby-plugin-image-2.21.0-next.1.tgz","fileCount":87,"unpackedSize":605258,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICM1Lqg1B6hBxh/6YsYGUoGgs6C65+HuMPSWcJ5QTrV4AiAKxlyyYcxigoftuDadpGuNHrlVj8mJ1Hd6rwJFp+NaQg=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi67YzACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqRJw//Q4kvVF9+wlC7yKB9PBUvpxSFl00HYMA4rhVOXsi+No7TnaYk\r\nESLV+BtowCWZ0Pq3/C4SAQ6WoYh6nFUfYqRTFLqNFKL2vo+R1neuMb/G2EM0\r\n3TSN3F+upMYAEZ1V8vDIxuimNqkCgyClaCEBDMJ+/5edMk/WFzASrNHF5l4N\r\nnicw7t4uDrXzMGKli4IBbGJ1Y1A5Esg9oRvDZuwwnYgV9qv1wmTBWpYGWYls\r\nlZFv1XO+UM3aYNbFAfQzXLOaGP/57eT5jFDhX1JSP+aNTJRfNeO2yKRZoc8p\r\nZrPK7hCsKQzHcYbZUHYXBLSsBNN+nvH1nwysKprga4FqN3NzwNt7cxH7aDTR\r\n/KIhylqwvp6NJ4NUgR9hwVwO2t43s6TvmpmMNdHL4LA0RlR4JMig8p2SDg7v\r\n0P0kHmmNUgvHNFwBVUqrtQsKUrOes27LQ9pZph19AN7Z7zAK/4SEDGQmTqVL\r\nGcT0Vu2ufrMk6vuRKeDnjFuMZwMqaVbH7DRvvUf51Bmgr9bA5RDx7CkZ1w9Q\r\ngiHJvzqWw5DaKwdETsLBzUKzq90U1znyI2hUy+GjAag2mIc+ZG/xSNit8IFn\r\n/0FG6mbXEcnousnKIYCpwVKytYsjFvzW2Qxwgijo4LbuYY0/ilW53Oozw1By\r\n2AY6LoDPbbrPBJY5nh61sryB1qvbuv5GfhU=\r\n=Dw1I\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"lekoarts","email":"lekoarts@gmail.com"},"directories":{},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/gatsby-plugin-image_2.21.0-next.1_1659614771493_0.5183156067268888"},"_hasShrinkwrap":false}},"time":{"created":"2020-10-06T11:24:12.392Z","1.0.1-static-image.16885":"2020-10-06T11:24:12.497Z","modified":"2022-08-04T12:06:12.109Z","1.0.1-static-image.16886":"2020-10-06T11:51:05.514Z","1.0.1-static-image.16888":"2020-10-06T13:40:03.479Z","0.0.2":"2020-10-15T11:34:28.447Z","0.0.3":"2020-10-16T08:56:05.063Z","0.0.4-dev-ssr-2.17009":"2020-10-19T17:43:55.300Z","0.0.4":"2020-10-20T12:39:38.030Z","0.0.4-static-image.17092":"2020-10-21T09:27:02.979Z","0.0.5-static-image.17119":"2020-10-21T09:41:40.941Z","0.0.5-static-image.17120":"2020-10-21T10:01:33.424Z","0.0.5-static-image.17139":"2020-10-23T12:19:45.659Z","0.0.5":"2020-10-26T11:02:48.375Z","0.0.6":"2020-11-02T08:45:58.391Z","0.1.0-next.0":"2020-11-03T16:47:07.315Z","0.0.7":"2020-11-04T11:41:45.411Z","0.1.0-next.1":"2020-11-10T16:45:36.524Z","0.2.0-next.0":"2020-11-10T17:43:06.214Z","0.1.0":"2020-11-12T17:13:07.042Z","0.3.0-next.0":"2020-11-18T06:12:57.885Z","0.3.0-next.1":"2020-11-18T14:32:24.684Z","0.2.0":"2020-11-19T18:59:13.130Z","0.2.0-image-helpers.55":"2020-11-20T13:23:28.865Z","0.2.0-image-helpers.59":"2020-11-23T15:52:38.467Z","0.4.0-next.0":"2020-11-26T22:00:55.481Z","0.4.0-next.1":"2020-12-01T21:52:07.465Z","0.3.0":"2020-12-02T01:04:20.369Z","0.4.0-next.2":"2020-12-04T17:49:07.769Z","0.3.1":"2020-12-07T19:13:04.974Z","0.4.0-next.3":"2020-12-08T20:09:27.248Z","0.5.0-next.0":"2020-12-10T21:39:54.621Z","0.5.0-next.1":"2020-12-15T13:50:14.833Z","0.4.0":"2020-12-15T18:00:12.363Z","0.5.0-next.2":"2020-12-17T14:30:26.272Z","0.5.0-next.3":"2020-12-17T14:53:38.381Z","0.5.0-next.4":"2020-12-17T17:38:20.226Z","0.5.0-next.5":"2020-12-18T12:09:09.576Z","0.2.0-telemetry-test.359":"2020-12-22T11:45:23.142Z","0.2.0-telemetry-test.360":"2020-12-22T11:59:38.376Z","0.5.0-avif.11":"2020-12-23T11:39:53.636Z","0.4.1":"2020-12-23T16:50:42.206Z","0.5.0-next.6":"2020-12-29T14:37:22.682Z","0.6.0-next.0":"2020-12-29T21:18:08.003Z","0.5.0":"2021-01-05T19:33:59.741Z","0.6.0-next.1":"2021-01-12T20:03:08.287Z","0.5.1":"2021-01-13T10:52:06.741Z","0.6.0-query-chunk-stats-base.68":"2021-01-13T19:09:21.648Z","0.7.0-next.0":"2021-01-18T19:25:48.215Z","0.6.0":"2021-01-19T18:45:40.310Z","0.6.1":"2021-01-20T17:24:05.925Z","0.6.2":"2021-01-26T09:27:37.303Z","0.7.0-next.1":"2021-01-26T16:36:04.914Z","0.6.3":"2021-01-28T09:01:22.166Z","0.8.0-next.0":"2021-01-28T16:27:57.363Z","0.6.4":"2021-01-29T16:48:08.138Z","0.7.0-cpb3.26":"2021-01-31T14:39:21.536Z","0.7.0":"2021-02-02T17:00:29.181Z","0.8.0-next.1":"2021-02-04T10:43:36.999Z","1.0.0-next.0":"2021-02-05T12:15:32.289Z","0.7.1":"2021-02-05T17:08:23.545Z","1.0.0-next.1":"2021-02-08T09:29:26.819Z","1.0.0-next.2":"2021-02-11T10:03:58.121Z","1.0.0-next.3":"2021-02-12T09:42:42.471Z","1.0.0-cpb3.33":"2021-02-15T11:58:18.435Z","1.0.0-next.4":"2021-02-17T16:00:26.965Z","1.0.0-next.5":"2021-02-18T10:30:26.377Z","1.0.0-next.6":"2021-02-19T15:58:27.810Z","1.0.0-next.7":"2021-02-19T17:07:04.086Z","1.0.0-next.8":"2021-02-22T07:12:33.738Z","0.7.2":"2021-02-24T14:24:04.348Z","1.0.0-next.9":"2021-02-25T11:03:29.895Z","1.1.0-next.0":"2021-02-26T09:28:03.907Z","1.0.0-reach-router.17":"2021-02-26T10:35:54.550Z","1.1.0-next.1":"2021-02-26T13:47:14.558Z","1.0.0-v3rc.0":"2021-02-26T15:57:06.397Z","1.0.0-v3rc.1":"2021-03-01T21:00:42.659Z","1.0.0":"2021-03-02T10:42:18.645Z","1.1.0-next.2":"2021-03-10T09:47:39.816Z","1.0.1":"2021-03-10T21:14:07.148Z","1.2.0-next.0":"2021-03-11T20:13:09.098Z","1.1.0":"2021-03-16T19:31:09.334Z","1.1.1":"2021-03-18T15:36:42.381Z","1.2.0-next.1":"2021-03-19T12:28:33.386Z","1.1.2":"2021-03-23T18:52:03.677Z","1.3.0-next.0":"2021-03-25T17:28:33.177Z","1.1.3":"2021-03-30T14:11:49.301Z","1.3.0-next.1":"2021-03-30T16:11:00.971Z","1.2.0":"2021-03-30T16:57:55.795Z","1.3.0-alpha-sharp-upgrade.15":"2021-03-31T08:19:55.840Z","1.2.1":"2021-04-07T12:39:10.965Z","1.3.0-next.2":"2021-04-07T15:31:32.363Z","1.3.0-next.3":"2021-04-09T14:48:42.532Z","1.4.0-next.0":"2021-04-09T15:22:15.367Z","1.3.0":"2021-04-13T19:21:32.856Z","1.4.0-next.1":"2021-04-16T11:39:33.023Z","1.3.1":"2021-04-19T20:43:38.044Z","1.4.0-functions-next.18":"2021-04-20T20:30:36.236Z","1.4.0-next.3":"2021-04-20T23:37:34.140Z","1.5.0-next.0":"2021-04-23T11:00:33.442Z","1.4.0":"2021-04-27T21:42:30.129Z","1.5.0-next.1":"2021-05-05T06:39:08.918Z","1.6.0-next.0":"2021-05-06T18:13:25.605Z","1.4.1":"2021-05-07T20:08:59.365Z","1.5.0":"2021-05-11T18:58:32.412Z","1.6.0-next.1":"2021-05-20T20:18:20.548Z","1.7.0-next.0":"2021-05-21T08:04:41.235Z","1.6.0":"2021-05-25T16:56:02.922Z","1.7.0-next.1":"2021-05-31T21:51:15.307Z","1.7.0-next.2":"2021-06-02T13:50:36.539Z","1.8.0-next.0":"2021-06-03T19:08:25.377Z","1.7.0":"2021-06-08T17:19:04.843Z","1.8.0-next.1":"2021-06-10T13:13:55.145Z","1.7.1":"2021-06-10T16:49:28.936Z","1.9.0-next.0":"2021-06-18T07:43:03.912Z","1.8.0":"2021-06-22T21:03:08.107Z","1.9.0-next.1":"2021-06-28T08:46:17.521Z","1.10.0-next.0":"2021-07-01T19:58:37.790Z","1.9.0":"2021-07-06T19:01:40.341Z","1.10.0-next.1":"2021-07-08T14:33:29.436Z","1.11.0-next.0":"2021-07-15T15:53:34.069Z","1.11.0-next.1":"2021-07-19T12:08:35.929Z","1.10.0":"2021-07-20T15:07:05.008Z","1.10.1":"2021-07-21T11:37:24.890Z","1.10.0-alpha-remote-file.48":"2021-07-22T12:00:42.423Z","1.11.0-next.2":"2021-07-22T13:02:10.164Z","1.11.0-alpha-qe-sm.25":"2021-07-28T14:18:22.281Z","1.11.0-alpha-qe-sm.26":"2021-07-28T14:48:36.049Z","1.12.0-next.0":"2021-07-29T16:25:21.202Z","1.11.0":"2021-08-04T18:05:34.596Z","1.12.0-next.1":"2021-08-05T11:53:46.160Z","1.12.0-next.2":"2021-08-05T18:13:04.421Z","1.12.0-next.3":"2021-08-09T13:14:38.136Z","1.11.0-alpha-qe-sm.48":"2021-08-09T17:26:09.696Z","1.13.0-next.0":"2021-08-12T17:56:55.754Z","1.10.0-alpha-remote-fetch.59":"2021-08-12T18:06:52.106Z","1.12.0":"2021-08-18T08:59:21.635Z","2.0.0-alpha-9689ff.27":"2021-08-18T12:46:10.486Z","1.13.0-next.1":"2021-08-19T13:57:06.167Z","1.12.0-coreutils.29":"2021-08-23T14:12:20.847Z","1.11.0-alpha-qe-sm.67":"2021-08-24T14:45:11.063Z","1.13.0-next.2":"2021-08-25T09:01:39.048Z","1.11.0-alpha-qe-sm.69":"2021-08-25T16:09:55.256Z","1.11.0-alpha-qe-sm.70":"2021-08-26T13:32:14.726Z","1.13.0-next.3":"2021-08-27T08:49:09.925Z","1.14.0-next.0":"2021-08-27T10:19:59.941Z","2.0.0-alpha-9689ff.5":"2021-08-30T09:29:47.872Z","1.13.0":"2021-08-31T18:15:54.901Z","1.11.0-alpha-qe-sm.92":"2021-09-02T12:31:42.810Z","1.14.0-alpha-remote-fetch.78":"2021-09-02T15:49:24.748Z","1.14.0-next.1":"2021-09-02T17:11:30.577Z","1.14.0-alpha-remote-fetch.79":"2021-09-03T12:01:31.638Z","1.14.0-next.2":"2021-09-07T13:54:23.477Z","2.0.0-alpha-9689ff.8":"2021-09-08T10:41:40.112Z","1.14.0-next.4":"2021-09-08T16:01:21.413Z","2.0.0-alpha-9689ff.4":"2021-09-08T19:21:33.009Z","2.0.0-alpha-9689ff.9":"2021-09-09T13:25:37.072Z","2.0.0-alpha-9689ff.11":"2021-09-09T15:14:26.605Z","2.0.0-alpha-9689ff.21":"2021-09-10T14:20:12.101Z","2.0.0-alpha-9689ff.23":"2021-09-10T17:02:02.734Z","1.14.0-alpha-qe-sm.33":"2021-09-13T15:51:17.722Z","2.0.0-alpha-9689ff.13":"2021-09-13T19:39:54.044Z","2.0.0-next.0":"2021-09-14T10:17:36.900Z","2.0.0-next.1":"2021-09-14T19:34:22.108Z","2.0.0-next.2":"2021-09-15T17:35:15.485Z","2.0.0-zz-next.0":"2021-09-15T19:20:18.427Z","2.0.0-zz-next.1":"2021-09-15T22:47:06.115Z","1.14.0":"2021-09-17T19:18:30.611Z","1.14.1":"2021-10-05T19:35:14.866Z","2.0.0-zz-next.2":"2021-10-05T21:15:59.417Z","2.0.0-zz-next.3":"2021-10-12T07:31:19.114Z","2.1.0-next.0":"2021-10-20T19:54:37.621Z","2.0.0":"2021-10-21T11:59:05.073Z","1.14.0-drupal-next.81":"2021-10-26T00:54:17.203Z","2.1.0-next.1":"2021-10-29T11:03:08.814Z","2.1.0-next.2":"2021-10-29T16:47:09.339Z","2.2.0-next.0":"2021-11-01T09:11:21.599Z","1.14.2":"2021-11-02T11:01:21.882Z","2.1.0":"2021-11-02T15:37:34.487Z","2.2.0-next.1":"2021-11-08T08:04:48.887Z","2.2.0-next.2":"2021-11-09T20:58:29.570Z","2.1.1":"2021-11-10T14:27:11.000Z","2.1.2":"2021-11-11T15:07:41.528Z","2.3.0-next.0":"2021-11-15T09:49:03.560Z","2.1.3":"2021-11-15T15:23:51.855Z","2.2.0":"2021-11-16T16:53:57.123Z","2.3.0-next.1":"2021-11-22T12:35:14.305Z","2.4.0-next.0":"2021-11-30T12:58:24.296Z","2.3.0":"2021-12-01T12:53:50.814Z","2.4.0-next.1":"2021-12-09T08:43:34.273Z","2.5.0-next.0":"2021-12-09T13:20:44.168Z","2.4.0":"2021-12-14T13:39:05.117Z","2.5.0-next.1":"2021-12-15T15:16:49.927Z","2.5.0-next.2":"2021-12-22T15:39:15.704Z","2.5.0-next.3":"2022-01-04T11:48:19.086Z","2.6.0-next.0":"2022-01-06T16:10:18.178Z","2.5.0":"2022-01-11T16:21:14.243Z","2.5.1":"2022-01-12T14:15:16.332Z","2.6.0-next.1":"2022-01-13T09:21:27.995Z","2.5.2":"2022-01-17T12:20:29.544Z","2.6.0-next.2":"2022-01-19T19:35:09.631Z","2.5.0-alpha-trailing-slash.71":"2022-01-20T08:23:19.027Z","2.7.0-next.0":"2022-01-21T09:30:51.806Z","2.6.0-alpha-ts-jit.27":"2022-01-21T14:04:22.618Z","2.6.0":"2022-01-25T14:09:22.634Z","2.7.0-next.1":"2022-02-02T09:34:19.664Z","2.7.0-alpha-image-service.14":"2022-02-02T16:27:54.818Z","2.8.0-next.0":"2022-02-07T15:01:41.389Z","2.7.0-alpha-image-service.13":"2022-02-08T07:08:24.914Z","2.7.0-alpha-image-service.16":"2022-02-08T08:39:17.964Z","2.7.0":"2022-02-08T15:17:43.231Z","2.8.0-alpha-image-service.25":"2022-02-09T08:22:11.327Z","2.8.0-alpha-image-service.28":"2022-02-10T18:29:44.449Z","2.8.0-alpha-image-service.24":"2022-02-10T21:34:00.294Z","2.8.0-alpha-image-service.26":"2022-02-11T11:12:45.602Z","2.8.0-alpha-image-service.29":"2022-02-11T12:41:58.436Z","2.8.0-alpha-image-service.32":"2022-02-11T16:40:59.098Z","2.8.0-alpha-image-service.33":"2022-02-11T21:54:16.595Z","2.8.0-alpha-image-service.34":"2022-02-12T23:20:27.456Z","2.8.0-alpha-image-service.35":"2022-02-13T08:16:57.832Z","2.8.0-alpha-image-service.54":"2022-02-15T11:24:03.545Z","2.8.0-next.1":"2022-02-16T14:45:43.642Z","2.9.0-next.0":"2022-02-17T11:18:41.067Z","2.9.0-alpha-image-service2.14":"2022-02-21T15:37:38.120Z","2.8.0":"2022-02-22T10:40:15.944Z","2.8.1":"2022-02-25T14:24:40.183Z","2.9.0-next.1":"2022-02-28T14:28:44.320Z","2.8.2":"2022-03-01T09:16:29.736Z","2.10.0-next.0":"2022-03-01T14:02:27.584Z","2.9.0":"2022-03-01T14:28:52.118Z","2.10.0-next.1":"2022-03-01T23:28:06.213Z","2.10.0-next.2":"2022-03-02T07:45:33.626Z","2.10.0-next.3":"2022-03-08T16:18:23.536Z","2.9.1":"2022-03-09T09:09:42.047Z","2.11.0-next.0":"2022-03-14T21:00:27.433Z","2.11.0-next.1":"2022-03-15T23:18:39.219Z","2.10.0":"2022-03-16T18:31:22.593Z","2.11.0-next.2":"2022-03-17T08:13:48.754Z","2.10.1":"2022-03-23T13:49:50.402Z","2.11.0-next.3":"2022-03-24T12:08:46.293Z","2.12.0-next.0":"2022-03-24T23:24:15.981Z","2.11.0":"2022-03-29T16:51:08.678Z","2.12.0-next.1":"2022-03-30T18:09:59.860Z","2.11.1":"2022-03-31T09:56:06.126Z","2.12.0-next.2":"2022-04-01T09:26:13.251Z","2.12.0-next.3":"2022-04-07T13:40:18.519Z","2.13.0-next.0":"2022-04-07T20:17:01.325Z","2.12.0":"2022-04-12T20:02:07.880Z","2.12.1":"2022-04-12T22:36:04.375Z","2.14.0-next.0":"2022-04-21T11:52:07.847Z","2.14.0-next.1":"2022-04-25T13:52:16.940Z","2.13.0":"2022-04-26T11:29:03.484Z","2.14.0-next.2":"2022-04-29T09:44:52.032Z","2.14.0-next.3":"2022-05-03T12:59:41.372Z","2.14.0-next.4":"2022-05-05T09:19:10.400Z","2.14.0-next.5":"2022-05-05T10:51:52.682Z","2.15.0-next.0":"2022-05-05T15:46:14.942Z","2.15.0-next.1":"2022-05-09T09:27:55.321Z","2.14.0":"2022-05-10T15:09:02.916Z","2.15.0-next.2":"2022-05-12T08:12:17.801Z","2.11.0-alpha-luda.46":"2022-05-12T08:17:09.857Z","2.14.1":"2022-05-12T13:18:47.629Z","2.16.0-next.0":"2022-05-20T14:48:39.446Z","2.15.0-alpha-wp-image-cdn-auth.42":"2022-05-20T17:51:14.708Z","2.15.0-alpha-wp-image-cdn-auth.45":"2022-05-20T18:33:48.316Z","2.15.0-alpha-wp-image-cdn-auth.46":"2022-05-20T18:45:56.750Z","2.15.0":"2022-05-24T18:37:00.040Z","2.16.0-alpha-luda.34":"2022-05-30T09:38:07.335Z","2.16.0-next.1":"2022-05-31T08:14:18.220Z","2.15.1":"2022-06-01T11:01:07.666Z","2.16.0-next.2":"2022-06-01T11:55:04.303Z","2.16.0-alpha-image-cdn-caching.9":"2022-06-01T14:47:21.288Z","2.17.0-next.0":"2022-06-02T15:20:39.319Z","2.16.0":"2022-06-07T13:38:10.949Z","2.17.0-alpha-drupal-image-404.12":"2022-06-07T16:53:53.658Z","2.16.1":"2022-06-08T12:12:31.005Z","2.17.0-next.1":"2022-06-13T12:00:32.990Z","2.18.0-next.0":"2022-06-16T08:29:42.146Z","2.17.0":"2022-06-21T09:16:13.029Z","2.18.0-next.1":"2022-06-22T05:53:28.737Z","2.18.0-alpha-mdx-v2.66":"2022-06-29T13:59:44.810Z","2.18.0-alpha-mdx-v2.68":"2022-06-30T13:23:51.911Z","2.19.0-next.0":"2022-06-30T18:06:05.393Z","2.19.0-next.1":"2022-07-01T10:43:43.091Z","2.19.0-next.2":"2022-07-05T13:14:14.499Z","2.18.0":"2022-07-05T18:57:38.886Z","2.18.0-alpha-image-cdn-jobs-resolve.32":"2022-07-06T22:31:38.217Z","2.18.0-mdxv4-rc.68":"2022-07-07T12:36:27.332Z","2.18.1":"2022-07-12T16:32:56.743Z","2.17.0-alpha-gatsby-metadata.60":"2022-07-13T07:46:17.923Z","2.17.0-alpha-gatsby-metadata.78":"2022-07-14T08:37:46.554Z","2.17.0-alpha-gatsby-metadata.81":"2022-07-14T09:41:29.544Z","2.20.0-next.0":"2022-07-14T13:40:16.938Z","2.19.0":"2022-07-19T07:47:22.602Z","2.18.0-alpha-drupal-self-reference.18":"2022-07-19T19:07:23.060Z","2.20.0-next.1":"2022-07-22T06:50:36.288Z","2.20.0-next.2":"2022-07-25T09:21:18.702Z","2.18.0-mdxv4-rc.76":"2022-07-25T13:53:33.684Z","2.20.0-mdxv4-rc.60":"2022-07-26T12:20:57.605Z","2.20.0-next.3":"2022-07-27T08:43:56.700Z","2.20.0-mdxv4-rc.65":"2022-07-27T08:52:17.151Z","2.21.0-next.0":"2022-07-28T16:00:26.362Z","2.20.0":"2022-08-02T16:58:25.163Z","2.21.0-next.1":"2022-08-04T12:06:11.877Z"},"maintainers":[{"name":"j0sh77","email":"jcjohnson77@gmail.com"},{"name":"tyhopp","email":"hopp.ty.c@gmail.com"},{"name":"kgarbaya","email":"kgarbaya@gmail.com"},{"name":"marvinjudehk","email":"marvinjudehk@gmail.com"},{"name":"dschau","email":"dustinschau@gmail.com"},{"name":"kylemathews","email":"mathews.kyle@gmail.com"},{"name":"pieh","email":"misiek.piechowiak@gmail.com"},{"name":"wardpeet","email":"ward@coding-tech.com"},{"name":"tylerbarnes","email":"tyler@known.design"},{"name":"fk","email":"sechskilo@gmail.com"},{"name":"smthomas","email":"shane@codekarate.com"},{"name":"lekoarts","email":"lekoarts@gmail.com"},{"name":"rachelbahl","email":"rachel@gatsbyjs.com"},{"name":"daniellewgatsby","email":"daniel.lew@gatsbyjs.com"},{"name":"abhiaiyer","email":"abhiaiyer91+npm@gmail.com"}],"description":"Adding responsive images to your site while maintaining high performance scores can be difficult to do manually. The Gatsby Image plugin handles the hard parts of producing images in multiple sizes and formats for you!","homepage":"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-image#readme","repository":{"type":"git","url":"git+https://github.com/gatsbyjs/gatsby.git","directory":"packages/gatsby-plugin-image"},"author":{"name":"Matt Kane","email":"matt@gatsbyjs.com"},"bugs":{"url":"https://github.com/gatsbyjs/gatsby/issues"},"license":"MIT","readme":"","readmeFilename":"","keywords":["gatsby","gatsby-plugin"]}